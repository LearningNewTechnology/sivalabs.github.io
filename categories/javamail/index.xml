<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javamail on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/javamail/</link>
    <description>Recent content in Javamail on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 May 2011 14:57:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/javamail/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring &#43; Quartz &#43; JavaMail Integration Tutorial</title>
      <link>http://sivalabs.github.io/post/2011/spring-quartz-javamail-integration-tutorial/</link>
      <pubDate>Mon, 30 May 2011 14:57:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/spring-quartz-javamail-integration-tutorial/</guid>
      <description>&lt;p&gt;Quartz is a job scheduling framework which is used to schedule the jobs to be executed on the specified time schedule.&lt;br /&gt;
JavaMail is an API to send/recieve emails from Java Applications.&lt;/p&gt;

&lt;p&gt;Spring has integration points to integrate Quartz and JavaMail which makes easy to use those APIs.&lt;/p&gt;

&lt;p&gt;Lets create a small demo application to show how to integrate Spring + Quartz + JavaMail.&lt;/p&gt;

&lt;p&gt;Our application is to send birthday wishes emails to friends everyday at 6 AM.&lt;/p&gt;

&lt;p&gt;** Email.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Email &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;Attachment&amp;gt; attachments = new ArrayList&amp;lt;Attachment&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFrom()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFrom(String from)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.from = from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getTo()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setTo(String... to)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.to = to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getCc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setCc(String... cc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.cc = cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getBcc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setBcc(String... bcc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.bcc = bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getSubject()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setSubject(String subject)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.subject = subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getText()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setText(String text)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.text = text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;Attachment&amp;gt; getAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return attachments;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachments(List&amp;lt;Attachment&amp;gt; attachments)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.addAll(attachments);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachment(Attachment attachment)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.add(attachment);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAttachment(int index)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.remove(index);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAllAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.clear();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** Attachment.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Attachment&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private byte[] data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private boolean inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment(byte[] data, String filename, String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment(byte[] data, String filename, String mimeType, boolean inline)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.inline = inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public byte[] getData()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setData(byte[] data)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFilename()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFilename(String filename)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public boolean isInline()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setInline(boolean inline)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.inline = inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** EmailService.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.activation.DataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.MessagingException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.MimeMessage;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.util.ByteArrayDataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.mail.javamail.JavaMailSenderImpl;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.mail.javamail.MimeMessageHelper;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EmailService &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private JavaMailSenderImpl mailSender = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMailSender(JavaMailSenderImpl mailSender)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mailSender = mailSender;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void sendEmail(Email email) throws MessagingException {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  MimeMessage mimeMessage = mailSender.createMimeMessage();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  // use the true flag to indicate you need a multipart message&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  boolean hasAttachments = (email.getAttachments()!=null &amp;amp;&amp;amp; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         email.getAttachments().size() &amp;gt; 0 );&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, hasAttachments);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setTo(email.getTo());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setFrom(email.getFrom());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setSubject(email.getSubject());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setText(email.getText(), true);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;Attachment&amp;gt; attachments = email.getAttachments();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     if(attachments != null &amp;amp;&amp;amp; attachments.size() &amp;gt; 0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      for (Attachment attachment : attachments) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          String filename = attachment.getFilename() ;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          DataSource dataSource = new ByteArrayDataSource(attachment.getData(), &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                 attachment.getMimeType());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          if(attachment.isInline())&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           helper.addInline(filename, dataSource);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          }else{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           helper.addAttachment(filename, dataSource);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  mailSender.send(mimeMessage);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** BirthdayWisherJob.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.io.InputStream;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.Date;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.MessagingException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.quartz.JobExecutionContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.quartz.JobExecutionException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.core.io.ClassPathResource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.scheduling.quartz.QuartzJobBean;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class BirthdayWisherJob extends QuartzJobBean&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private EmailService emailService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setEmailService(EmailService emailService)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.emailService = emailService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; protected void executeInternal(JobExecutionContext context) throws JobExecutionException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(&amp;quot;Sending Birthday Wishes... &amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; usersBornToday = getUsersBornToday();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  for (User user : usersBornToday) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   try &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    Email email = new Email();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setFrom(&amp;quot;admin@sivalabs.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setSubject(&amp;quot;Happy BirthDay&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setTo(user.getEmail());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setText(&amp;quot;&amp;lt;h1&amp;gt;Dear &amp;quot;+user.getName()+&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;quot;, &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;Many Many Happy Returns of the day :-)&amp;lt;/h1&amp;gt;&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    byte[] data = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    ClassPathResource img = new ClassPathResource(&amp;quot;HBD.gif&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    InputStream inputStream = img.getInputStream();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    data = new byte[inputStream.available()];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    while((inputStream.read(data)!=-1));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    Attachment attachment = new Attachment(data, &amp;quot;HappyBirthDay&amp;quot;, &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;quot;image/gif&amp;quot;, true);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.addAttachment(attachment);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    emailService.sendEmail(email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   catch (MessagingException e) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    e.printStackTrace();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   catch (Exception e) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    e.printStackTrace();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;User&amp;gt; getUsersBornToday()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;User&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  User user1 = new User(&amp;quot;Siva Prasad&amp;quot;, &amp;quot;sivaprasadreddy.k@gmail.com&amp;quot;, new Date());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  users.add(user1);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  User user2 = new User(&amp;quot;John&amp;quot;, &amp;quot;abcd@gmail.com&amp;quot;, new Date());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  users.add(user2);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return users;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;applicationContext.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;beans&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;property name=&amp;quot;triggers&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;ref bean=&amp;quot;birthdayWisherCronTrigger&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobDetail&amp;quot; ref=&amp;quot;birthdayWisherJob&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;!-- run every morning at 6 AM --&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;cronExpression&amp;quot; value=&amp;quot;0/5 * * * * ?&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean name=&amp;quot;birthdayWisherJob&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobClass&amp;quot; value=&amp;quot;com.sivalabs.reminders.BirthdayWisherJob&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobDataAsMap&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;entry value-ref=&amp;quot;emailService&amp;quot; key=&amp;quot;emailService&amp;quot;&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property ref=&amp;quot;mailSender&amp;quot; name=&amp;quot;mailSender&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;host&amp;quot; value=&amp;quot;smtp.gmail.com&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;port&amp;quot; value=&amp;quot;465&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;protocol&amp;quot; value=&amp;quot;smtps&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;admin@gmail.com&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;*****&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;javaMailProperties&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.auth&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.starttls.enable&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.debug&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/beans&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** TestClient.java **&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.context.ApplicationContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class TestClient {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sending Email with Attachments using JavaMail</title>
      <link>http://sivalabs.github.io/post/2011/sending-email-with-attachments-using-javamail/</link>
      <pubDate>Mon, 30 May 2011 08:02:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/sending-email-with-attachments-using-javamail/</guid>
      <description>&lt;p&gt;We can send emails using JavaMail API.&lt;br /&gt;
Instead of directly using JavaMail API here is a small utility to send emails which shields the user from JavaMail internals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmailConfiguration.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.email;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.Properties;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EmailConfiguration&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private Properties properties = new Properties();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String SMTP_HOST = &amp;quot;mail.smtp.host&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String SMTP_AUTH = &amp;quot;mail.smtp.auth&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String SMTP_TLS_ENABLE = &amp;quot;mail.smtp.starttls.enable&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String SMTP_AUTH_USER = &amp;quot;smtp.auth.user&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String SMTP_AUTH_PWD = &amp;quot;smtp.auth.pwd&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static final String DEBUG = &amp;quot;debug&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Properties getProperties()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return this.properties;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setProperty(String key, String value)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.properties.put(key, value);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addProperties(Properties props)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.properties.putAll(props);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getProperty(String key)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return this.properties.getProperty(key);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Email.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.email;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Email &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;Attachment&amp;gt; attachments = new ArrayList&amp;lt;Attachment&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFrom()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFrom(String from)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.from = from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getTo()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setTo(String... to)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.to = to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getCc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setCc(String... cc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.cc = cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getBcc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setBcc(String... bcc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.bcc = bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getSubject()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setSubject(String subject)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.subject = subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getText()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setText(String text)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.text = text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;Attachment&amp;gt; getAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return attachments;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachments(List&amp;lt;Attachment&amp;gt; attachments)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.addAll(attachments);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachment(Attachment attachment)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.add(attachment);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAttachment(int index)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.remove(index);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAllAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.clear();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Attachment.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.email;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Attachment&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private byte[] data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment(byte[] data, String filename, String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  super();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public byte[] getData()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setData(byte[] data)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFilename()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFilename(String filename)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;EmailService.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.email;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.activation.DataHandler;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.activation.DataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.Authenticator;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.BodyPart;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.Message;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.MessagingException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.Multipart;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.PasswordAuthentication;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.Session;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.Transport;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.AddressException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.InternetAddress;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.MimeBodyPart;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.MimeMessage;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.MimeMultipart;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.util.ByteArrayDataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EmailService &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private EmailConfiguration configuration = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private Authenticator auth =null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public EmailService(EmailConfiguration configuration)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.configuration = configuration;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.auth = this.buildSmtpAuthenticator();     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private Authenticator buildSmtpAuthenticator()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String emailId = configuration.getProperty(EmailConfiguration.SMTP_AUTH_USER);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String password = configuration.getProperty(EmailConfiguration.SMTP_AUTH_PWD);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return new SMTPAuthenticator(emailId, password);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void sendEmail(Email email)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Session session = Session.getDefaultInstance(this.configuration.getProperties(), auth);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  boolean debug = Boolean.valueOf(this.configuration.getProperty(EmailConfiguration.DEBUG));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     session.setDebug(debug);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     try &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      Message msg = this.buildEmailMessage(session, email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   Transport.send(msg);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  } &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     catch (MessagingException e) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   throw new RuntimeException(e);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private Message buildEmailMessage(Session session, Email email) throws MessagingException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Message msg = new MimeMessage(session);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     msg.setSubject(email.getSubject());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     this.addRecievers(msg, email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     Multipart multipart = new MimeMultipart();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     this.addMessageBodyPart(multipart, email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     this.addAttachments(multipart, email);   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        msg.setContent(multipart);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return msg;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private void addRecievers(Message msg, Email email) throws MessagingException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  InternetAddress from = new InternetAddress(email.getFrom());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     msg.setFrom(from);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     InternetAddress[] to = this.getInternetAddresses(email.getTo());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     msg.setRecipients(Message.RecipientType.TO, to);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     InternetAddress[] cc = this.getInternetAddresses(email.getCc());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     msg.setRecipients(Message.RecipientType.CC, cc);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     InternetAddress[] bcc = this.getInternetAddresses(email.getBcc());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     msg.setRecipients(Message.RecipientType.BCC, bcc);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private void addMessageBodyPart(Multipart multipart, Email email) throws MessagingException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   BodyPart messageBodyPart = new MimeBodyPart();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   messageBodyPart.setContent(email.getText(), email.getMimeType());      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   multipart.addBodyPart(messageBodyPart);      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private void addAttachments(Multipart multipart, Email email) throws MessagingException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;Attachment&amp;gt; attachments = email.getAttachments();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     if(attachments != null &amp;amp;&amp;amp; attachments.size() &amp;gt; 0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      for (Attachment attachment : attachments) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       BodyPart attachmentBodyPart = new MimeBodyPart();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          String filename = attachment.getFilename() ;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          DataSource source = new ByteArrayDataSource(attachment.getData(), &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                 attachment.getMimeType());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          attachmentBodyPart.setDataHandler(new DataHandler(source));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          attachmentBodyPart.setFileName(filename);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          multipart.addBodyPart(attachmentBodyPart);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private InternetAddress[] getInternetAddresses(String... addresses) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       throws AddressException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(addresses == null || addresses.length == 0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  InternetAddress[] iAddresses = new InternetAddress[addresses.length];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     for (int i = 0; i &amp;lt; addresses.length; i++)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      iAddresses[i] = new InternetAddress(addresses[i]);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return iAddresses;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;class SMTPAuthenticator extends javax.mail.Authenticator&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String username;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String password;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    public SMTPAuthenticator(String username, String password) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.username = username;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.password = password;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public PasswordAuthentication getPasswordAuthentication()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return new PasswordAuthentication(username, password);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the mail.jar, activation.jar to the classpath. Here is the TestClient on how to use the EmailService Utility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.email;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EmailClient&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  EmailConfiguration configuration = new EmailConfiguration();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  configuration.setProperty(EmailConfiguration.SMTP_HOST, &amp;quot;smtp.gmail.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  configuration.setProperty(EmailConfiguration.SMTP_AUTH, &amp;quot;true&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  configuration.setProperty(EmailConfiguration.SMTP_TLS_ENABLE, &amp;quot;true&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  configuration.setProperty(EmailConfiguration.SMTP_AUTH_USER, &amp;quot;xyz@gmail.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  configuration.setProperty(EmailConfiguration.SMTP_AUTH_PWD, &amp;quot;**********&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  EmailService emailService = new EmailService(configuration);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Email email = new Email();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setFrom(&amp;quot;sivaprasadreddy.k@gmail.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setTo(&amp;quot;sivaprasadreddy_k@yahoo.co.in&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setCc(&amp;quot;sivaprasadreddy.k@gmail.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setSubject(&amp;quot;Test Mail from SivaLabs&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setText(&amp;quot;Hi, &amp;lt;h1&amp;gt;This is a test email from Siva Labs&amp;lt;/h1&amp;gt;&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.setMimeType(&amp;quot;text/html&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Attachment attachment1 = new Attachment(&amp;quot;ABCDEFGH&amp;quot;.getBytes(), &amp;quot;test1.txt&amp;quot;,&amp;quot;text/plain&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.addAttachment(attachment1);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Attachment attachment2 = new Attachment(&amp;quot;XYZZZZZZ&amp;quot;.getBytes(), &amp;quot;test2.txt&amp;quot;,&amp;quot;text/plain&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  email.addAttachment(attachment2);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  emailService.sendEmail(email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>