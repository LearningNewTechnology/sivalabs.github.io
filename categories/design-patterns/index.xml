<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on SivaLabs</title>
    <link>https://sivalabs.github.io/categories/design-patterns/</link>
    <description>Recent content in Design Patterns on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jun 2012 02:20:00 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/categories/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I explained Dependency Injection to My Team</title>
      <link>https://sivalabs.github.io/2012/06/how-i-explained-dependency-injection-to-my-team/</link>
      <pubDate>Tue, 19 Jun 2012 02:20:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/how-i-explained-dependency-injection-to-my-team/</guid>
      <description>Recently our company started developing a new java based web application and after some evaluation process we decided to use Spring.
But many of the team members are not aware of Spring and Dependency Injection principles.
So I was asked to give a crash course on what is Dependency Injection and basics on Spring.
Instead of telling all the theory about IOC/DI I thought of explaining with an example.
Requirement: We will get some Customer Address and we need to validate the address.</description>
    </item>
    
    <item>
      <title>Java Best Practices : Building Safe Domain Objects</title>
      <link>https://sivalabs.github.io/2012/01/java-best-practices-building-safe-domain-objects/</link>
      <pubDate>Mon, 16 Jan 2012 07:26:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/01/java-best-practices-building-safe-domain-objects/</guid>
      <description>Domain objects are the core building blocks of any application. These are the fine grained objects which carries the information about the problem domain model.
Generally domain objects will be created as dumb data carriers with setters/geters without having any logic. But this will cause huge problem in long run.
If you build the domain objects with dumb setters and getters we will end up in writing null checks all over the places.</description>
    </item>
    
    <item>
      <title>What is Inversion Of Control (IOC)?</title>
      <link>https://sivalabs.github.io/2008/12/what-is-inversion-of-control-ioc/</link>
      <pubDate>Sun, 21 Dec 2008 04:39:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2008/12/what-is-inversion-of-control-ioc/</guid>
      <description>Inversion Of Control is a design pattern which suggests the creation of collaborating objects and injecting them should not be done by the dependent object itself.
For example, Suppose WhetherController(Servlet) is depend on WhetherService which is depend WhetherDAO.
WhetherController .java
class WhetherController extends HttpServlet
{ 
protected doPost(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException 
{ 
WhetherService service = new WhetherService(); 
service.doSomething(params);
….
…. 
}
}</description>
    </item>
    
  </channel>
</rss>