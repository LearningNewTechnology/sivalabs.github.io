<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaee on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/javaee/</link>
    <description>Recent content in Javaee on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2015 13:04:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/javaee/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>http://sivalabs.github.io/post/2015/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2015/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>&lt;p&gt;In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?&lt;/p&gt;

&lt;p&gt;I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club. Here I would like to share my own thoughts on this epic Spring vs JavaEE debate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Business(sometimes political) Aspects&lt;/strong&gt;&lt;br /&gt;
In many organizations technology selection may not completely depends on developers choice. More specifically if you are working in so called giant enterprise organizations there are high chances that there is an Architecture Team who will decide what platform/language/framework/libraries to use in the projects.&lt;/p&gt;

&lt;p&gt;In addition to that, large enterprises also considers the following aspects while choosing the technology platform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maturity of the platform/language/framework/libraries&lt;/li&gt;
&lt;li&gt;Commercial support&lt;/li&gt;
&lt;li&gt;Licensing cost etc etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer I can hardly influence the decision making process for any of the above aspects, especially when I am a developer in offshore development center. So I don&amp;rsquo;t worry too much about these things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. If you are really good at Spring/JavaEE then learning the other one shouldn&amp;rsquo;t be difficult&lt;/strong&gt;&lt;br /&gt;
I am always surprised when someone says I am JavaEE expert but I can&amp;rsquo;t understand Spring or vice-versa. Both JavaEE and Spring work on the same core APIs (Servlet, JPA, JMS, BeanValidation etc), the difference is who is gluing the things together, Spring or AppServer.&lt;/p&gt;

&lt;p&gt;Even though there are some different APIs for things like dependency injection (Spring DI, CDI), REST (JAX-RS, SpringMVC) etc they look and behave pretty similar to each other.&lt;/p&gt;

&lt;p&gt;May be someone can say CDI is more typesafe than Spring DI. Doesn&amp;rsquo;t Spring and CDI behaves similarly when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Injection using @Autowired or @Inject works fine if there is only one Spring/CDI Bean&lt;/li&gt;
&lt;li&gt;Injection fails when there are more than one Spring or CDI bean implementations by throwing errors saying &amp;ldquo;Found more than one eligible beans that can be inject&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Use @Produces or @Bean annotated method to provide custom made objects as bean providers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As long as they are behaving similarly I don&amp;rsquo;t care whether they are implemented in more typesafe manner or used String based mappings in their internal implementations.&lt;/p&gt;

&lt;p&gt;How can one be expert in Spring and can&amp;rsquo;t understand JavaEE and vice-versa?? How much time it can take for a Spring expert to learn JavaEE??!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Which is more &amp;ldquo;Average Joe developer&amp;rdquo; friendly&lt;/strong&gt;&lt;br /&gt;
I think by now many people should have realized that success of a technology may not be completely depends on its merits, but also based on developers adoption. The most important thing to realize is &amp;ldquo;Not every software developer is a rock star developer. There are more average joe developers than passionate, tech ninjas&amp;rdquo;. So in order to people adapt any framework it should be &amp;ldquo;Average Joe Developer&amp;rdquo; friendly.&lt;/p&gt;

&lt;p&gt;I think Spring is doing pretty good job at it by providing more tools like SpringBoot, User Guides etc. Spring Security, Spring Integration, Spring XD, Spring Social addresses the modern business needs very well. Also think about various templates provided by Spring which makes easy to do things without worrying about boilerplate coding.&lt;/p&gt;

&lt;p&gt;JavaEE is also doing very well by introducing JBossForge, Wildfly Swarm etc to quickly get started. I came across few JavaEE based frameworks like Picketlink which addresses Security requirements, but I felt it is much more complex than it should be.&lt;/p&gt;

&lt;p&gt;The point I am trying to convey is &amp;ldquo;You can do pretty much everything in JavaEE that you can do with Spring&amp;rdquo;. The difference is which is giving more out-of-the-box to average joe developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Lame arguments without context&lt;/strong&gt;&lt;br /&gt;
Whenever Spring vs JavaEE debate arises people form two groups and debate endlessly.  Unfortunately the debates focus on some useless or outdated points.&lt;/p&gt;

&lt;p&gt;**XML heavy: **&lt;br /&gt;
JavaEE fans first start saying Spring is XML heavy and I hate XML blah blah blah. If you are still using Spring older than version 2.5 and assuming it is still same XML based then my friend you should wake up and head to &lt;a href=&#34;http://spring.io&#34;&gt;http://spring.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EJBs are bad (or) JSF is bad&lt;/strong&gt;&lt;br /&gt;
Spring fans jump on to bashing EJB and JSF as if they are same as EJB 2.x or JSF 1.x. If they really look at EJB 3.x and JSF 2.x then they wouldn&amp;rsquo;t argue on this at all. Don&amp;rsquo;t judge EJB 3.x with your 6 years back EJB2.x experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heavy weight or light weight&lt;/strong&gt;&lt;br /&gt;
My interpretation of this &amp;lsquo;weight&amp;rsquo; thing is based on runtime foot print. To my knowledge, when you deploy your managed beans into JavaEE container then container will proxy it and inject all enterprise services (Transactions, Security etc) and in case of Spring it will be done by Spring AOP.&lt;br /&gt;
I don&amp;rsquo;t have any metrics to say which is more heavy weight Container Proxy or SpringAOP Proxy, but I guess there may not be significant difference.&lt;/p&gt;

&lt;p&gt;Some people consider the size of war file as its &amp;lsquo;weight&amp;rsquo;. In that case compare (JavaEE AppServer + war) size with (SpringApp with 126 jars) and see which is light weight :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaEE is standards based&lt;/strong&gt;&lt;br /&gt;
Come on guys!!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vendor lock-in&lt;/strong&gt;&lt;br /&gt;
I think choosing a platform which doesn&amp;rsquo;t make you stick with one particular vendor is good. But going with an option purely based on the ability to move to a different implementation is not correct. How many times in an year you switch from one server to another? Choosing a platform which doesn&amp;rsquo;t lock you with a vendor is a &amp;lsquo;nice to have&amp;rsquo; but it should not be major factor to choose your platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We don&amp;rsquo;t need external libraries&lt;/strong&gt;&lt;br /&gt;
This is called &amp;ldquo;Arguing for the sake of arguing&amp;rdquo;. Show me any real application without having any dependencies. If you say I will develop my own logging library, I will write my own HTTP client, I will develop my own common-utilities then you need to look for a little bit more lazy architect/developers who doesn&amp;rsquo;t have &amp;ldquo;Re-invent all the wheels&amp;rdquo; sickness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Don&amp;rsquo;t look at the crowd and say &amp;ldquo;You are all idiots because you are using X, you should migrate to Y&amp;rdquo;.&lt;/strong&gt;&lt;br /&gt;
This is a common pattern that I observe on many community sites, especially on Reddit. Just post anything related to JavaEE vs Spring thing and there will be two groups who bash the other group like anything because other group are not using their favorite platform.&lt;/p&gt;

&lt;p&gt;Think for a minute. If Spring is not any good why so many people use it and love it. If JavaEE is not good why so many people switch from Spring to JavaEE. There is so many good things in each platform. Respect others for choosing whatever option they choose. If possible ask them the reasons why they went with one over the other and learn if you miss anything.&lt;/p&gt;

&lt;p&gt;Just saying &amp;ldquo;You all are idiots for not using my favorite option&amp;rdquo; doesn&amp;rsquo;t make them use your favorite technology. In fact it triggers the thought to come up with list of points why your favorite platform sucks.&lt;/p&gt;

&lt;p&gt;If you really want them to switch to your favorite platform then show the reasons with code examples. Show them how easy it is to develop applications using your favorite platform with sample applications. Write more articles on commonly facing issues and how to resolve them. Get the &amp;ldquo;Average Joe Developer&amp;rdquo; on-board onto your favorite platform.&lt;/p&gt;

&lt;p&gt;As an enthusiastic Java developer I read the Spring vs JavaEE discussions hoping there might be few things which I don&amp;rsquo;t know such as &amp;ldquo;in which areas one is better than the other&amp;rdquo;. But I find 70% of discussions goes on lame arguments which is not very interesting to me.&lt;/p&gt;

&lt;p&gt;I wish Spring and JavaEE camps to fight more and more and made their platform superior than the other. End of the day, no matter who win the debate ultimately developers will have more powerful platforms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring3&#43;JPA2&#43;JavaEE6AppServer = Confusion Over Configuration</title>
      <link>http://sivalabs.github.io/post/2012/spring3jpa2javaee6appserver-confusion-over-configuration/</link>
      <pubDate>Fri, 12 Oct 2012 11:08:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/spring3jpa2javaee6appserver-confusion-over-configuration/</guid>
      <description>&lt;p&gt;Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great. This post is not a rant on Spring Vs JavaEE6, but my experience of porting a Spring3+JPA2(Hibernate) application on JBoss AS-7.1 App Server.&lt;/p&gt;

&lt;p&gt;My application requirement is very simple: Developing a couple of SOAP based webservices using Spring3.1 and JPA2(Hibernate) and host it on JBoss AS 7.1.&lt;/p&gt;

&lt;p&gt;So I started creating a multi-module maven project with one jar module containing the service implementations using Spring &amp;amp; JPA and another war module which exposes those services as SOAP based webservices. But the key part is services needs to talk to multiple databases for some of the service methods.&lt;/p&gt;

&lt;p&gt;I am aware of JPA2 integration support from Spring without persistence.xml and cool packagesToScan attribute which makes life a bit easier. I configured 2 dataSources, 2 LocalContainerEntityManagerFactoryBeans, registered 2 JpaTransactionManagers and enabled Annotation based Transaction Management Support.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;txnManager1&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;txnManager2&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean class=&amp;quot;org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;bean class=&amp;quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&amp;quot;/&amp;gt;&amp;lt;!-- This will throw error because it found multiple EntityManagerFactory beans --&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean id=&amp;quot;txnManager1&amp;quot; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            class=&amp;quot;org.springframework.orm.jpa.JpaTransactionManager&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;              p:entityManagerFactory-ref=&amp;quot;emf1&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;bean id=&amp;quot;txnManager2&amp;quot; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           class=&amp;quot;org.springframework.orm.jpa.JpaTransactionManager&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;              p:entityManagerFactory-ref=&amp;quot;emf2&amp;quot;/&amp;gt;             &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;bean id=&amp;quot;emf1&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs1PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource1&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          &amp;lt;property name=&amp;quot;jpaVendorAdapter&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;             &amp;lt;bean id=&amp;quot;jpaAdapter&amp;quot; class=&amp;quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                     p:showSql=&amp;quot;${hibernate.show_sql}&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;jpaProperties&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;prop key=&amp;quot;hibernate.dialect&amp;quot;&amp;gt;${hibernate.dialect}&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                  &amp;lt;prop key=&amp;quot;hibernate.hbm2ddl.auto&amp;quot;&amp;gt;${hibernate.hbm2ddl.auto}&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;/props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;packagesToScan&amp;quot; value=&amp;quot;com.sivalabs.springdemo.entities&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;loadTimeWeaver&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          &amp;lt;bean class=&amp;quot;org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;bean id=&amp;quot;emf2&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs2PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource2&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          &amp;lt;property name=&amp;quot;jpaVendorAdapter&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;             &amp;lt;bean id=&amp;quot;jpaAdapter&amp;quot; class=&amp;quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                     p:showSql=&amp;quot;${hibernate.show_sql}&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;jpaProperties&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;prop key=&amp;quot;hibernate.dialect&amp;quot;&amp;gt;${hibernate.dialect}&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                  &amp;lt;prop key=&amp;quot;hibernate.hbm2ddl.auto&amp;quot;&amp;gt;${hibernate.hbm2ddl.auto}&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;/props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;packagesToScan&amp;quot; value=&amp;quot;com.sivalabs.springdemo.entities&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;loadTimeWeaver&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          &amp;lt;bean class=&amp;quot;org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean id=&amp;quot;dataSource1&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${node1.jdbc.driverClassName}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${node1.jdbc.url}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${node1.jdbc.username}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${node1.jdbc.password}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean id=&amp;quot;dataSource2&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${node2.jdbc.driverClassName}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${node2.jdbc.url}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${node2.jdbc.username}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${node2.jdbc.password}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I realized to bind Entitymanager with the correct PersistenceUnit I need to give persistenceUnitName to LocalContainerEntityManagerFactoryBean.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean class=&amp;quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;lt;property name=&amp;quot;persistenceUnits&amp;quot; &amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         &amp;lt;map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;entry key=&amp;quot;unit1&amp;quot; value=&amp;quot;Sivalabs1PU&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;entry key=&amp;quot;unit2&amp;quot; value=&amp;quot;Sivalabs2PU&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         &amp;lt;/map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;bean id=&amp;quot;emf1&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs1PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource1&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          ....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       ....        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;bean id=&amp;quot;emf2&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs2PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource2&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        ....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     ....        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in my Service Bean EntityManagers and transaction managers are glued together as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class AdminUserService implements UserService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    @PersistenceContext(unitName=&amp;quot;Sivalabs1PU&amp;quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    private EntityManager sivalabs1EM;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; @PersistenceContext(unitName=&amp;quot;Sivalabs2PU&amp;quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    private EntityManager sivalabs2EM;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  @Transactional(&amp;quot;txnManager1&amp;quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public List&amp;lt;User&amp;gt; getAllUsersFromSivalabs1DB() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       return sivalabs1EM.createQuery(&amp;quot;from User&amp;quot;, User.class).getResultList();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  @Transactional(&amp;quot;txnManager2&amp;quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public List&amp;lt;User&amp;gt; getAllUsersFromSivalabs2DB() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       return sivalabs2EM.createQuery(&amp;quot;from User&amp;quot;, User.class).getResultList();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this setup now I got the Exception saying &amp;ldquo;No persistence unit with name &amp;lsquo;Sivalabs1PU&amp;rsquo; found&amp;rdquo;.  Then after some googling I created  META-INF/persistence.xml file as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;persistence&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;persistence-unit name=&amp;quot;Sivalabs1PU&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;           &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/persistence-unit&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;persistence-unit name=&amp;quot;Sivalabs2PU&amp;quot;  transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;         &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/persistence-unit&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/persistence&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the persistence unit name error got resolved and got other Exception saying &amp;ldquo;User is not mapped [from User]&amp;ldquo;. The User class is annotated with @Entity and is in &amp;ldquo;&lt;strong&gt;com.sivalabs.springdemo.entities&lt;/strong&gt;&amp;rdquo; package which I configured to &amp;ldquo;&lt;strong&gt;packagesToScan&lt;/strong&gt;&amp;rdquo; attribute. I didn&amp;rsquo;t understand why &amp;ldquo;packagesToScan&amp;rdquo; attribute is not working which is working fine without persistence.xml. So for time being I configured entity classes in persistence.xml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;persistence&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;persistence-unit name=&amp;quot;Sivalabs1PU&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;       &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;class&amp;gt;com.sivalabs.springdemo.entities.User&amp;lt;/class&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/persistence-unit&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;persistence-unit name=&amp;quot;Sivalabs2PU&amp;quot;  transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;class&amp;gt;com.sivalabs.springdemo.entities.User&amp;lt;/class&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/persistence-unit&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/persistence&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally when I ran my JUnit Test which invokes AdminUserService methods everything looks good and working fine. Then I deployed the war file on JBoss AS 7.1 Server then again got a bunch of errors.  JBoss is complaining that &amp;ldquo;Connection cannot be null when &amp;lsquo;hibernate.dialect&amp;rsquo; not set&amp;rdquo; &amp;hellip;. &amp;ldquo;[PersistenceUnit: Sivalabs1PU] Unable to build EntityManagerFactory&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;After thinking for a couple of minutes, I understood that JBoss server is trying to do what it is supposed to do with &amp;ldquo;Convention Over Configuration&amp;rdquo; rules. JBoss is trying to create EntityManagerFactory because it found META-INF/persistence.xml in classpath. But as it doesn&amp;rsquo;t contain jdbc connection details its throwing Error.&lt;/p&gt;

&lt;p&gt;Again after some googling I found we can rename persistence.xml to something else(spring-persistence.xml) and hook up this new name with Spring as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;bean id=&amp;quot;emf1&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs1PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;property name=&amp;quot;persistenceXmlLocation&amp;quot; value=&amp;quot;classpath:META-INF/spring-persistence.xml&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource1&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          ....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       ....        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;bean id=&amp;quot;emf2&amp;quot; class=&amp;quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;persistenceUnitName&amp;quot; value=&amp;quot;Sivalabs2PU&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       &amp;lt;property name=&amp;quot;persistenceXmlLocation&amp;quot; value=&amp;quot;classpath:META-INF/spring-persistence.xml&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource2&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        ....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     ....        &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally I got this application working on my JBoss AS 7.1 successfully(Still I don&amp;rsquo;t know how many other holes are there that I haven&amp;rsquo;t yet found).&lt;/p&gt;

&lt;p&gt;But here I didn&amp;rsquo;t understand few Spring concepts:&lt;br /&gt;
&lt;em&gt;1. When I try to give persistenceUnitName why Spring is checking for that name to be existed in persistence.xml? Anyway that persistence.xml doesn&amp;rsquo;t contain anything exception the unit-name!!&lt;/em&gt;&lt;br /&gt;
_&lt;br /&gt;
_&lt;em&gt;2. Why packagesToScan mechanism is failing when used with persistence.xml? Is it a Spring Bug?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything seems to be working fine except one thing is missing, a smile on my face which usually I have when working with Spring and Tomcat :-(&lt;/p&gt;

&lt;p&gt;I like Spring framework very much and I am using it since 2006 and I do enjoy while writing Spring code. That doesn&amp;rsquo;t mean I don&amp;rsquo;t like CDI, EJB3, JAX-RS :-)&lt;/p&gt;

&lt;p&gt;Anyway, with all the above exercise I feel like &lt;strong&gt;Spring3+JPA2+JavaEE6AppServer=Confusion Over Configuration&lt;/strong&gt; and it is my(an average java developer) opinion only.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Again say one more time : Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great :-).&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep The Code Clean: WatchDog &amp; SpotTheBug Approach</title>
      <link>http://sivalabs.github.io/post/2012/keep-code-clean-watchdog-spotthebug/</link>
      <pubDate>Tue, 28 Aug 2012 10:25:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/keep-code-clean-watchdog-spotthebug/</guid>
      <description>&lt;p&gt;Before going to discuss &amp;ldquo;&lt;strong&gt;WatchDog &amp;amp; SpotTheBug Approach&lt;/strong&gt;&amp;rdquo;, let me give a brief context on what is the needs for this.&lt;/p&gt;

&lt;p&gt;Three months back I was asked to write core infrastructure code for our new application which uses all the latest and greatest technologies.&lt;br /&gt;
I have written the infrastructure code and implemented 2 usecases to demonstrate which logic should go into which layer and the code looks good(atleast to me :-)). Then I moved on to my main project and I was hearing that the project that i designed(from Now on-wards I will refer this as ProjectA) is going well.&lt;/p&gt;

&lt;p&gt;After 3 months last week one of the developer of ProjectA came to me to help him in resolving some JAXB Marshalling issue. Then I imported the latest code into eclipse and started looking into the issue and I was literally shocked by looking at the messy code. First I resolved that issue and started looking into whole code and I was speechless. How come the code become such a mess in this short span of time, it is just 3 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are Date Formatting methods in almost every Service class(Copy&amp;amp;Paste with different names)&lt;/li&gt;
&lt;li&gt;There are Domain classes with 58 String properties and setters/getters. Customer class contains homeAddressLine1, homeAddressLine2, homeCity.., officeAddrLine1, officeAddrLine2, officeCity&amp;hellip; There is no Address class.&lt;/li&gt;
&lt;li&gt;In some classes XML to Java marshaling is done using JAXB and in some other classes using XStream and in some other places constructing XML string manually even though there is core utilities module with lots of XML marshaling utility methods.&lt;/li&gt;
&lt;li&gt;In some classes SLF4J Logger is used and in some places Log4J Logger is being used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the list goes on&amp;hellip;&lt;/p&gt;

&lt;p&gt;So what just happend? Where is the problem?&lt;/p&gt;

&lt;p&gt;We started this project by pledging to keep the code clean and highly maintainable/enhanceable. But now it is in worst possible state.&lt;/p&gt;

&lt;blockquote&gt;**_Somehow it is understandable if the code is legacy code and is messy because today&#39;s latest way of doing things becomes tomorrow&#39;s legacy and bad approach like externalizing the application configuration into XML was the way to go sometime back and now it became XML hell with shiny new Annotations. I am pretty sure that in a couple of years we will see &#34;Get Rid of Annotation Hell by Using SomeNew Gr8 Way&#34;. _**&lt;/blockquote&gt;

&lt;p&gt;But in my case it is just 3 months old project.&lt;/p&gt;

&lt;p&gt;When I think about the causes of why that code becomes such a mess I end-up with never-ending list of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tight dead lines&lt;/li&gt;
&lt;li&gt;Incompetent developers&lt;/li&gt;
&lt;li&gt;Not using code quality checking tools&lt;/li&gt;
&lt;li&gt;No code reviews&lt;/li&gt;
&lt;li&gt;No time to clean the messy code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;etc etc&lt;/p&gt;

&lt;p&gt;So whatever the reason your code will become messy after sometime, especially when more number of people are working the project.&lt;/p&gt;

&lt;p&gt;The worst part is you can&amp;rsquo;t blame anyone. Developer will say I have no time to cleanup the code as I have assigned high priority tasks. Tech Lead is busy in analysing and assigning the new tasks to developers.&lt;br /&gt;
Manager is busy in aggregating the team&amp;rsquo;s task status reports to satisfy his boss. Architect is busy in designing the new modules for new third party integration services. QA people are busy in preparing/executing their test cases for upcoming releases.&lt;/p&gt;

&lt;p&gt;So whose responsibility it is to clean the code? Or in other way, How can we keep code clean even with all the above said Busy circumstances?&lt;/p&gt;

&lt;p&gt;Before going to explain How &amp;ldquo;WatchDog &amp;amp; SpotTheBug Approach&amp;rdquo; works let me tell you another story.&lt;/p&gt;

&lt;p&gt;3 years back I worked on a banking project which is well designed, well organised and well written code that I have ever seen so far. That project started almost 10 years back, but still the code quality is very good. How is it possible?&lt;/p&gt;

&lt;blockquote&gt;**_The only reason is If any developer check-in the code with some bad code like adding duplicate utility methods then within 4 hours that developer will recieve an email from a GUY asking for the explanation what is the need to add that method when that utility method is already available in core-utilities module. In case there is no valid reason, that developer has to open a new defect with &#34;Cleaning Bad Code&#34; in the defect title, assign the defect to himself and change the code and should check-in the files ASAP._**&lt;/blockquote&gt;

&lt;p&gt;With this process, every team member in our team used to tripple check the code before checking into repository.&lt;/p&gt;

&lt;p&gt;I think this is best possible way to keep the code clean. By now you may have clue on what I mean by &amp;ldquo;WatchDog&amp;rdquo;. Yes, I called the GUY as WatchDog. First of all, sorry for calling such an important role as Dog but it better describe what that guy will do. It will bark as soon as it saw some bad code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Need for WatchDog:&lt;/strong&gt;&lt;br /&gt;
**&lt;br /&gt;
**As I mentioned above, everyone in the team might be busy with their high-priority tasks. They might not be able to spend time on cleaning the code. Also from the Business perspective Adding new customer-requested features might be high-priority than cleaning the code. Sometime even though Business know that in long run there is a chance that entire application becomes un-maintainable if they don&amp;rsquo;t cleanup the mess they will have to satisfy their customer first with some quick new features and will opt for short-term benefits.&lt;/p&gt;

&lt;p&gt;We have plenty of Quality Checking tools like PMD, FindBugs, Sonar. But does these tools suggest to create an Address class instead of repeating all address properties for different type of addresses as i mentioned above. Does these tools suggest you to use same xml marshalling library across the project. As far as I know, they won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;So if you really want your software/product to sustain over time, I would suggest to hire a dedicated WatchDog(Human Being).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The WatchDog&amp;rsquo;s primary responsibilities would be:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuously checking for the code smells, duplicate methods, coding standards violations and send the report to entire team.&lt;/li&gt;
&lt;li&gt;If possible point out the existing utility to use instead of creating duplicate methods.&lt;/li&gt;
&lt;li&gt;Checking for design violations like establishing Database Connection or Transaction management code in wrong places(web layer for ex).&lt;/li&gt;
&lt;li&gt;Checking for cyclic dependencies for between modules.&lt;/li&gt;
&lt;li&gt;Exploring and suggesting well established, tested generic libraries like apache commons-*.jars, Google Guava instead of writing home grown solutions(I feel like instead of writing home grown Cache Management better to use Guava Cache,but YMMV)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far so good if the WatchDog does its job well. What if the WatchDog itself is inefficient?? What if WatchDog is not Skilled enough to perform its job? Who is going to check whether WatchDog is doing good or not?  Here** &amp;ldquo;SpotTheBug&amp;rdquo;** program comes into picture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;SpotTheBug&amp;rdquo;&lt;/strong&gt;&lt;br /&gt;
I strongly believe in having a friendly culture to encourage the developers to come up with thoughts to better the software.&lt;/p&gt;

&lt;p&gt;Every week each team member should come up with 3 points to better/clean the code. They can be: Bad code Identification, Better Design, New Features etc.&lt;/p&gt;

&lt;p&gt;Instead of just saying that code is bad code, he has to specify why he is feeling that code is bad, how to rewrite it in better way and what would be the impact.&lt;/p&gt;

&lt;p&gt;Based on the effectiveness of the points, value-points should be given to the developer and those points should definitely be considered in performance review(There should be some motivation right :-)).&lt;/p&gt;

&lt;p&gt;With WatchDog and SpotTheBug programs in place, if the team can identify the bad code before the WatchDog caught it then it is going to be a negetive point for WatchDog. If WatchDog continuously getting negative points then it is time to evaluate the effectiveness of WatchDog itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;By using this WatchDog &amp;amp; SpotTheBug approach combined with proper usage of Code Quality Checking Tools(FindBugs, PMD, Sonar) we can make sure the code is clean to the maximum extent.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What additional features do JavaEE6 have to move from Spring?</title>
      <link>http://sivalabs.github.io/post/2012/what-additional-features-do-javaee6-have-to-move-from-spring/</link>
      <pubDate>Mon, 09 Apr 2012 16:52:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/what-additional-features-do-javaee6-have-to-move-from-spring/</guid>
      <description>&lt;p&gt;I am a senior java developer who has to work on the technologies chosen by the application architect.&lt;br /&gt;
At the maximum I can express my opinion on a particular technology, I can&amp;rsquo;t make/influence technology selection decision. So I don&amp;rsquo;t have a choice of moving from Spring to JavaEE6 or from JavaEE6 to Spring on my official projects.&lt;/p&gt;

&lt;p&gt;I strongly believe that as a Java developer I have to keep updated on (at least few) latest technologies.&lt;br /&gt;
So I(many java developers) generally follow java community websites or blogs to have an idea on whats going on in java community. Specifically I do follow updates from some Java Champions or well known popular authors because they might have better vision on what is next big thing in Java space.&lt;/p&gt;

&lt;p&gt;Few years back I have seen so many people talking about Spring. Then I started learning Spring and still I just love it. I have been using JavaEE5 for a couple of years and I didn&amp;rsquo;t find any feature which Spring is not providing. But recently I am seeing so many articles on &amp;ldquo;Moving from Spring to JavaEE6&amp;rdquo; for every couple of days. So I thought of giving it a try, I installed NetBeans7.1, Glassfish3.1 and did a simple POC. Its wonderful, I am able to write a simple app in just 10 min.&lt;br /&gt;
Yes, JavaEE6 improved a lot over it predecessors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But again I am not seeing anything new which I can&amp;rsquo;t do with Spring.&lt;/strong&gt;&lt;br /&gt;
OK, let me share my thoughts on the criteria that is chosen by &amp;ldquo;Moving from Spring to JavaEE6&amp;rdquo; article authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. So many Jars in WEB-INF/lib&lt;/strong&gt;&lt;br /&gt;
Spring application has its dependencies in WEB-INF/lib and JavaEE6 app will have in server lib.&lt;br /&gt;
Even for Spring app, we don&amp;rsquo;t need to go and manually download all those Jars, we can use Maven/Ivy or even we can start with an archetype template with all dependencies configured. And its only onetime Job.&lt;br /&gt;
I am not sure will there be any performance improvement by having jars in server lib instead of WEB-INF/lib. If that is the case we can place Spring app dependencies in server lib.&lt;/p&gt;

&lt;p&gt;What I am missing here?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Type-safe Dependency Injection&lt;/strong&gt;&lt;br /&gt;
From Spring 2.5 we have annotation based DI support using @Autowired and if you are still saying Spring is XML based please take a look at Spring 3.x.&lt;br /&gt;
If you want to give a custom-name to spring bean(in case of multiple implementation for same Interface), you can.&lt;br /&gt;
How is it different from JavaEE6&amp;rsquo;s CDI @Injext and @Named?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Convention Over Configuration&lt;/strong&gt;&lt;br /&gt;
EJB3 methods are transactional by default, just slap it with @Stateless.&lt;br /&gt;
In Spring we can create a custom StereoType, say @TransactionalServe, like&lt;/p&gt;

&lt;p&gt;@Service&lt;br /&gt;
@Transactional&lt;br /&gt;
public @interface TransactionalServe&lt;br /&gt;
{&lt;/p&gt;

&lt;p&gt;}&lt;br /&gt;
and we can achieve Convention Over Configuration.&lt;br /&gt;
Did I miss anything here?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Spring depends on JavaEE&lt;/strong&gt;&lt;br /&gt;
Of course Spring depends on JavaSE and JavaEE. Spring is just making the development easier.&lt;br /&gt;
You can always use JavaEE APIs like JSF, JPA, JavaMail etc with Spring in easier way.&lt;br /&gt;
Did anybody said Spring came to completely vanish JavaEE?? No.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Standards based, App Server Support, License blah blah blah.&lt;/strong&gt;&lt;br /&gt;
These are the things that developers don&amp;rsquo;t have much(any) control.&lt;br /&gt;
From a developer perspective, we love whatever makes development easier.&lt;/p&gt;

&lt;p&gt;So I am not seeing any valid reason to migrate an existing Spring app to JavaEE6. Till now I didn&amp;rsquo;t find one thing which CDI can do and Spring can&amp;rsquo;t do. For green field projects just to have depency injection we might not need Spring as we already have CDI in-built in JavaEE6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does JavaEE6 address any of the following:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1. Batch Processing:&lt;/strong&gt; Almost all the big enterprises have some batch jobs to run. Does JavaEE6 have any support for implementing them.&lt;br /&gt;
Do you suggest to use Spring Batch or start from scratch in vanilla JavaEE6.&lt;br /&gt;
&lt;strong&gt;2. Social Network Integration:&lt;/strong&gt; These days it became very common requirement for web apps to integrate with Social Network sites.&lt;br /&gt;
Again what do you have in JavaEE6 for this?&lt;br /&gt;
&lt;strong&gt;3. Environment Profiles:&lt;/strong&gt; In Spring I can have my mock services enabled in Testing profile and my real services in Production profile.&lt;br /&gt;
I am aware of @Alternative, but can we configure more than 2 Alternatives without using String based injection?&lt;br /&gt;
&lt;strong&gt;4. Web application Security:&lt;/strong&gt; What is Spring-security&amp;rsquo;s counter part in JavaEE6?&lt;br /&gt;
&lt;strong&gt;5.&lt;/strong&gt; What about integration with &lt;strong&gt;NoSQL, Flex, Mobile development&lt;/strong&gt; etc?&lt;/p&gt;

&lt;p&gt;_JavaEE6 got CDI now, so suddenly Spring become legacy!!!! _&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: Yeah JavaEE6 has cool stuff now(lately??) but it is not going to replace Spring anyway. Long live Spring.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>