<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaee on SivaLabs</title>
    <link>https://sivalabs.github.io/categories/javaee/</link>
    <description>Recent content in Javaee on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2015 13:04:00 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/categories/javaee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?
I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club.</description>
    </item>
    
    <item>
      <title>Spring3&#43;JPA2&#43;JavaEE6AppServer = Confusion Over Configuration</title>
      <link>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</link>
      <pubDate>Fri, 12 Oct 2012 05:38:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</guid>
      <description>Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great. This post is not a rant on Spring Vs JavaEE6, but my experience of porting a Spring3+JPA2(Hibernate) application on JBoss AS-7.1 App Server.
My application requirement is very simple: Developing a couple of SOAP based webservices using Spring3.1 and JPA2(Hibernate) and host it on JBoss AS 7.1.
So I started creating a multi-module maven project with one jar module containing the service implementations using Spring &amp;amp; JPA and another war module which exposes those services as SOAP based webservices.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part 3 â€“ Exception Handling</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 05:24:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-2: Spring Integration</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</link>
      <pubDate>Wed, 06 Jun 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy provides support for Spring integration which enables us to expose Spring beans as RESTful WebServices.
Step#1: Configure RESTEasy+Spring dependencies using Maven.
 Step#2: Configure RESTEasy+Spring in web.xml
&amp;lt;web-app xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34; xmlns:web=&#34;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34; xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&#34; id=&#34;WebApp_ID&#34; version=&#34;3.0&#34; &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&amp;lt;/listener-class &amp;lt;/listener &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.spring.SpringContextLoaderListener&amp;lt;/listener-class &amp;lt;/listener &amp;lt;servlet &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;servlet-classorg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&amp;lt;/servlet-class &amp;lt;/servlet &amp;lt;servlet-mapping &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;url-pattern/rest/*&amp;lt;/url-pattern &amp;lt;/servlet-mapping &amp;lt;context-param contextConfigLocation&amp;lt;/param-name classpath:applicationContext.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-1: Basics</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</link>
      <pubDate>Wed, 06 Jun 2012 10:07:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy is a JAX-RS implementation from JBoss/RedHat and is in-built in JBoss 6 onwards.
Here I am going to show you how to develop a Simple RESTful Web Services application using RESTEasy and JBossAS7.1.1.FINAL.
Step#1: Configure RESTEasy dependencies using Maven.
 Step#2: Configure RESTEasy in web.xml
 Step#3: Create User domain class, MockUserTable class to store User objects in-memory for testing purpose and UserResource class to expose CRUD operations on User as RESTful webservices.</description>
    </item>
    
    <item>
      <title>JAX-WS WSI Authentication using UserName &amp; Password Security Headers</title>
      <link>https://sivalabs.github.io/2012/04/jax-ws-wsi-authentication-using-username-password-security-headers/</link>
      <pubDate>Mon, 30 Apr 2012 00:21:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/jax-ws-wsi-authentication-using-username-password-security-headers/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>What additional features do JavaEE6 have to move from Spring?</title>
      <link>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</link>
      <pubDate>Mon, 09 Apr 2012 16:52:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</guid>
      <description>I am a senior java developer who has to work on the technologies chosen by the application architect.
At the maximum I can express my opinion on a particular technology, I can&amp;#8217;t make/influence technology selection decision. So I don&amp;#8217;t have a choice of moving from Spring to JavaEE6 or from JavaEE6 to Spring on my official projects.
I strongly believe that as a Java developer I have to keep updated on (at least few) latest technologies.</description>
    </item>
    
    <item>
      <title>PrimeFaces3 Tutorial : Form Validation Using BeanValidation API(JSR-303)</title>
      <link>https://sivalabs.github.io/2012/02/primefaces3-tutorial-form-validation-using-beanvalidation-apijsr-303/</link>
      <pubDate>Wed, 01 Feb 2012 23:10:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/02/primefaces3-tutorial-form-validation-using-beanvalidation-apijsr-303/</guid>
      <description>JSF2 has in-built support for form validations using Bean Validation API(JSR-303).
In my previous article PrimeFaces 3 Tutorial : Introduction &amp;amp; Form Validation , I have explained how to validate forms using JSF tags inside JSF xhtml pages.
Now Let us see how we can validate the forms using HibernateValidator which is reference implementation of JSR-303.
Note: Integrating JSR-303 with JSF2 doesn&amp;#8217;t have anything to do with PrimeFaces 3.
But I am planning to write a series of articles on PrimeFaces and JSR-303 integration is a part of it.</description>
    </item>
    
    <item>
      <title>PrimeFaces 3 Tutorial : Introduction &amp; Form Validation</title>
      <link>https://sivalabs.github.io/2012/01/primefaces-3-tutorial-introduction-form-validation/</link>
      <pubDate>Mon, 30 Jan 2012 21:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/01/primefaces-3-tutorial-introduction-form-validation/</guid>
      <description>PrimeFaces is a component library for JSF and has huge component support.
Working with PrimeFaces is very much easy because there is a single jar, no mandatory other dependencies, no mandatory configuration is required.
Ok, in this tutorial I am going to explain how to create a Maven based PrimeFaces project and create a simple registration for and validate the form.
I am using JDK1.6.26 and Tomcat 7.0.32.
Step#1
Create Maven Project and add the following repositories, dependencies in pom.</description>
    </item>
    
    <item>
      <title>Solution for JDK6 &#43; JBoss-5.1.0GA &#43; JAX-WS integration error: java.lang.UnsupportedOperationException: setProperty must be overridden by all subclasses of SOAPMessage</title>
      <link>https://sivalabs.github.io/2011/12/solution-for-jdk6-jboss-510ga-jax-ws/</link>
      <pubDate>Sat, 03 Dec 2011 21:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/12/solution-for-jdk6-jboss-510ga-jax-ws/</guid>
      <description> &amp;nbsp; &amp;nbsp; Copy the following jars from JBOSS_HOME/client to JBOSS_HOME/lib/endorsed dir.
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a. &amp;nbsp; &amp;nbsp; jbossws-native-jaxrpc.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;b. &amp;nbsp; &amp;nbsp; jbossws-native-jaxws.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;c. &amp;nbsp; &amp;nbsp; jbossws-native-jaxws-ext.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;d. &amp;nbsp; &amp;nbsp; jbossws-native-saaj.jar
 &amp;nbsp; &amp;nbsp; Delete saaj-impl.jar(if its already there) from JBOSS_HOME/lib/endorsed dir.
  </description>
    </item>
    
    <item>
      <title>Developing WebServices using JDK6/JAX-WS is simple. Is it true?</title>
      <link>https://sivalabs.github.io/2011/10/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</link>
      <pubDate>Mon, 03 Oct 2011 01:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/10/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</guid>
      <description>In many articles, blogs we can see how to develop WebServices using with JDK6&amp;#8217;s JAX-WS in-built support in just 5 minutes.
We can simply write a POJO and annotate it with @WebService, publish it with Endpoint.publish(&amp;#8230;) and you can see the generated wsdl by pointing your browser to http://localhost:8080/JAXWS/helloService?wsdl.
Immediately we can write a client and call helloPort.sayHello(&amp;#8220;siva&amp;#8221;) and you will get &amp;#8220;Hello Siva!!!&amp;#8221; response from your HelloWebService.
In the first look it feels like developing web services is very simple using JDK6&amp;#8217;s in-built JAX-WS support.</description>
    </item>
    
    <item>
      <title>Deploying JAX-WS WebService on Tomcat-6</title>
      <link>https://sivalabs.github.io/2011/09/deploying-jax-ws-webservice-on-tomcat-6/</link>
      <pubDate>Fri, 30 Sep 2011 02:54:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/09/deploying-jax-ws-webservice-on-tomcat-6/</guid>
      <description>Now we are going to see how to deploy JAX-WS WebService on Tomcat Server.
We are going to deploy The AuthenticationService developed in http://sivalabs.blogspot.com/2011/09/developing-webservices-using-jax-ws.html on apache-tomcat-6.0.32.
To deploy our AuthenticationService we need to add the following configuration.
1.web.xml
&amp;lt;web-app&amp;gt;
&amp;lt;listener&amp;gt;
&amp;lt;listener-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServlet&amp;lt;/servlet-class&amp;gt;
&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
&amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/services/AuthenticationService&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;  2. Create a new file WEB-INF/sun-jax-ws.xml
&amp;lt;?xml&amp;nbsp;version=&#34;1.0&#34;&amp;nbsp;encoding=&#34;UTF-8&#34;?&amp;gt;
&amp;lt;endpoints
&amp;nbsp;&amp;nbsp;xmlns=&#34;http://java.sun.com/xml/ns/jax-ws/ri/runtime&#34;
&amp;nbsp;&amp;nbsp;version=&#34;2.0&#34;&amp;gt;
&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;lt;endpoint
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name=&#34;AuthenticationService&#34;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation=&#34;com.sivalabs.caas.services.AuthenticationServiceImpl&#34;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;url-pattern=&#34;/services/AuthenticationService&#34;/&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;lt;/endpoints&amp;gt;</description>
    </item>
    
    <item>
      <title>Developing WebServices using JAX-WS</title>
      <link>https://sivalabs.github.io/2011/09/developing-webservices-using-jax-ws/</link>
      <pubDate>Thu, 29 Sep 2011 12:25:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/09/developing-webservices-using-jax-ws/</guid>
      <description>Let us assume an enterprise is maintaining user authentication details in a centralized system. We need to create an AuthenticationService which will take credentials, validate them and return the status. The rest of the applications will use the AuthenticationService to authenticate the Users.
Create AuthenticationService interface as follows:
package com.sivalabs.caas.services;
import javax.jws.WebService;
import com.sivalabs.caas.domain.AuthenticationStatus;
import com.sivalabs.caas.domain.Credentials;
import com.sivalabs.caas.exceptions.AuthenticationServiceException;
@WebService
public interface AuthenticationService
{
public AuthenticationStatus authenticate(Credentials credentials) throws AuthenticationServiceException;
}</description>
    </item>
    
    <item>
      <title>CustomTag to generate  and  tags with absolute path</title>
      <link>https://sivalabs.github.io/2011/08/customtag-to-generate-and-tags-with-absolute-path/</link>
      <pubDate>Thu, 25 Aug 2011 01:13:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/08/customtag-to-generate-and-tags-with-absolute-path/</guid>
      <description>Generally we write our javascript and css styles in separate file and include them in JSPs using  and  tags.
To include those resource we can use either relative URL or absolute URL.
If you use absolute URL you need to include the context root name which is not a good practice.
Later if you want to change the context root name you need to update in several places.</description>
    </item>
    
    <item>
      <title>When to use RequestDispatcher.forward() and response.sendRedirect()?</title>
      <link>https://sivalabs.github.io/2011/08/when-to-use-requestdispatcherforward/</link>
      <pubDate>Thu, 25 Aug 2011 00:35:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/08/when-to-use-requestdispatcherforward/</guid>
      <description>Many people know about how RequestDispatcher.forward() and response.sendRedirect() works.
RequestDispatcher.forward() is generally called Server side redirection and is used to forward to a resource within the same application. That resource could be a JSP or another Servlet.
response.sendRedirect() is generally called as Client side redirection as it issues a new request from the browser. This method is used to redirect to another resource within the same application or to the resource in some other application running in the same web container or can redirect to any other resource running in someother web container.</description>
    </item>
    
    <item>
      <title>PrimeFaces QuickStart Tutorial-Part1</title>
      <link>https://sivalabs.github.io/2011/02/primefaces-quickstart-tutorial-part1/</link>
      <pubDate>Tue, 01 Feb 2011 19:57:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/02/primefaces-quickstart-tutorial-part1/</guid>
      <description>PrimeFaces is an open source component library for JSF 2.0 with morethan 100 rich components. PrimeFaces is far better than many other JSF component libraries because of the following reasons:
&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. Rich set of UI components (DataTable, AutoComplete, HtmlEditor, Charts etc).
&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. No extra xml configuration is required and there is no required dependencies.
&amp;nbsp;&amp;nbsp;&amp;nbsp; 3. Built-in Ajax based on standard JSF 2.0 Ajax APIs.
&amp;nbsp;&amp;nbsp;&amp;nbsp; 4. Skinning Framework with 25+ built-in themes.</description>
    </item>
    
    <item>
      <title>Struts1 Vs Struts2 Vs JSF Vs SpringMVC</title>
      <link>https://sivalabs.github.io/2008/12/struts1-vs-struts2-vs-jsf-vs-springmvc/</link>
      <pubDate>Sat, 27 Dec 2008 22:51:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2008/12/struts1-vs-struts2-vs-jsf-vs-springmvc/</guid>
      <description>Hi,
Recently I have done some research on J2EE Web frameworks usability and features to decide the framework to be used for one of my new projects.
I consider Struts 1, Struts2, JSF and Spring MVC. After spending some hours on going through each of the frameworks features and some more hours to do a simple application(Proof Of Concept).
In this process i was excited looking at some of the features, become a fan of one of the frameworks, felt home sick to leave my all time favourite framework and irritated with some of the frameworks.</description>
    </item>
    
  </channel>
</rss>