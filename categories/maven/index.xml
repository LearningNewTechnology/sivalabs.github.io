<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/maven/</link>
    <description>Recent content in Maven on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Oct 2012 12:18:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/maven/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A bunch of Maven Archetypes for Spring based Projects</title>
      <link>http://sivalabs.github.io/post/2012/a-bunch-of-maven-archetypes-for-spring-based-projects/</link>
      <pubDate>Mon, 29 Oct 2012 12:18:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/a-bunch-of-maven-archetypes-for-spring-based-projects/</guid>
      <description>&lt;p&gt;Maven is a good project management tool which greatly reduces the amount of time we spend on creating java projects with proper structure. With so many predefined maven archetypes it is even easier to create projects by simply selecting the archetype based on the technologies we need and type(jar/war/ear) of project we want to create.&lt;/p&gt;

&lt;p&gt;However sometimes those predefined archetypes structure may not suite well for our needs or we may need some more additions to the pre-configured dependencies/frameworks etc.&lt;/p&gt;

&lt;p&gt;Also in Eclipse the default java compiler level is 1.5 and configuring it to 1.6 every time is frustrating.&lt;br /&gt;
So I thought of creating some custom archetypes for the most common combination of technologies/frameworks that I frequently use.&lt;/p&gt;

&lt;p&gt;Yes, I am aware of **AppFuse **which provides lot more maven archetypes. But the structure I follow is a bit different, so I thought of creating archetypes which suites my needs/style :-)&lt;/p&gt;

&lt;p&gt;Most of my projects are Spring based applications, so I have created the following templates so far:&lt;/p&gt;

&lt;p&gt;**1. Quickstart Java App : **&lt;br /&gt;
A Simple Java Application with JDK 1.6, SLF4J(Logback/Log4J) and failsafe plugin configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Quickstart Web App:&lt;/strong&gt;&lt;br /&gt;
A Simple Web Application with JDK 1.6, Servlet 2.5, SLF4J(Logback/Log4J) and failsafe plugin configuration.&lt;/p&gt;

&lt;p&gt;**3. Quickstart Spring App: **&lt;br /&gt;
A Java project with Spring 3.1.x, MySQL, JdbcTemplate and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;**4. Quickstart SpringMVC App: **&lt;br /&gt;
A Web project with SpringMVC 3.1.x,MySQL, JdbcTemplate, jQuery and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;**5. Quickstart SpringMVC-Tiles-SpringSecurity App: **&lt;br /&gt;
A Web project with SpringMVC 3.1.x, Apache Tiles, SpringSecurity 3.1.x, jQuery and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;**6. Quickstart SpringMVC-SiteMesh-SpringSecurity App: **&lt;br /&gt;
A Web project with SpringMVC 3.1.x, SiteMesh 2.x, SpringSecurity 3.1.x, jQuery and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Quickstart SpringMVC-JPA2(Hibernate) App:&lt;/strong&gt;&lt;br /&gt;
A Web project with SpringMVC 3.1.x, JPA2(Hibernate4.x), SpringDataJPA, Apache Tiles, jQuery, SpringSecurity and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Quickstart SpringMVC-MyBatis App:&lt;/strong&gt;&lt;br /&gt;
A Web project with SpringMVC 3.1.x, MyBatis, jQuery and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Quickstart Spring-JSF2(PrimeFaces)-JPA2(Hibernate) App:&lt;/strong&gt;&lt;br /&gt;
A Web project with Spring 3.1.x, JSF2(PrimeFaces), JPA2(Hibernate),SpringDataJPA and Log4j/Logback configuration.&lt;/p&gt;

&lt;p&gt;These are the archetypes so far I have completed and uploaded them onto my GitHub repository &lt;a href=&#34;https://github.com/sivaprasadreddy/maven-archetype-templates&#34;&gt;https://github.com/sivaprasadreddy/maven-archetype-templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have mentioned how to install them in your local repository in README file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I am planning for writing some more template archetypes including SpringRESTFul Services, Spring-ApacheCXF App, Spring Integration, Spring-JavaEE6 etc.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Stay tuned :-)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part 3 - Exception Handling</title>
      <link>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 10:54:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&lt;p&gt;RESTEasy Tutorial Series&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-1-basics.html&#34;&gt;RESTEasy Tutorial Part-1: Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-2-spring.html&#34;&gt;RESTEasy Tutorial Part-2: Spring Integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-3-exception.html&#34;&gt;RESTEasy Tutorial Part 3 - Exception Handling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.&lt;/p&gt;

&lt;p&gt;But putting try-catch-finally blocks all around the code is not a good practice. We should design/code in such a way that if there is any unrecoverable error occured then the code should throw that exception and there should an exception handler to catch those exceptions and extract the error details and give a proper error response to the client with all the error details.&lt;/p&gt;

&lt;p&gt;RESTEasy provides such ExceptionHandler mechanism which simplifies the ExceptionHandling process.&lt;/p&gt;

&lt;p&gt;In this part I will show you how we can use RESTEasy&amp;rsquo;s ExceptionHandlers to handle Exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1: Create Application Specific Exceptions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916667&#34;&gt;https://gist.github.com/sivaprasadreddy/2916667&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#2: Create ExceptionHandlers by implementing ExceptionMapper interface.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916671&#34;&gt;https://gist.github.com/sivaprasadreddy/2916671&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#3: Update UserResource.getUserXMLById() method to validate user input and throw respective exceptions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916676&#34;&gt;https://gist.github.com/sivaprasadreddy/2916676&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;**Step#4: Test the UserResource.getUserXMLById() service method by issueing following requests. **&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916687&#34;&gt;https://gist.github.com/sivaprasadreddy/2916687&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;**
**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important things to note:&lt;/strong&gt;
As Spring is creating the necessary objects we should let Spring know about @Provider classes to get them registered with RESTEasy. We can do this in two ways.&lt;/p&gt;

&lt;p&gt;a)Annotate Provider classes with @Component&lt;/p&gt;

&lt;p&gt;b)Using component-scan&amp;rsquo;s include-filter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;context:component-scan base-package=&#34;com.sivalabs.springdemo&#34;&gt;&lt;/strong&gt;
&lt;strong&gt;         &lt;context:include-filter expression=&#34;javax.ws.rs.ext.Provider&#34; type=&#34;annotation&#34;/&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;a href=&#34;http://sivalabs.github.io/context:component-scan&#34;&gt;/context:component-scan&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-1: Basics</title>
      <link>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-1-basics/</link>
      <pubDate>Wed, 06 Jun 2012 15:37:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-1-basics/</guid>
      <description>&lt;p&gt;RESTEasy Tutorial Series&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-1-basics.html&#34;&gt;RESTEasy Tutorial Part-1: Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-2-spring.html&#34;&gt;RESTEasy Tutorial Part-2: Spring Integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-3-exception.html&#34;&gt;RESTEasy Tutorial Part 3 - Exception Handling&lt;/a&gt;
RESTEasy is a JAX-RS implementation from JBoss/RedHat and is in-built in JBoss 6 onwards.
Here I am going to show you how to develop a Simple RESTful Web Services application using RESTEasy and JBossAS7.1.1.FINAL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1: Configure RESTEasy dependencies using Maven.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882384&#34;&gt;https://gist.github.com/sivaprasadreddy/2882384&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#2: Configure RESTEasy in web.xml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882393&#34;&gt;https://gist.github.com/sivaprasadreddy/2882393&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#3: Create User domain class, MockUserTable class to store User objects in-memory for testing purpose and UserResource class to expose CRUD operations on User as RESTful webservices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882408&#34;&gt;https://gist.github.com/sivaprasadreddy/2882408&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#6: JUnit TestCase to test the REST Webservice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882422&#34;&gt;https://gist.github.com/sivaprasadreddy/2882422&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#7: To test the REST service we can use the REST Client Tool. &lt;/strong&gt;
You can download REST Client Tool at &lt;a href=&#34;http://code.google.com/a/eclipselabs.org/p/restclient-tool/&#34;&gt;http://code.google.com/a/eclipselabs.org/p/restclient-tool/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Things to Keep in mind:&lt;/strong&gt;
1. org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap Listener should be registered before any other listener.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should configure &lt;strong&gt;resteasy.servlet.mapping.prefix&lt;/strong&gt; &lt;context-param&gt; if the HttpServletDispatcher servlet url-pattern is anything other than &lt;strong&gt;/&lt;/strong&gt;*
**
**&lt;/li&gt;
&lt;li&gt;Keep visiting my blog :-)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Unable to create a maven project using appfuse archetypes?</title>
      <link>http://sivalabs.github.io/post/2011/unable-to-create-maven-project-using/</link>
      <pubDate>Sun, 04 Dec 2011 02:59:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/unable-to-create-maven-project-using/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t know why sometimes when i tried to create a Maven project using one of appfuse archetypes, eclipse throws error saying unable to create maven project.&lt;/p&gt;

&lt;p&gt;I resolved it by doing following:&lt;/p&gt;

&lt;p&gt;Window&amp;ndash;&amp;gt;Preferences&amp;ndash;&amp;gt;Maven&amp;ndash;&amp;gt;Archetypes&lt;br /&gt;
Add Remote Catalog : &lt;a href=&#34;http://repo1.maven.org/maven2/archetype-catalog.xml&#34;&gt;http://repo1.maven.org/maven2/archetype-catalog.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I am able to create maven projects using Appfuse archetypes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solution for &#34;Eclipse is running in a JRE, but a JDK is required&#34; problem</title>
      <link>http://sivalabs.github.io/post/2011/solution-for-eclipse-is-running-in-jre/</link>
      <pubDate>Mon, 21 Feb 2011 06:44:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/solution-for-eclipse-is-running-in-jre/</guid>
      <description>&lt;p&gt;Hi,
When i installed Maven2 Plugin for eclipse i was getting the below error message when i startup my Eclipse IDE.
After that when I tried to perform Maven operations thrugh Eclipse I got some errors saying &amp;ldquo;&amp;hellip;/tools.jar&amp;rdquo; is not there.&lt;/p&gt;

&lt;p&gt;I did the below things to get rid of that problem.&lt;/p&gt;

&lt;p&gt;open the eclipse.ini file and add the below argument.
-vm
C:/Siva/Java/jdk1.6.0_04/bin/javaw.exe&lt;/p&gt;

&lt;p&gt;Note: The VM configuration should be in two lines and in between &amp;ndash;lancher and -vmargs.
&amp;ndash;launcher.XXMaxPermSize
256m
-vm
C:/Siva/Java/jdk1.6.0_04/bin/javaw.exe
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Xms40m
-Xmx512m&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>