<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Best Practices on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/best-practices/</link>
    <description>Recent content in Best Practices on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2013 06:23:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/best-practices/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Clean Code: Don&#39;t mix different levels of abstractions</title>
      <link>http://sivalabs.github.io/post/2013/clean-code-dont-mix-different-levels-of-abstractions/</link>
      <pubDate>Sun, 29 Dec 2013 06:23:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2013/clean-code-dont-mix-different-levels-of-abstractions/</guid>
      <description>&lt;p&gt;We spend more time on reading code than writing. So if the code is more readable then obviously it will increase the developer productivity.&lt;/p&gt;

&lt;p&gt;Many people associate readability of code with coding conventions like following standard naming conventions, closing file, DB resources etc etc. When it comes to code reviews most of the people focus on these trivial things only, like checking for naming convention violations, properly releasing resources in finally block or not.&lt;/p&gt;

&lt;p&gt;Do we need &amp;ldquo;Senior Resources&amp;rdquo; in team (I hate to call a human being as a Resource) to do these things?Tools like Findbugs, PMD, Checkstyle, Sonar can do that for you. I agree that following a standard naming convention by all the team members is a good thing. But that doesn&amp;rsquo;t increase the readability of code.&lt;/p&gt;

&lt;p&gt;Let us take a simple example. I would like to implement Fund Transfer usecase and following are the rules to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Source and target accounts should be valid accounts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check whether source account has sufficient amount&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check whether source account has provision for Overdraft and check whether this transaction exceeds the overdraft limit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check for duplicate transaction with last transaction. If source, target accounts and amount is same with last transaction consider it as a duplicate transaction&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If everything is fine then transfer amount to target account&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assume we have the following implementation for the above usecase:&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/8167981&#34;&gt;https://gist.github.com/sivaprasadreddy/8167981&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;The above code is readable..right??&amp;hellip;because:
1. We have followed naming conventions like camel casing variable names
2. We have all the open braces ({) on the method definition line
3. We have closed DB Connection in finally block
4. we have logged exception instead of using System.err.println()
and most important, it is working as expected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;So is it readable and clean code?? In my opinion absolutely not. There are many issues in the above code from readability perspective.&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&lt;strong&gt;1. Mixing DB interaction code with business logic&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&lt;strong&gt;2. Throwing IllegalArgumentException, RuntimeException etc from business methods instead of Business specific exceptions&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&lt;strong&gt;3. Most importantly, the code is mixed with different levels of abstractions.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let me explain what I mean by different levels of abstractions.&lt;/p&gt;

&lt;p&gt;Firstly, from business perspective fund transfer means validating source/target accounts, checking for sufficient balance, checking for overdraft limit, checking for duplicate transaction and making the fund transfer.&lt;/p&gt;

&lt;p&gt;From technical point of view there are various tasks like fetching Account details from DB, performing all the business related checks, throwing Exceptions if there are any violations, properly closing the resources etc.&lt;/p&gt;

&lt;p&gt;But in the above code everything is mixed together.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While reading the code you start looking at JDBC code and your brain is working in Technical mode and after getting Account object from ResultSet you are checking for null and throwing Exception if it is null which is Business requirement. So immediately you need to switch your mind to Business mode and think &amp;ldquo;OK, if the account is invalid we want to abort the operation immediately&amp;rdquo;.&lt;/em&gt;
_
_&lt;em&gt;Though you managed to switch between Technical and Business modes, what about making an enhancement to one perticular subtask like &amp;ldquo;Fund transfer is considred duplicate only if it matches with the last transaction that happened with in an hour only&amp;rdquo;. To make that enhancement you have to go through the entire method because you haven&amp;rsquo;t modularised your sub-tasks and there is no separation of concerns.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets rewrite the above method as follows:&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/8167990&#34;&gt;https://gist.github.com/sivaprasadreddy/8167990&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;The above improved method do exactly what the initial verson is doing but now it looks lot better than earlier version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We have divided the entire task into sub-tasks and implemented each sub-task in a separate method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We have delegated DB interactions to DAOs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We are throwing Business specific Exceptions instead of Java language Exceptions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;All in all we have separated the levels of abstractions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;At the first level we have highest level of abstraction in transferFunds(FundTransferTxn txn) method. By looking at this method we can understand what we are doing as part of Fund Transfer operation without worrying much about implementation or technical details.&lt;/em&gt;
_
_&lt;em&gt;At the second level we have business logic implementation methods checkForOverdraft, checkForDuplicateTransaction etc which performs business logic, again without worrying much about technical details.&lt;/em&gt;
_
_&lt;em&gt;At the lowest level we have technical implementation details in AccountDAO and TransactionDAO which contains DB interaction logic.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the reader(future developer/maintainer) of your code can easily understand what you are doing at the high level and can dig into method which he is interested in.&lt;/p&gt;

&lt;p&gt;As I said earlier, if we have to make the change to consider the transaction as a duplicate transaction only if it happened with in an hour, we can easily understand that checkForDuplicateTransaction() is the one we have to look into and make change.&lt;/p&gt;

&lt;p&gt;Happy coding!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep The Code Clean: WatchDog &amp; SpotTheBug Approach</title>
      <link>http://sivalabs.github.io/post/2012/keep-code-clean-watchdog-spotthebug/</link>
      <pubDate>Tue, 28 Aug 2012 10:25:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/keep-code-clean-watchdog-spotthebug/</guid>
      <description>&lt;p&gt;Before going to discuss &amp;ldquo;&lt;strong&gt;WatchDog &amp;amp; SpotTheBug Approach&lt;/strong&gt;&amp;rdquo;, let me give a brief context on what is the needs for this.&lt;/p&gt;

&lt;p&gt;Three months back I was asked to write core infrastructure code for our new application which uses all the latest and greatest technologies.&lt;br /&gt;
I have written the infrastructure code and implemented 2 usecases to demonstrate which logic should go into which layer and the code looks good(atleast to me :-)). Then I moved on to my main project and I was hearing that the project that i designed(from Now on-wards I will refer this as ProjectA) is going well.&lt;/p&gt;

&lt;p&gt;After 3 months last week one of the developer of ProjectA came to me to help him in resolving some JAXB Marshalling issue. Then I imported the latest code into eclipse and started looking into the issue and I was literally shocked by looking at the messy code. First I resolved that issue and started looking into whole code and I was speechless. How come the code become such a mess in this short span of time, it is just 3 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are Date Formatting methods in almost every Service class(Copy&amp;amp;Paste with different names)&lt;/li&gt;
&lt;li&gt;There are Domain classes with 58 String properties and setters/getters. Customer class contains homeAddressLine1, homeAddressLine2, homeCity.., officeAddrLine1, officeAddrLine2, officeCity&amp;hellip; There is no Address class.&lt;/li&gt;
&lt;li&gt;In some classes XML to Java marshaling is done using JAXB and in some other classes using XStream and in some other places constructing XML string manually even though there is core utilities module with lots of XML marshaling utility methods.&lt;/li&gt;
&lt;li&gt;In some classes SLF4J Logger is used and in some places Log4J Logger is being used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the list goes on&amp;hellip;&lt;/p&gt;

&lt;p&gt;So what just happend? Where is the problem?&lt;/p&gt;

&lt;p&gt;We started this project by pledging to keep the code clean and highly maintainable/enhanceable. But now it is in worst possible state.&lt;/p&gt;

&lt;blockquote&gt;**_Somehow it is understandable if the code is legacy code and is messy because today&#39;s latest way of doing things becomes tomorrow&#39;s legacy and bad approach like externalizing the application configuration into XML was the way to go sometime back and now it became XML hell with shiny new Annotations. I am pretty sure that in a couple of years we will see &#34;Get Rid of Annotation Hell by Using SomeNew Gr8 Way&#34;. _**&lt;/blockquote&gt;

&lt;p&gt;But in my case it is just 3 months old project.&lt;/p&gt;

&lt;p&gt;When I think about the causes of why that code becomes such a mess I end-up with never-ending list of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tight dead lines&lt;/li&gt;
&lt;li&gt;Incompetent developers&lt;/li&gt;
&lt;li&gt;Not using code quality checking tools&lt;/li&gt;
&lt;li&gt;No code reviews&lt;/li&gt;
&lt;li&gt;No time to clean the messy code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;etc etc&lt;/p&gt;

&lt;p&gt;So whatever the reason your code will become messy after sometime, especially when more number of people are working the project.&lt;/p&gt;

&lt;p&gt;The worst part is you can&amp;rsquo;t blame anyone. Developer will say I have no time to cleanup the code as I have assigned high priority tasks. Tech Lead is busy in analysing and assigning the new tasks to developers.&lt;br /&gt;
Manager is busy in aggregating the team&amp;rsquo;s task status reports to satisfy his boss. Architect is busy in designing the new modules for new third party integration services. QA people are busy in preparing/executing their test cases for upcoming releases.&lt;/p&gt;

&lt;p&gt;So whose responsibility it is to clean the code? Or in other way, How can we keep code clean even with all the above said Busy circumstances?&lt;/p&gt;

&lt;p&gt;Before going to explain How &amp;ldquo;WatchDog &amp;amp; SpotTheBug Approach&amp;rdquo; works let me tell you another story.&lt;/p&gt;

&lt;p&gt;3 years back I worked on a banking project which is well designed, well organised and well written code that I have ever seen so far. That project started almost 10 years back, but still the code quality is very good. How is it possible?&lt;/p&gt;

&lt;blockquote&gt;**_The only reason is If any developer check-in the code with some bad code like adding duplicate utility methods then within 4 hours that developer will recieve an email from a GUY asking for the explanation what is the need to add that method when that utility method is already available in core-utilities module. In case there is no valid reason, that developer has to open a new defect with &#34;Cleaning Bad Code&#34; in the defect title, assign the defect to himself and change the code and should check-in the files ASAP._**&lt;/blockquote&gt;

&lt;p&gt;With this process, every team member in our team used to tripple check the code before checking into repository.&lt;/p&gt;

&lt;p&gt;I think this is best possible way to keep the code clean. By now you may have clue on what I mean by &amp;ldquo;WatchDog&amp;rdquo;. Yes, I called the GUY as WatchDog. First of all, sorry for calling such an important role as Dog but it better describe what that guy will do. It will bark as soon as it saw some bad code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Need for WatchDog:&lt;/strong&gt;&lt;br /&gt;
**&lt;br /&gt;
**As I mentioned above, everyone in the team might be busy with their high-priority tasks. They might not be able to spend time on cleaning the code. Also from the Business perspective Adding new customer-requested features might be high-priority than cleaning the code. Sometime even though Business know that in long run there is a chance that entire application becomes un-maintainable if they don&amp;rsquo;t cleanup the mess they will have to satisfy their customer first with some quick new features and will opt for short-term benefits.&lt;/p&gt;

&lt;p&gt;We have plenty of Quality Checking tools like PMD, FindBugs, Sonar. But does these tools suggest to create an Address class instead of repeating all address properties for different type of addresses as i mentioned above. Does these tools suggest you to use same xml marshalling library across the project. As far as I know, they won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;So if you really want your software/product to sustain over time, I would suggest to hire a dedicated WatchDog(Human Being).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The WatchDog&amp;rsquo;s primary responsibilities would be:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuously checking for the code smells, duplicate methods, coding standards violations and send the report to entire team.&lt;/li&gt;
&lt;li&gt;If possible point out the existing utility to use instead of creating duplicate methods.&lt;/li&gt;
&lt;li&gt;Checking for design violations like establishing Database Connection or Transaction management code in wrong places(web layer for ex).&lt;/li&gt;
&lt;li&gt;Checking for cyclic dependencies for between modules.&lt;/li&gt;
&lt;li&gt;Exploring and suggesting well established, tested generic libraries like apache commons-*.jars, Google Guava instead of writing home grown solutions(I feel like instead of writing home grown Cache Management better to use Guava Cache,but YMMV)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far so good if the WatchDog does its job well. What if the WatchDog itself is inefficient?? What if WatchDog is not Skilled enough to perform its job? Who is going to check whether WatchDog is doing good or not?  Here** &amp;ldquo;SpotTheBug&amp;rdquo;** program comes into picture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;SpotTheBug&amp;rdquo;&lt;/strong&gt;&lt;br /&gt;
I strongly believe in having a friendly culture to encourage the developers to come up with thoughts to better the software.&lt;/p&gt;

&lt;p&gt;Every week each team member should come up with 3 points to better/clean the code. They can be: Bad code Identification, Better Design, New Features etc.&lt;/p&gt;

&lt;p&gt;Instead of just saying that code is bad code, he has to specify why he is feeling that code is bad, how to rewrite it in better way and what would be the impact.&lt;/p&gt;

&lt;p&gt;Based on the effectiveness of the points, value-points should be given to the developer and those points should definitely be considered in performance review(There should be some motivation right :-)).&lt;/p&gt;

&lt;p&gt;With WatchDog and SpotTheBug programs in place, if the team can identify the bad code before the WatchDog caught it then it is going to be a negetive point for WatchDog. If WatchDog continuously getting negative points then it is time to evaluate the effectiveness of WatchDog itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;By using this WatchDog &amp;amp; SpotTheBug approach combined with proper usage of Code Quality Checking Tools(FindBugs, PMD, Sonar) we can make sure the code is clean to the maximum extent.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I explained Dependency Injection to My Team</title>
      <link>http://sivalabs.github.io/post/2012/how-i-explained-dependency-injection-to-my-team/</link>
      <pubDate>Tue, 19 Jun 2012 07:50:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/how-i-explained-dependency-injection-to-my-team/</guid>
      <description>&lt;p&gt;Recently our company started developing a new java based web application and after some evaluation process we decided to use Spring.&lt;/p&gt;

&lt;p&gt;But many of the team members are not aware of Spring and Dependency Injection principles.&lt;br /&gt;
So I was asked to give a crash course on what is Dependency Injection and basics on Spring.&lt;/p&gt;

&lt;p&gt;Instead of telling all the theory about IOC/DI I thought of explaining with an example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirement:&lt;/strong&gt; We will get some Customer Address and we need to validate the address.&lt;br /&gt;
After some evaluation we thought of using Google Address Validation Service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legacy(Bad) Approach:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just create an AddressVerificationService class and implement the logic.&lt;/p&gt;

&lt;p&gt;Assume GoogleAddressVerificationService is a service provided by Google which takes Address as a String and Return longitude/latitude.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AddressVerificationService &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   public String validateAddress(String address)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; GoogleAddressVerificationService gavs = new GoogleAddressVerificationService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String result = gavs.validateAddress(address);  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return result;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Issues with this approach: **&lt;br /&gt;
1. If you want to change your Address Verification Service Provider you need to change the logic.&lt;br /&gt;
2. You can&amp;rsquo;t Unit Test with some Dummy AddressVerificationService (Using Mock Objects)&lt;/p&gt;

&lt;p&gt;Due to some reason Client ask us to support multiple AddressVerificationService Providers and we need to determine which service to use at runtime.&lt;/p&gt;

&lt;p&gt;To accomidate this you may thought of changing the above class as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AddressVerificationService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;//This method validates the given address and return longitude/latitude details.&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String validateAddress(String address)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String result = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int serviceCode = 2; // read this code value from a config file&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(serviceCode == 1)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   GoogleAddressVerificationService googleAVS = new GoogleAddressVerificationService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   result = googleAVS.validateAddress(address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  } else if(serviceCode == 2)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   YahooAddressVerificationService yahooAVS = new YahooAddressVerificationService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   result = yahooAVS.validateAddress(address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return result;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Issues with this approach: **&lt;br /&gt;
**&lt;br /&gt;
**&lt;br /&gt;
1. Whenever you need to support a new Service Provider you need to add/change logic using if-else-if.&lt;br /&gt;
2. You can&amp;rsquo;t Unit Test with some Dummy AddressVerificationService (Using Mock Objects)&lt;/p&gt;

&lt;p&gt;** IOC/DI Approach: **&lt;/p&gt;

&lt;p&gt;In the above approaches AddressVerificationService is taking the control of creating its dependencies.&lt;br /&gt;
So whenever there is a change in its dependencies the AddressVerificationService will change.&lt;/p&gt;

&lt;p&gt;Now let us rewrite the AddressVerificationService using IOC/DI pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; class AddressVerificationService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  private AddressVerificationServiceProvider serviceProvider;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public AddressVerificationService(AddressVerificationServiceProvider serviceProvider) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   this.serviceProvider = serviceProvider;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public String validateAddress(String address)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return this.serviceProvider.validateAddress(address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; interface AddressVerificationServiceProvider&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public String validateAddress(String address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are injecting the AddressVerificationService dependency AddressVerificationServiceProvider.&lt;/p&gt;

&lt;p&gt;Now let us implement the AddressVerificationServiceProvider with multiple provider services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; class YahooAVS implements AddressVerificationServiceProvider&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public String validateAddress(String address) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   System.out.println(&amp;quot;Verifying address using YAHOO AddressVerificationService&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return yahooAVSAPI.validate(address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; class GoogleAVS implements AddressVerificationServiceProvider&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public String validateAddress(String address) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   System.out.println(&amp;quot;Verifying address using Google AddressVerificationService&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return googleAVSAPI.validate(address);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the Client can choose which Service Provider&amp;rsquo;s service to use as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; AddressVerificationService verificationService = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; AddressVerificationServiceProvider provider = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; provider = new YahooAVS();//to use YAHOO AVS&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; provider = new GoogleAVS();//to use Google AVS&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; verificationService = new AddressVerificationService(provider);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; String lnl = verificationService.validateAddress(&amp;quot;HitechCity, Hyderabad&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; System.out.println(lnl);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Unit Testing we can implement a Mock AddressVerificationServiceProvider.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; class MockAVS implements AddressVerificationServiceProvider&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public String validateAddress(String address) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   System.out.println(&amp;quot;Verifying address using MOCK AddressVerificationService&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return &amp;quot;&amp;lt;response&amp;gt;&amp;lt;longitude&amp;gt;123&amp;lt;/longitude&amp;gt;&amp;lt;latitude&amp;gt;4567&amp;lt;/latitude&amp;gt;&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; AddressVerificationServiceProvider provider = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; provider = new MockAVS();//to use MOCK AVS  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; AddressVerificationServiceIOC verificationService = new AddressVerificationServiceIOC(provider);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; String lnl = verificationService.validateAddress(&amp;quot;Somajiguda, Hyderabad&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; System.out.println(lnl);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach we elemenated the issues with above Non-IOC/DI based approaches.&lt;br /&gt;
1. We can provide support for as many Provides as we wish. Just implement AddressVerificationServiceProvider and inject it.&lt;br /&gt;
2. We can unit test using Dummy Data using Mock Implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So by following Dependency Injection principle we can create interface-based loosely-coupled and easily testable services.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;_&lt;br /&gt;
_&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Coding Best Practices: Better Search Implementation</title>
      <link>http://sivalabs.github.io/post/2011/java-coding-best-practices-better-search-implementation/</link>
      <pubDate>Wed, 09 Feb 2011 02:22:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/java-coding-best-practices-better-search-implementation/</guid>
      <description>&lt;p&gt;In web applications searching for information based on the selected criteria and displaying the results is a very common requirement.&lt;br /&gt;
Suppose we need to search users based on their name.  The end user will enter the username in the textbox and hit the search button and the user results will be fetched from database and display in a grid.&lt;br /&gt;
In the first look it looks simple and we start to implement it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserSearchAction extends Action&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public ActionForward execute(...)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  SearchForm sf = (SearchForm)form;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String searchName = sf.getSearchName();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserService userService = new UserService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; searchResults = userService.search(searchName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //put search results in request and dsplay in JSP&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;

public class UserService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;User&amp;gt; search(String username)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  // query the DB and get the results by applying filter on USERNAME column&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = UserDAO.search(username);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above implementation works fine for the current requirement.&lt;/p&gt;

&lt;p&gt;Later client wants to display only 10 rows per page and display a message like &amp;ldquo;Displaying 1-10 of 35 Users&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now we need to change the above code for the change request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserSearchAction extends Action&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public ActionForward execute(...)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  SearchForm sf = (SearchForm)form;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String searchName = sf.getSearchName();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserService userService = new UserService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Map&amp;lt;String, Object&amp;gt; searchResultsMap = userService.search(searchName, start, pageSize);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = (List&amp;lt;User&amp;gt;)searchResultsMap.get(&amp;quot;DATA&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Integer count = (Integer)searchResultsMap.get(&amp;quot;COUNT&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //put search results in request and dsplay in JSP&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;

public class UserService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Map&amp;lt;String, Object&amp;gt; search(String username, int start, int pageSize)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //Get the total number of results for this criteria&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int count = UserDAO.searchResultsCount(username);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  // query the DB and get the start to start+pageSize results by applying filter on USERNAME column&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = UserDAO.search(username, start, pageSize);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Map&amp;lt;String, Object&amp;gt; RESULTS_MAP = new HashMap&amp;lt;String, Object&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  RESULTS_MAP.put(&amp;quot;DATA&amp;quot;,users);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  RESULTS_MAP.put(&amp;quot;COUNT&amp;quot;,count);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return RESULTS_MAP;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later Client again wants to give an option to the end user to choose the search type either by UserID or by Username and show the paginated results.&lt;br /&gt;
Now we need to change the above code for the change request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserSearchAction extends Action&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public ActionForward execute(...)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  SearchForm sf = (SearchForm)form;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String searchName = sf.getSearchName();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String searchId = sf.getSearchId();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserService userService = new UserService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Map&amp;lt;String, Object&amp;gt; searchCriteriaMap = new HashMap&amp;lt;String, Object&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //searchCriteriaMap.put(&amp;quot;SEARCH_BY&amp;quot;,&amp;quot;NAME&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchCriteriaMap.put(&amp;quot;SEARCH_BY&amp;quot;,&amp;quot;ID&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchCriteriaMap.put(&amp;quot;ID&amp;quot;,searchId);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchCriteriaMap.put(&amp;quot;START&amp;quot;,start);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchCriteriaMap.put(&amp;quot;PAGESIZE&amp;quot;,pageSize);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Map&amp;lt;String, Object&amp;gt; searchResultsMap = userService.search(searchCriteriaMap);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = (List&amp;lt;User&amp;gt;)searchResultsMap.get(&amp;quot;DATA&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Integer count = (Integer)searchResultsMap.get(&amp;quot;COUNT&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //put search results in request and dsplay in JSP&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;

public class UserService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Map&amp;lt;String, Object&amp;gt; search(Map&amp;lt;String, Object&amp;gt; searchCriteriaMap)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return UserDAO.search(searchCriteriaMap);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;

public class UserDAO&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Map&amp;lt;String, Object&amp;gt; search(Map&amp;lt;String, Object&amp;gt; searchCriteriaMap)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String SEARCH_BY = (String)searchCriteriaMap.get(&amp;quot;SEARCH_BY&amp;quot;); &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int start = (Integer)searchCriteriaMap.get(&amp;quot;START&amp;quot;); &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int pageSize = (Integer)searchCriteriaMap.get(&amp;quot;PAGESIZE&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(&amp;quot;ID&amp;quot;.equals(SEARCH_BY))&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   int id = (Integer)searchCriteriaMap.get(&amp;quot;ID&amp;quot;); &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   //Get the total number of results for this criteria&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   int count = UserDAO.searchResultsCount(id);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // query the DB and get the start to start+pageSize results &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   //by applying filter on USER_ID column&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   List&amp;lt;User&amp;gt; users = search(id, start, pageSize);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  else&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   String username = (String)searchCriteriaMap.get(&amp;quot;USERNAME&amp;quot;); &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   //Get the total number of results for this criteria&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   int count = UserDAO.searchResultsCount(username);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // query the DB and get the start to start+pageSize results &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   //by applying filter on USERNAME column&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   List&amp;lt;User&amp;gt; users = search(username, start, pageSize);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Map&amp;lt;String, Object&amp;gt; RESULTS_MAP = new HashMap&amp;lt;String, Object&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  RESULTS_MAP.put(&amp;quot;DATA&amp;quot;,users);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  RESULTS_MAP.put(&amp;quot;COUNT&amp;quot;,count);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return RESULTS_MAP;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally the code became a big mess and completely violating the object oriented principles. There are lot of problems with the above code.&lt;br /&gt;
1. For each change request the method signatures are changing&lt;br /&gt;
2. Code needs to be changed for each enhancement like adding more search criteria&lt;/p&gt;

&lt;p&gt;We can design a better object model for this kind of search functionality which is Object Oriented and enhancable as follws.&lt;/p&gt;

&lt;p&gt;A generic SearchCriteria which holds common search criteria like pagination, sorting details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public abstract class SearchCriteria&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private boolean pagination = false;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private int pageSize = 25;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String sortOrder = &amp;quot;ASC&amp;quot;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public boolean isPagination()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return pagination;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setPagination(boolean pagination)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.pagination = pagination;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getSortOrder()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return sortOrder;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setSortOrder(String sortOrder)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.sortOrder = sortOrder;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public int getPageSize()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return pageSize;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setPageSize(int pageSize)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.pageSize = pageSize;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A generic SearchResults object which holds the actual results and other detials like total available results count, page wise results provider etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public abstract class SearchResults&amp;lt;T&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private int totalResults = 0;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private int pageSize = 25;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;T&amp;gt; results = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public int getPageSize()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return pageSize;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setPageSize(int pageSize)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.pageSize = pageSize;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; } &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public int getTotalResults()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return totalResults;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private void setTotalResults(int totalResults)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.totalResults = totalResults;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;T&amp;gt; getResults()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return results;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;T&amp;gt; getResults(int page)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(page &amp;lt;= 0 || page &amp;gt; this.getNumberOfPages())&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   throw new RuntimeException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   (&amp;quot;Page number is zero or there are no that many page results.&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;T&amp;gt; subList = new ArrayList&amp;lt;T&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int start = (page -1)*this.getPageSize();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  int end = start + this.getPageSize();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(end &amp;gt; this.results.size())&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   end = this.results.size();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  for (int i = start; i &amp;lt; end; i++)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   subList.add(this.results.get(i));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return subList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public int getNumberOfPages()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(this.results == null || this.results.size() == 0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   return 0;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return (this.totalResults/this.pageSize)+(this.totalResults%this.pageSize &amp;gt; 0 ? 1: 0);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setResults(List&amp;lt;T&amp;gt; aRresults)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(aRresults == null)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   aRresults = new ArrayList&amp;lt;T&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.results = aRresults;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.setTotalResults(this.results.size());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A SearchCriteria class specific to User Search.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class UserSearchCriteria extends SearchCriteria&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public enum UserSearchType &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  BY_ID, BY_NAME&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; };&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private UserSearchType searchType = UserSearchType.BY_NAME;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private int id;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String username;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public UserSearchType getSearchType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return searchType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setSearchType(UserSearchType searchType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.searchType = searchType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public int getId()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return id;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setId(int id)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.id = id;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getUsername()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return username;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setUsername(String username)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.username = username;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A SearchResults class specific to User Search.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.text.MessageFormat;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class UserSearchResults&amp;lt;T&amp;gt; extends SearchResults&amp;lt;user&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static String getDataGridMessage(int start, int end, int total)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return MessageFormat.format(&amp;quot;Displaying {0} to {1} Users of {2}&amp;quot;, start, end, total);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UserService takes the SearchCriteria, invokes the DAO and get the results, prepares the UserSearchResults and return it back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.javabp.UserSearchCriteria.UserSearchType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class UserService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public SearchResults&amp;lt;user&amp;gt; search(UserSearchCriteria searchCriteria)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserSearchType searchType = searchCriteria.getSearchType();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String sortOrder = searchCriteria.getSortOrder();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(searchType+&amp;quot;:&amp;quot;+sortOrder);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; results = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(searchType == UserSearchType.BY_NAME)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //Use hibernate Criteria API to get and sort results &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //based on USERNAME field in sortOrder&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   results = userDAO.searchUsers(...); &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  else if(searchType == UserSearchType.BY_ID)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //Use hibernate Criteria API to get and sort results &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //based on USER_ID field in sortOrder&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   results = userDAO.searchUsers(...);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserSearchResults&amp;lt;user&amp;gt; searchResults = new UserSearchResults&amp;lt;user&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchResults.setPageSize(searchCriteria.getPageSize());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  searchResults.setResults(results);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return searchResults;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;

package com.sivalabs.javabp;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.javabp.UserSearchCriteria.UserSearchType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class TestClient&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserSearchCriteria criteria = new UserSearchCriteria();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  criteria.setPageSize(3);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //criteria.setSearchType(UserSearchType.BY_ID);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  //criteria.setId(2);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  criteria.setSearchType(UserSearchType.BY_NAME);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  criteria.setUsername(&amp;quot;s&amp;quot;);  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  UserService userService = new UserService();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  SearchResults&amp;lt;user&amp;gt; searchResults = userService.search(criteria);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(searchResults.getTotalResults());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(searchResults.getResults().size()+&amp;quot;:&amp;quot;+searchResults.getResults());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(searchResults.getResults(1).size()+&amp;quot;:&amp;quot;+searchResults.getResults(1));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach if we want to add a new criteria like search by EMAIL we can do it as follows:&lt;br /&gt;
1. Add BY_EMAIL criteria type to UserSearchType enum&lt;br /&gt;
2. Add new property &amp;ldquo;email&amp;rdquo; to UserSearchCriteria&lt;br /&gt;
3. criteria.setSearchType(UserSearchType.BY_EMAIL);&lt;br /&gt;
criteria.setEmail(&amp;ldquo;gmail&amp;rdquo;);&lt;br /&gt;
4. In UserService prepare the HibernateCriteria with email filter.&lt;/p&gt;

&lt;p&gt;Thats it :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Next level of Don&#39;t Repeat Yourself(DRY) principle</title>
      <link>http://sivalabs.github.io/post/2011/next-level-of-dont-repeat-yourselfdry-principle/</link>
      <pubDate>Sun, 30 Jan 2011 18:46:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/next-level-of-dont-repeat-yourselfdry-principle/</guid>
      <description>&lt;p&gt;We are building the software applications using various languages for several years. Over the time new frameworks, new tools, new methodologies have came up. Especially in Java platform, now we have plenty of choices in each area following various design patterns and principles like MVC, FrontController etc.&lt;/p&gt;

&lt;p&gt;We have many development principles like KISS(Keep It Simple Stupid), DRY(Don&amp;rsquo;t Repeat Yourself) which encourages to write better code which is maintainable. Especially DRY principle is a very good one which every developer should understand and follow.&lt;/p&gt;

&lt;p&gt;The DRY principle is stated as **&amp;ldquo;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&amp;rdquo; **&lt;/p&gt;

&lt;p&gt;So the DRY principle is saying that if you need to write same piece of code at many places instead of copy-pasting make it as a separate method and use it wherever it is required. This is applying DRY at code level.&lt;/p&gt;

&lt;p&gt;I really really appreciate the Jakartha-Commons Utils authors for practically implementing DRY principle. Whenever i need a utility like some String operation, Date calculation, Regular expressions, Properties loading etc etc I just open the Jakartha-Commons website and i am sure i can find there what i need.&lt;br /&gt;
Even though each application has its own set of business requirements there are many things which are common to web/enterprise applications. Especially infrastructure code might be similar to many applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now I think it is time to take DRY priciple to the next level, I mean to apply at functional level.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us see where we can apply DRY at functional level. The following are some of the things where we can build reusable components/small projects which we can directly use with other projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. An application multi-level menu bar:&lt;/strong&gt;&lt;br /&gt;
I have seen many applications having a horizantal menu bar at the top of the page with single/multi level sub-menus. The menu bar can be build using Javascript or custom tags. What I am suggesting is if we can build a CustomTag to generate a Menu bar from an xml configuration and a style sheet that component can be used in any of hte projects.&lt;/p&gt;

&lt;p&gt;For Ex:&lt;/p&gt;

&lt;p&gt;we can create an xml structure for our menu as follows and create a customtag to parse that xml and render a menu bar with default stylesheet. If user is proved a custom stylesheet that custom tag will use that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;menubar&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;menu&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;index&amp;gt;1&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;name&amp;gt;File&amp;lt;/name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;index&amp;gt;1&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;name&amp;gt;New&amp;lt;/name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;index&amp;gt;2&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;name&amp;gt;Save&amp;lt;/name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            .....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            .....&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;/item&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/menu&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;menu&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;index&amp;gt;2&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        &amp;lt;name&amp;gt;Edit&amp;lt;/name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;index&amp;gt;1&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;name&amp;gt;Cut&amp;lt;/name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            &amp;lt;item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;index&amp;gt;2&amp;lt;/index&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                &amp;lt;name&amp;gt;Copy&amp;lt;/name&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/menubar&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/menu&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Role-based authentication and authorization system:&lt;/strong&gt;&lt;br /&gt;
I involved in many projects where the application users will have one or more roles and each role has one or more privileges. Each privilege is nothing but an action that a use will do in appliation. The whole application events will driven by role based authorization. And also there could be a requirement to create user groups and assign privileges to user groups instead of individual users.&lt;/p&gt;

&lt;p&gt;I think this Role based Authorization System can also be built as a component which we can plug in to any project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Job Scheduling:&lt;/strong&gt;&lt;br /&gt;
For many enterprises there could be several batch jobs that should be run on perticular schedules. I think there a need to build a job scheduling web application with the following features:&lt;br /&gt;
a) A web based UI to create and schedule new jobs&lt;br /&gt;
b) Provision to track the status of the running jobs&lt;br /&gt;
c) Provision to run jobs in adhoc manner&lt;br /&gt;
d) Provision to reschedule, terminate a job&lt;br /&gt;
e) Informing the concerned groups about the status of jobs through emails&lt;br /&gt;
f) Automatic email notifications on job failures&lt;/p&gt;

&lt;p&gt;we can build a web application with the above mentioned features and leaving business logic implementation in the jobs for the developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Sophisticated logging system:&lt;/strong&gt;&lt;br /&gt;
While developing the application logging plays a vital role in debugging the problems. We can use AOP for logging in a better way with cleaner approach. Many times the developer needs to check what parameters are sending to methods and where it is throwing an exception.&lt;/p&gt;

&lt;p&gt;For this we can write MethodParamsDumbperAspect using SpringAOP+AspectJ which will display the method parameter values using reflection/commons-beanutils. Only thing a developer need to configure is the base package name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Configurable and customizable work-flow engine&lt;/strong&gt;:&lt;br /&gt;
I have seen many intranet portals having HelpDesk applications with the following features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A customer will raise a request.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The system will identify the workflow to process the request and the request will be routed to the concern person.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The requester can view the status of his request as each stpe is in progress.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Like this there are many WorkFlow based systems. We can build a generic workflow engine where in the administrator can setup the metadata like Request Types, Steps for each request, Request Status codes etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here my point is all these days we followed DRY in writing code. Let us take it to the next level in building components/sub-projects. If an architect or developer got a requirement to build a reusable component, it would be great if he/she can publish his/her approach (and code if possible) so that the other developers across the java community can use the approach/code instead of reinventing the wheel.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am planning to build a JobScheduling Server with the above mentioned features. If anyone is interested you can join me :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 things to become an outstanding Java developer</title>
      <link>http://sivalabs.github.io/post/2011/10-things-to-become-outstanding-java/</link>
      <pubDate>Wed, 26 Jan 2011 07:11:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/10-things-to-become-outstanding-java/</guid>
      <description>&lt;p&gt;If you are a java developer and passionate about technology, you can follow the below things which makes you an outstanding Java developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Have strong foundation and understanding on OO Principles&lt;/strong&gt;
For a java developer having strong understanding on Object Oriented Programming is a must. Without having a strong foundation on OOPS, one can&amp;rsquo;t realize the beauty of an Object Oriented Programming language like Java. If you don&amp;rsquo;t have good idea on what OOPS is, eventhough you are using OOP language you may be still coding in procedural way.Just studying OO principles definitions won&amp;rsquo;t help much. we should know how to apply those OO principles in designing a solution in OO way. So one should have a strong knowledge on Object modeling, Inheritance, Polymorphism, Design Patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Master the core APIs&lt;/strong&gt;
It doesn&amp;rsquo;t matter how strong you are in terms of theoretical knowledge if you don&amp;rsquo;t know the language constructs and core APIs. In case of Java, one should have very strong hands on experience on core APIs like java.lang.*, I/O, Exceptions, Collections, Generics, Threads, JDBC etc. When it comes to Web application development, no matter which framework you are using having strong knowledge on Servlets, JSPs is a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Keep coding&lt;/strong&gt;
Things look simpler when talking about them theoretically. We can give a solution to a problem very easily in theory. But we can realize the depth of the problem when we start implementing our approach. You will come to know the language limitations, or design best practices while coding. So keep coding.&lt;/p&gt;

&lt;p&gt;**4. Subscribe to forums **
We are not alone. There are lots of people working on the same technologies that we are working on. When doing a simple proof of concept on a framework may not give you real challenges. But when you start using it on real projects you will face weird issues and you won&amp;rsquo;t find any solution in their official documentation. When started working on a new technology the best and first thing to do is subscribing to that technology forums. Whatever the issue you are facing someone else in this world might have already faced it earlier and might have found the solution. And it would be really really great if you can answer the questions asked by other forum users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Follow blogs and respond&lt;/strong&gt;
As I already told you are not alone. There are thousands of enthusiastic technology freaks around the world blogging their insights on technology. You can see different perspectives of same technology on blogs. Someone can find great features in a technology and someone else feels its a stupid framework giving his own reasons of why he felt like that. So you can see both good and bad of a technology on blogs. Follow the good blogs and respond/comment on posts with your opinion on that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Read open source frameworks source code&lt;/strong&gt;
A good developer will learn how to use a framework. But if you want to be an outstanding developer you should study the source code of various successful, popular frameworks where you can see the internal working mechanism of the framework and lot of best practices. It will help a lot in using the frameworks in very effective way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Know the technology trends&lt;/strong&gt;
In the open source software development technology trends keep on changing. By the time you get good idea on a framework that might become obsolete and some brand new framework came into picture with super-set of features. The problem which you are trying to solve with your current framework may be already solved by the new framework with a single line of configuration. So keep an eye on whats coming in and whats going out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Keep repeatedly using code snippets/utilities handy&lt;/strong&gt;
Overtime you may need to write/copy-paste same piece of code/configuration again and again. Keeping those kind of configuration snippets like log4.properties, jdbc configuration etc and utilities like StringUtils, ReflectionUtils, DBUtils will be more helpful. I know it itself don&amp;rsquo;t make you outstanding developer. But just imagine some co-developer came and ask you to help in fetching the list of values of a property from a collection of objects and then you just used your ReflectionUtil and gave the solution in few minutes. That will make you outstanding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Know different development methodologies&lt;/strong&gt;
Be familiar with various kinds of methodologies like Agile, SCRUM, XP, Waterfall etc. Nowadays choosing the development methodology is depending on the client. Some clients are preferring Agile and some clients are happy with waterfall model. So having an idea on various methodologies would be great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Document/blog your thoughts on technology&lt;/strong&gt;
In day to day job you may learn new things, new and better way of doing things, best practices, architectural ideas. Keep documenting those thoughts or blog it and share across the community. Imagine you solved a weird problem occurred while doing a simple POC and you blogged about it. May be some developer elsewhere in the world is facing the same issue on a production deployed application. Think how important that solution for that developer. So blog your thoughts, they might be helpful for others or to yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Application Development Best Practices</title>
      <link>http://sivalabs.github.io/post/2008/web-application-development-best-practices/</link>
      <pubDate>Sun, 21 Dec 2008 13:22:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2008/web-application-development-best-practices/</guid>
      <description>&lt;p&gt;Web Application Development Best Practices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Follow consistency in naming the project artifacts like Java class names, JSP names etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maintain the standard way of handling exceptions in different layers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have a single access point for Configuration Constants.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Take care about page navigation. Use forwarding and redirecting carefully.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Always try to pull out the repeted code blocks and make them seperate methods.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>