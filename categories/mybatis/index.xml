<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mybatis on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/mybatis/</link>
    <description>Recent content in Mybatis on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jul 2013 15:31:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/mybatis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Packt Publishing &#34;Java Persistence With MyBatis3&#34; published</title>
      <link>http://sivalabs.github.io/post/2013/packt-publishing-java-persistence-with-mybatis3-published/</link>
      <pubDate>Tue, 16 Jul 2013 15:31:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2013/packt-publishing-java-persistence-with-mybatis3-published/</guid>
      <description>&lt;p&gt;Hurray&amp;hellip;My first book &amp;ldquo;&lt;strong&gt;Java Persistence with MyBatis3&lt;/strong&gt;&amp;rdquo; is published. I would like to thank Packt Publishers for giving me this opportunity to write on my favorite framework MyBatis.&lt;/p&gt;

&lt;p&gt;For most of the software applications data persistence is a key and important aspect. In Java land we have many ways of implementing persistence layer starting from low level JDBC to fancy ORM frameworks.&lt;br /&gt;
JDBC is too low level API and needs to write a lot of boilerplate code. On the other hand we have full fledged ORM frameworks like JPA(Hibernate, EclipseLink etc) which hides the complexity of working with SQL directly by letting developers work with Objects and generate SQL based on the RDBMS(Dialect) being used. But each approach has its own set of pros and cons, there is no one size fits all solutions. There are many large applications that are using Hibernate successfully and there are many other applications which got screwed up by using Hibernate/JPA incorrectly. It is not the problem with JPA/Hibernate, it is simply because JPA/Hibernate may not be best fit for those applications or developers don&amp;rsquo;t understood them properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So what if I don&amp;rsquo;t want to use low level JDBC API and can&amp;rsquo;t go for full fledged ORMs? MyBatis to the rescue.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MyBatis is a SQL Mapper framework which simplify data persistence logic by hiding all the low level JDBC code and provides easy to use API. Nothing more, nothing less..No magic&amp;hellip; You need to write SQL by yourself.(Whenever I hear someone saying &amp;ldquo;By using ORM frameworks we don&amp;rsquo;t need to know SQL, we can use HQL and ORM will take care of it&amp;rdquo;, I just LOL)&lt;/p&gt;

&lt;p&gt;So what exactly MyBatis offers you?&lt;br /&gt;
&lt;strong&gt;1. Manage Resources:&lt;/strong&gt; Based on the provided configuration, MyBatis takes care of creating Connection(pool), Statement/PreparedStatement/CallableStatement, ResultSet and closing them once the task is done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. SQL Results &amp;lt;-&amp;gt; Java Beans:&lt;/strong&gt; For SELECT statement MyBatis will take care of looping through ResultSet and populating Java Objects. For DML statements we can pass Java Objects as inputs and MyBatis will unwrap the data and put in placeholders based on provided mapping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Supports Mapping of One-To-Many/One-To-One mapping:&lt;/strong&gt; MyBatis supports mapping of SQL ResultSet into Java Object graph based on One-To-Many/One-To-One mapping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Caching Support:&lt;/strong&gt; Caching SQL results is very common requirement for any non trivial applications. MyBatis provides in-built support for Caching. In addition to that MyBatis provides support for popular cache libraries like EHCache, HazelCast etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Integration with other frameworks:&lt;/strong&gt; MyBatis is very lightweight and works well with popular IOC frameworks like Spring, Guice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Annotation based Mappers:&lt;/strong&gt; For those XML haters, MyBatis provides Annotation based mapping also.&lt;/p&gt;

&lt;blockquote&gt;**I feel like as Gradle is sweet spot in between Ant and Maven, MyBatis is sweetspot between JDBC and ORMs(JPA/Hibernate/EclipseLink).**&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-RSbCcKxZOrs/UeVeVBS3OMI/AAAAAAAAAxw/61v9fORNoO4/s1600/MyBatis.jpg&#34;&gt;&lt;img src=&#34;http://3.bp.blogspot.com/-RSbCcKxZOrs/UeVeVBS3OMI/AAAAAAAAAxw/61v9fORNoO4/s320/MyBatis.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.packtpub.com/java-persistence-with-mybatis-3/book&#34;&gt;http://www.packtpub.com/java-persistence-with-mybatis-3/book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java Persistence With MyBatis3&lt;/strong&gt; book covers:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 1 - Getting Started with MyBatis:&lt;/strong&gt;&lt;br /&gt;
Introduces MyBatis persistence framework and explains the advantages of using MyBatis instead of plain JDBC. We will also look at how to create a project, install MyBatis framework dependencies with and without the Maven build tool, configure, and use MyBatis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 2 - Bootstrapping MyBatis:&lt;/strong&gt;&lt;br /&gt;
Covers how to bootstrap MyBatis using XML and Java API-based configuration. We will also learn various MyBatis configuration options such as type aliases, type handlers, global settings, and so on.&lt;/p&gt;

&lt;p&gt;**Chapter 3 - SQL Mappers Using XML: **&lt;br /&gt;
This chapter goes in-depth into writing SQL mapped statements using the Mapper XML files. We will learn how to configure simple statements, statements with one-to-one, one-to-many relationships and mapping results using ResultMaps. We will also learn how to build dynamic queries, paginated results, and custom ResultSet handling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 4 - SQL Mappers Using Annotations:&lt;/strong&gt;&lt;br /&gt;
This chapter covers writing SQL mapped statements using annotations. We will learn how to configure simple statements, statements with one-to-one and one-to-many relationships. We will also look into building dynamic queries using SqlProvider annotations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 5 - Integration with Spring:&lt;/strong&gt;&lt;br /&gt;
This chapter covers how to integrate MyBatis with Spring framework. We will learn how to install Spring libraries, register MyBatis beans in Spring ApplicationContext, inject SqlSession and Mapper beans, and use Spring&amp;rsquo;s annotation-based transaction handling mechanism with MyBatis.&lt;/p&gt;

&lt;p&gt;If anybody is interested in reviewing the book, please let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial : Part4 - Spring Integration</title>
      <link>http://sivalabs.github.io/post/2012/mybatis-tutorial-part4-spring-integration/</link>
      <pubDate>Wed, 24 Oct 2012 06:10:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/mybatis-tutorial-part4-spring-integration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part1-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part1 - CRUD Operations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-2-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part-2: CRUD operations Using Annotations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-3-mapping.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part 3 - Mapping Relationships&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part4-spring.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial : Part4 - Spring Integration&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MyBatis-Spring is a subproject of MyBatis and provides Spring integration support which drastically simplifies the MyBatis usage. For those who are familiar with Spring&amp;rsquo;s way of Dependency Injection process, using MyBatis-Spring is a very simple.&lt;/p&gt;

&lt;p&gt;First let us see the process of using MyBatis without Spring.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create SqlSessionFactory using SqlSessionFactoryBuilder by passing mybatis-config.xml which contains DataSource properties, List of Mapper XMLs and TypeAliases etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create SqlSession object from SqlSessionFactory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get Mapper instance from SqlSession and execute queries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit or rollback the transaction using SqlSession object.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With MyBatis-Spring, most of the above steps can be configured in Spring ApplicationContext and SqlSession or Mapper instances can be injected into Spring Beans. Then we can use Spring&amp;rsquo;s TransactionManagement features without writing transaction commit/rollback code all over the code.&lt;/p&gt;

&lt;p&gt;Now let us see how we can configure MyBatis+Spring integration stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1:&lt;/strong&gt; Configure MyBatis-Spring dependencies in pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;4.10&amp;lt;/version&amp;gt;
   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.1&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;3.1.1.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;3.1.1.RELEASE&amp;lt;/version&amp;gt;
   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
             &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
             &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
             &amp;lt;version&amp;gt;5.1.21&amp;lt;/version&amp;gt;
             &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
         &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;cglib&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;cglib-nodep&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#2:&lt;/strong&gt; You don&amp;rsquo;t need to configure Database properties in mybatis-config.xml.&lt;/p&gt;

&lt;p&gt;We can configure DataSource in Spring Container and use it to build MyBatis SqlSessionFactory.&lt;/p&gt;

&lt;p&gt;Instead of SqlSessionFactoryBuilder, MyBatis-Spring uses org.mybatis.spring.SqlSessionFactoryBean to build SqlSessionFactory.&lt;/p&gt;

&lt;p&gt;We can pass dataSource, Mapper XML files locations, typeAliases etc to SqlSessionFactoryBean.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot;/&amp;gt;
 &amp;lt;/bean&amp;gt;

 &amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;typeAliasesPackage&amp;quot; value=&amp;quot;com.sivalabs.mybatisdemo.domain&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;mapperLocations&amp;quot; value=&amp;quot;classpath*:com/sivalabs/mybatisdemo/mappers/**/*.xml&amp;quot; /&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#3:&lt;/strong&gt; Configure SqlSessionTemplate which provides ThreadSafe SqlSession object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;bean id=&amp;quot;sqlSession&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionTemplate&amp;quot;&amp;gt;
   &amp;lt;constructor-arg index=&amp;quot;0&amp;quot; ref=&amp;quot;sqlSessionFactory&amp;quot; /&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#4:&lt;/strong&gt; To be able to inject Mappers directly we should register org.mybatis.spring.mapper.MapperScannerConfigurer and configure the package name where to find Mapper Interfaces.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;bean class=&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&amp;gt;
   &amp;lt;property name=&amp;quot;basePackage&amp;quot; value=&amp;quot;com.sivalabs.mybatisdemo.mappers&amp;quot; /&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#5:&lt;/strong&gt; Configure TransactionManager to support Annotation based Transaction support.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;transactionManager&amp;quot;/&amp;gt;

 &amp;lt;bean id=&amp;quot;transactionManager&amp;quot; class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#6:&lt;/strong&gt; Update the Service classes and register them in Spring container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.service;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sivalabs.mybatisdemo.domain.User;
import com.sivalabs.mybatisdemo.mappers.UserMapper;

@Service
@Transactional
public class UserService
{
 @Autowired
 private SqlSession sqlSession; //This is to demonstrate injecting SqlSession object

 public void insertUser(User user) 
 {
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  userMapper.insertUser(user);
 }

 public User getUserById(Integer userId) 
 {
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  return userMapper.getUserById(userId);
 }

}







package com.sivalabs.mybatisdemo.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.sivalabs.mybatisdemo.domain.Blog;
import com.sivalabs.mybatisdemo.mappers.BlogMapper;

@Service
@Transactional
public class BlogService
{
 @Autowired
 private BlogMapper blogMapper; // This is to demonstratee how to inject Mappers directly

 public void insertBlog(Blog blog) {
  blogMapper.insertBlog(blog);
 }

 public Blog getBlogById(Integer blogId) {
  return blogMapper.getBlogById(blogId);
 }

 public List&amp;lt;Blog&amp;gt; getAllBlogs() {
  return blogMapper.getAllBlogs();
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When we can directly inject Mappers then why do we need to inject SqlSession objects? Because SqlSession object contains more fine grained method which comes handy at times.&lt;/p&gt;

&lt;p&gt;For Example: If we want to get count of how many records got updated by an Update query we can use SqlSession as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int updatedRowCount = sqlSession.update(&amp;quot;com.sivalabs.mybatisdemo.mappers.UserMapper.updateUser&amp;quot;, user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far I didn&amp;rsquo;t find a way to get the row update count without using SqlSession object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS: You can have your interface insert/update/delete methods returning int, then MyBatis returns the number of records updated as an integer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#7&lt;/strong&gt; Write JUnit Tests to test UserService and BlogService.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo;

import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.sivalabs.mybatisdemo.domain.User;
import com.sivalabs.mybatisdemo.service.UserService;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations=&amp;quot;classpath:applicationContext.xml&amp;quot;)
public class SpringUserServiceTest 
{
 @Autowired
 private UserService userService;

    @Test
 public void testGetUserById() 
 {
  User user = userService.getUserById(1);
  Assert.assertNotNull(user);
  System.out.println(user);
  System.out.println(user.getBlog());
 }

    @Test
    public void testUpdateUser() 
    {
     long timestamp = System.currentTimeMillis();
  User user = userService.getUserById(2);
  user.setFirstName(&amp;quot;TestFirstName&amp;quot;+timestamp);
     user.setLastName(&amp;quot;TestLastName&amp;quot;+timestamp);
     userService.updateUser(user);
  User updatedUser = userService.getUserById(2);
  Assert.assertEquals(user.getFirstName(), updatedUser.getFirstName());
  Assert.assertEquals(user.getLastName(), updatedUser.getLastName());
 }

}







package com.sivalabs.mybatisdemo;

import java.util.Date;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.sivalabs.mybatisdemo.domain.Blog;
import com.sivalabs.mybatisdemo.domain.Post;
import com.sivalabs.mybatisdemo.service.BlogService;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations=&amp;quot;classpath:applicationContext.xml&amp;quot;)
public class SpringBlogServiceTest 
{
 @Autowired
 private BlogService blogService;

 @Test
 public void testGetBlogById() 
 {
  Blog blog = blogService.getBlogById(1);
  Assert.assertNotNull(blog);
  System.out.println(blog);
  List&amp;lt;Post&amp;gt; posts = blog.getPosts();
  for (Post post : posts) {
   System.out.println(post);
  }
 }

    @Test
    public void testInsertBlog() 
    {
     Blog blog = new Blog();
     blog.setBlogName(&amp;quot;test_blog_&amp;quot;+System.currentTimeMillis());
     blog.setCreatedOn(new Date());

     blogService.insertBlog(blog);
     Assert.assertTrue(blog.getBlogId() != 0);
     Blog createdBlog = blogService.getBlogById(blog.getBlogId());
     Assert.assertNotNull(createdBlog);
     Assert.assertEquals(blog.getBlogName(), createdBlog.getBlogName());
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part 3 - Mapping Relationships</title>
      <link>http://sivalabs.github.io/post/2012/mybatis-tutorial-part-3-mapping-relationships/</link>
      <pubDate>Sun, 21 Oct 2012 14:07:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/mybatis-tutorial-part-3-mapping-relationships/</guid>
      <description>&lt;p&gt;In this post let us see how to use MyBatis ResultMap configuration to map relationships.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part1-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part1 - CRUD Operations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-2-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part-2: CRUD operations Using Annotations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-3-mapping.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part 3 - Mapping Relationships&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part4-spring.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial : Part4 - Spring Integration&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate we are considering the following sample domain model:
There will be Users and each User may have a Blog and each Blog can contain zero or more posts.&lt;/p&gt;

&lt;p&gt;The Database structure of the three tables are as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE user (
  user_id int(10) unsigned NOT NULL auto_increment,
  email_id varchar(45) NOT NULL,
  password varchar(45) NOT NULL,
  first_name varchar(45) NOT NULL,
  last_name varchar(45) default NULL,
  blog_id int(10) unsigned default NULL,
  PRIMARY KEY  (user_id),
  UNIQUE KEY Index_2_email_uniq (email_id),
  KEY FK_user_blog (blog_id),
  CONSTRAINT FK_user_blog FOREIGN KEY (blog_id) REFERENCES blog (blog_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;






CREATE TABLE blog (
  blog_id int(10) unsigned NOT NULL auto_increment,
  blog_name varchar(45) NOT NULL,
  created_on datetime NOT NULL,
  PRIMARY KEY  (blog_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;






CREATE TABLE post (
  post_id int(10) unsigned NOT NULL auto_increment,
  title varchar(45) NOT NULL,
  content varchar(1024) NOT NULL,
  created_on varchar(45) NOT NULL,
  blog_id int(10) unsigned NOT NULL,
  PRIMARY KEY  (post_id),
  KEY FK_post_blog (blog_id),
  CONSTRAINT FK_post_blog FOREIGN KEY (blog_id) REFERENCES blog (blog_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I am going to explain how to fetch and map *-has-One and One-To-Many result mappings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.domain;

public class User 
{
 private Integer userId;
 private String emailId;
 private String password;
 private String firstName;
 private String lastName;
 private Blog blog;
 //setters and getters
}






package com.sivalabs.mybatisdemo.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Blog {

 private Integer blogId;
 private String blogName;
 private Date createdOn;
 private List&amp;lt;Post&amp;gt; posts = new ArrayList&amp;lt;Post&amp;gt;();
 //setters and getters
}






package com.sivalabs.mybatisdemo.domain;

import java.util.Date;

public class Post 
{
 private Integer postId;
 private String title;
 private String content;
 private Date createdOn;
 //setters and getters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In mybatis-config.xml, configure type aliases for beans.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;typeAliases&amp;gt;
  &amp;lt;typeAlias type=&amp;quot;com.sivalabs.mybatisdemo.domain.User&amp;quot; alias=&amp;quot;User&amp;quot;/&amp;gt;
  &amp;lt;typeAlias type=&amp;quot;com.sivalabs.mybatisdemo.domain.Blog&amp;quot; alias=&amp;quot;Blog&amp;quot;/&amp;gt;
  &amp;lt;typeAlias type=&amp;quot;com.sivalabs.mybatisdemo.domain.Post&amp;quot; alias=&amp;quot;Post&amp;quot;/&amp;gt;  
&amp;lt;/typeAliases&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**
***&lt;strong&gt;-has-One Result Mapping: &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In UserMapper.xml, configure sql queries and result maps as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;mapper namespace=&amp;quot;com.sivalabs.mybatisdemo.mappers.UserMapper&amp;quot;&amp;gt;

 &amp;lt;resultMap type=&amp;quot;User&amp;quot; id=&amp;quot;UserResult&amp;quot;&amp;gt;
    &amp;lt;id property=&amp;quot;userId&amp;quot; column=&amp;quot;user_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;emailId&amp;quot; column=&amp;quot;email_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;password&amp;quot; column=&amp;quot;password&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;firstName&amp;quot; column=&amp;quot;first_name&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;lastName&amp;quot; column=&amp;quot;last_name&amp;quot;/&amp;gt;
    &amp;lt;association property=&amp;quot;blog&amp;quot; resultMap=&amp;quot;BlogResult&amp;quot;/&amp;gt;
   &amp;lt;/resultMap&amp;gt;

 &amp;lt;resultMap type=&amp;quot;Blog&amp;quot; id=&amp;quot;BlogResult&amp;quot;&amp;gt;
    &amp;lt;id property=&amp;quot;blogId&amp;quot; column=&amp;quot;blog_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;blogName&amp;quot; column=&amp;quot;BLOG_NAME&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;createdOn&amp;quot; column=&amp;quot;CREATED_ON&amp;quot;/&amp;gt;    
   &amp;lt;/resultMap&amp;gt;

  &amp;lt;select id=&amp;quot;getUserById&amp;quot; parameterType=&amp;quot;int&amp;quot; resultMap=&amp;quot;UserResult&amp;quot;&amp;gt;

     SELECT 
      U.USER_ID, U.EMAIL_ID, U.PASSWORD, U.FIRST_NAME, U.LAST_NAME, 
      B.BLOG_ID, B.BLOG_NAME, B.CREATED_ON
  FROM USER U LEFT OUTER JOIN BLOG B ON U.BLOG_ID=B.BLOG_ID
  WHERE U.USER_ID = #{userId}
  &amp;lt;/select&amp;gt;

  &amp;lt;select id=&amp;quot;getAllUsers&amp;quot; resultMap=&amp;quot;UserResult&amp;quot;&amp;gt;
   SELECT 
     U.USER_ID, U.EMAIL_ID, U.PASSWORD, U.FIRST_NAME, U.LAST_NAME, 
     B.BLOG_ID, B.BLOG_NAME, B.CREATED_ON
 FROM USER U LEFT OUTER JOIN BLOG B ON U.BLOG_ID=B.BLOG_ID
  &amp;lt;/select&amp;gt;

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JUnit Test, write a method to test the association loading.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void getUserById() 
{
 SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
 try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  User user = userMapper.getUserById(1);
  System.out.println(user.getBlog());
 }finally{
  sqlSession.close();
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;One-To-Many Results Mapping: &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In BlogMapper.xml configure Blog to Posts relationship as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;mapper namespace=&amp;quot;com.sivalabs.mybatisdemo.mappers.BlogMapper&amp;quot;&amp;gt;

 &amp;lt;resultMap type=&amp;quot;Blog&amp;quot; id=&amp;quot;BlogResult&amp;quot;&amp;gt;
    &amp;lt;id property=&amp;quot;blogId&amp;quot; column=&amp;quot;blog_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;blogName&amp;quot; column=&amp;quot;BLOG_NAME&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;createdOn&amp;quot; column=&amp;quot;CREATED_ON&amp;quot;/&amp;gt;
    &amp;lt;collection property=&amp;quot;posts&amp;quot; ofType=&amp;quot;Post&amp;quot; resultMap=&amp;quot;PostResult&amp;quot; columnPrefix=&amp;quot;post_&amp;quot;&amp;gt;&amp;lt;/collection&amp;gt;
   &amp;lt;/resultMap&amp;gt;

   &amp;lt;resultMap type=&amp;quot;Post&amp;quot; id=&amp;quot;PostResult&amp;quot;&amp;gt;
    &amp;lt;id property=&amp;quot;postId&amp;quot; column=&amp;quot;post_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;title&amp;quot; column=&amp;quot;title&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;content&amp;quot; column=&amp;quot;content&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;createdOn&amp;quot; column=&amp;quot;created_on&amp;quot;/&amp;gt;
   &amp;lt;/resultMap&amp;gt;

  &amp;lt;select id=&amp;quot;getBlogById&amp;quot; parameterType=&amp;quot;int&amp;quot; resultMap=&amp;quot;BlogResult&amp;quot;&amp;gt;

     SELECT 
      b.blog_id, b.blog_name, b.created_on, 
      p.post_id as post_post_id, p.title as post_title, p.content as post_content, p.created_on as post_created_on
  FROM blog b left outer join post p on b.blog_id=p.blog_id
     WHERE b.BLOG_ID=#{blogId}
  &amp;lt;/select&amp;gt;

  &amp;lt;select id=&amp;quot;getAllBlogs&amp;quot; resultMap=&amp;quot;BlogResult&amp;quot;&amp;gt;
   SELECT 
    b.blog_id, b.blog_name, b.created_on as blog_created_on, 
     p.post_id as post_post_id, p.title as post_title, p.content as post_content, p.created_on as post_created_on
 FROM blog b left outer join post p on b.blog_id=p.blog_id
  &amp;lt;/select&amp;gt;

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JUnit Test, write a test method to test blog-to-posts relationship mapping.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void getBlogById() 
{
 SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
 try{
 BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
 Blog blog = blogMapper.getBlogById(1);
 System.out.println(blog);
 List&amp;lt;Post&amp;gt; posts = blog.getPosts();
 for (Post post : posts) {
  System.out.println(post);
 }
 }finally{
  sqlSession.close();
 }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part-2: CRUD operations Using Annotations</title>
      <link>http://sivalabs.github.io/post/2012/mybatis-tutorial-part-2-crud-operations-using-annotations/</link>
      <pubDate>Sun, 21 Oct 2012 11:49:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/mybatis-tutorial-part-2-crud-operations-using-annotations/</guid>
      <description>&lt;p&gt;In this post I will explain how to perform CRUD operations using MyBatis Annotation support without need of Queries configuration in XML mapper files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part1-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part1 - CRUD Operations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-2-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part-2: CRUD operations Using Annotations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-3-mapping.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part 3 - Mapping Relationships&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part4-spring.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial : Part4 - Spring Integration&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step#1: Create a table BLOG and a java domain Object Blog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE  blog (
  blog_id int(10) unsigned NOT NULL auto_increment,
  blog_name varchar(45) NOT NULL,
  created_on datetime NOT NULL,
  PRIMARY KEY  (blog_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;






package com.sivalabs.mybatisdemo.domain;

import java.util.Date;

public class Blog {

 private Integer blogId;
 private String blogName;
 private Date createdOn;

 @Override
 public String toString() {
  return &amp;quot;Blog [blogId=&amp;quot; + blogId + &amp;quot;, blogName=&amp;quot; + blogName
    + &amp;quot;, createdOn=&amp;quot; + createdOn + &amp;quot;]&amp;quot;;
 }
 //Seeters and getters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step#2: Create UserMapper.java interface with SQL queries in Annotations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.mappers;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.sivalabs.mybatisdemo.domain.Blog;

public interface BlogMapper 
{
 @Insert(&amp;quot;INSERT INTO BLOG(BLOG_NAME, CREATED_ON) VALUES(#{blogName}, #{createdOn})&amp;quot;)
 @Options(useGeneratedKeys=true, keyProperty=&amp;quot;blogId&amp;quot;)
 public void insertBlog(Blog blog);

 @Select(&amp;quot;SELECT BLOG_ID AS blogId, BLOG_NAME as blogName, CREATED_ON as createdOn FROM BLOG WHERE BLOG_ID=#{blogId}&amp;quot;)
 public Blog getBlogById(Integer blogId);

 @Select(&amp;quot;SELECT * FROM BLOG &amp;quot;)
 @Results({
  @Result(id=true, property=&amp;quot;blogId&amp;quot;, column=&amp;quot;BLOG_ID&amp;quot;),
  @Result(property=&amp;quot;blogName&amp;quot;, column=&amp;quot;BLOG_NAME&amp;quot;),
  @Result(property=&amp;quot;createdOn&amp;quot;, column=&amp;quot;CREATED_ON&amp;quot;)  
 })
 public List&amp;lt;Blog&amp;gt; getAllBlogs();

 @Update(&amp;quot;UPDATE BLOG SET BLOG_NAME=#{blogName}, CREATED_ON=#{createdOn} WHERE BLOG_ID=#{blogId}&amp;quot;)
 public void updateBlog(Blog blog);

 @Delete(&amp;quot;DELETE FROM BLOG WHERE BLOG_ID=#{blogId}&amp;quot;)
 public void deleteBlog(Integer blogId);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step#3: Configure BlogMapper in mybatis-config.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE configuration
  PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
  &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
&amp;lt;configuration&amp;gt;
 &amp;lt;properties resource=&amp;quot;jdbc.properties&amp;quot;/&amp;gt;
 &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt;
  &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt;
    &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
    &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;
   &amp;lt;!-- &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://localhost:3306/mybatis-demo&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;admin&amp;quot;/&amp;gt; --&amp;gt;
   &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot;/&amp;gt;
   &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot;/&amp;gt;
    &amp;lt;/dataSource&amp;gt;
  &amp;lt;/environment&amp;gt;
  &amp;lt;/environments&amp;gt;
  &amp;lt;mappers&amp;gt;
    &amp;lt;mapper class=&amp;quot;com.sivalabs.mybatisdemo.mappers.BlogMapper&amp;quot;/&amp;gt;
  &amp;lt;/mappers&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step#4: Create BlogService.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.service;

import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.sivalabs.mybatisdemo.domain.Blog;
import com.sivalabs.mybatisdemo.mappers.BlogMapper;

public class BlogService
{

 public void insertBlog(Blog blog) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
  blogMapper.insertBlog(blog);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }
 }


 public Blog getBlogById(Integer blogId) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
  return blogMapper.getBlogById(blogId);
  }finally{
   sqlSession.close();
  }
 }


 public List&amp;lt;Blog&amp;gt; getAllBlogs() {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
  return blogMapper.getAllBlogs();
  }finally{
   sqlSession.close();
  }
 }


 public void updateBlog(Blog blog) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
  blogMapper.updateBlog(blog);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }  
 }


 public void deleteBlog(Integer blogId) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);
  blogMapper.deleteBlog(blogId);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }

 }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step#5: Create JUnit Test for BlogService methods&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo;

import java.util.Date;
import java.util.List;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sivalabs.mybatisdemo.domain.Blog;
import com.sivalabs.mybatisdemo.service.BlogService;

public class BlogServiceTest 
{
 private static BlogService blogService;

 @BeforeClass
    public static void setup() 
 {
  blogService = new BlogService();
 }

 @AfterClass
    public static void teardown() 
 {
  blogService = null;
 }

    @Test
 public void testGetBlogById() 
 {
  Blog blog = blogService.getBlogById(1);
  Assert.assertNotNull(blog);
  System.out.println(blog);
 }

    @Test
    public void testGetAllBlogs() 
    {
  List&amp;lt;Blog&amp;gt; blogs = blogService.getAllBlogs();
  Assert.assertNotNull(blogs);
  for (Blog blog : blogs) 
  {
   System.out.println(blog);
  }

 }

    @Test
    public void testInsertBlog() 
    {
     Blog blog = new Blog();
     blog.setBlogName(&amp;quot;test_blog_&amp;quot;+System.currentTimeMillis());
     blog.setCreatedOn(new Date());

     blogService.insertBlog(blog);
  Assert.assertTrue(blog.getBlogId() != 0);
  Blog createdBlog = blogService.getBlogById(blog.getBlogId());
  Assert.assertNotNull(createdBlog);
  Assert.assertEquals(blog.getBlogName(), createdBlog.getBlogName());

 }

    @Test
    public void testUpdateBlog() 
    {
     long timestamp = System.currentTimeMillis();
  Blog blog = blogService.getBlogById(2);
  blog.setBlogName(&amp;quot;TestBlogName&amp;quot;+timestamp);
     blogService.updateBlog(blog);
  Blog updatedBlog = blogService.getBlogById(2);
  Assert.assertEquals(blog.getBlogName(), updatedBlog.getBlogName());
 }

   @Test
   public void testDeleteBlog() 
   {
     Blog blog = blogService.getBlogById(4);
     blogService.deleteBlog(blog.getBlogId());
  Blog deletedBlog = blogService.getBlogById(4);
  Assert.assertNull(deletedBlog);
 }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part1 - CRUD Operations</title>
      <link>http://sivalabs.github.io/post/2012/mybatis-tutorial-part1-crud-operations/</link>
      <pubDate>Sun, 21 Oct 2012 11:10:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/mybatis-tutorial-part1-crud-operations/</guid>
      <description>&lt;p&gt;MyBatis is an SQL Mapper tool which greatly simplifies the database programing when compared to using JDBC directly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part1-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part1 - CRUD Operations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-2-crud-operations.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part-2: CRUD operations Using Annotations&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part-3-mapping.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial: Part 3 - Mapping Relationships&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.sivalabs.in/2012/10/mybatis-tutorial-part4-spring.html&#34;&gt;&lt;strong&gt;MyBatis Tutorial : Part4 - Spring Integration&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**Step1: **Create a Maven project and configure MyBatis dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; 
 xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
 xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 
 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

 &amp;lt;groupId&amp;gt;com.sivalabs&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;mybatis-demo&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
 &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

 &amp;lt;name&amp;gt;mybatis-demo&amp;lt;/name&amp;gt;
 &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt;

 &amp;lt;properties&amp;gt;
  &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
 &amp;lt;/properties&amp;gt;

 &amp;lt;build&amp;gt;
  &amp;lt;plugins&amp;gt;
   &amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.2&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
     &amp;lt;source&amp;gt;1.6&amp;lt;/source&amp;gt;
     &amp;lt;target&amp;gt;1.6&amp;lt;/target&amp;gt;
     &amp;lt;encoding&amp;gt;${project.build.sourceEncoding}&amp;lt;/encoding&amp;gt;
    &amp;lt;/configuration&amp;gt;
   &amp;lt;/plugin&amp;gt;
  &amp;lt;/plugins&amp;gt;
 &amp;lt;/build&amp;gt;

 &amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;4.10&amp;lt;/version&amp;gt;
   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.1&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
             &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
             &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
             &amp;lt;version&amp;gt;5.1.21&amp;lt;/version&amp;gt;
             &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
         &amp;lt;/dependency&amp;gt;
 &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Step#2: **Create the table USER and a Java domain Object User as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE  user (
  user_id int(10) unsigned NOT NULL auto_increment,
  email_id varchar(45) NOT NULL,
  password varchar(45) NOT NULL,
  first_name varchar(45) NOT NULL,
  last_name varchar(45) default NULL,
  PRIMARY KEY  (user_id),
  UNIQUE KEY Index_2_email_uniq (email_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;







package com.sivalabs.mybatisdemo.domain;
public class User 
{
 private Integer userId;
 private String emailId;
 private String password;
 private String firstName;
 private String lastName;

 @Override
 public String toString() {
  return &amp;quot;User [userId=&amp;quot; + userId + &amp;quot;, emailId=&amp;quot; + emailId
    + &amp;quot;, password=&amp;quot; + password + &amp;quot;, firstName=&amp;quot; + firstName
    + &amp;quot;, lastName=&amp;quot; + lastName + &amp;quot;]&amp;quot;;
 }
 //setters and getters 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#3:&lt;/strong&gt; Create MyBatis configuration files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Create jdbc.properties file in src/main/resources folder &lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  jdbc.driverClassName=com.mysql.jdbc.Driver
  jdbc.url=jdbc:mysql://localhost:3306/mybatis-demo
  jdbc.username=root
  jdbc.password=admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**b) Create mybatis-config.xml file in src/main/resources folder **&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
  &amp;lt;!DOCTYPE configuration
    PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
    &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
  &amp;lt;configuration&amp;gt;
   &amp;lt;properties resource=&amp;quot;jdbc.properties&amp;quot;/&amp;gt;
   &amp;lt;typeAliases&amp;gt;
    &amp;lt;typeAlias type=&amp;quot;com.sivalabs.mybatisdemo.domain.User&amp;quot; alias=&amp;quot;User&amp;quot;&amp;gt;&amp;lt;/typeAlias&amp;gt;
   &amp;lt;/typeAliases&amp;gt;
   &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt;
    &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt;
      &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
      &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;    
     &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;${jdbc.driverClassName}&amp;quot;/&amp;gt;
     &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${jdbc.url}&amp;quot;/&amp;gt;
     &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${jdbc.username}&amp;quot;/&amp;gt;
     &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot;/&amp;gt;
      &amp;lt;/dataSource&amp;gt;
    &amp;lt;/environment&amp;gt;
    &amp;lt;/environments&amp;gt;
    &amp;lt;mappers&amp;gt;
   &amp;lt;mapper resource=&amp;quot;com/sivalabs/mybatisdemo/mappers/UserMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;/mappers&amp;gt;
  &amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Step#4: **Create an interface UserMapper.java in src/main/java folder in com.sivalabs.mybatisdemo.mappers package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package com.sivalabs.mybatisdemo.mappers;

  import java.util.List;
  import com.sivalabs.mybatisdemo.domain.User;

  public interface UserMapper 
  {

   public void insertUser(User user);

   public User getUserById(Integer userId);

   public List&amp;lt;User&amp;gt; getAllUsers();

   public void updateUser(User user);

   public void deleteUser(Integer userId);

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#5:&lt;/strong&gt; Create UserMapper.xml file in src/main/resources folder in com.sivalabs.mybatisdemo.mappers package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
  &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;

&amp;lt;mapper namespace=&amp;quot;com.sivalabs.mybatisdemo.mappers.UserMapper&amp;quot;&amp;gt;

  &amp;lt;select id=&amp;quot;getUserById&amp;quot; parameterType=&amp;quot;int&amp;quot; resultType=&amp;quot;com.sivalabs.mybatisdemo.domain.User&amp;quot;&amp;gt;
     SELECT 
      user_id as userId, 
      email_id as emailId , 
      password, 
      first_name as firstName, 
      last_name as lastName
     FROM USER 
     WHERE USER_ID = #{userId}
  &amp;lt;/select&amp;gt;
  &amp;lt;!-- Instead of referencing Fully Qualified Class Names we can register Aliases in mybatis-config.xml and use Alias names. --&amp;gt;
   &amp;lt;resultMap type=&amp;quot;User&amp;quot; id=&amp;quot;UserResult&amp;quot;&amp;gt;
    &amp;lt;id property=&amp;quot;userId&amp;quot; column=&amp;quot;user_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;emailId&amp;quot; column=&amp;quot;email_id&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;password&amp;quot; column=&amp;quot;password&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;firstName&amp;quot; column=&amp;quot;first_name&amp;quot;/&amp;gt;
    &amp;lt;result property=&amp;quot;lastName&amp;quot; column=&amp;quot;last_name&amp;quot;/&amp;gt;   
   &amp;lt;/resultMap&amp;gt;

  &amp;lt;select id=&amp;quot;getAllUsers&amp;quot; resultMap=&amp;quot;UserResult&amp;quot;&amp;gt;
   SELECT * FROM USER
  &amp;lt;/select&amp;gt;

  &amp;lt;insert id=&amp;quot;insertUser&amp;quot; parameterType=&amp;quot;User&amp;quot; useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;userId&amp;quot;&amp;gt;
   INSERT INTO USER(email_id, password, first_name, last_name)
    VALUES(#{emailId}, #{password}, #{firstName}, #{lastName})
  &amp;lt;/insert&amp;gt;

  &amp;lt;update id=&amp;quot;updateUser&amp;quot; parameterType=&amp;quot;User&amp;quot;&amp;gt;
    UPDATE USER 
    SET
     PASSWORD= #{password},
     FIRST_NAME = #{firstName},
     LAST_NAME = #{lastName}
    WHERE USER_ID = #{userId}
  &amp;lt;/update&amp;gt;

  &amp;lt;delete id=&amp;quot;deleteUser&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;
    DELETE FROM USER WHERE USER_ID = #{userId}
  &amp;lt;/delete&amp;gt;

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Step#6: **Create MyBatisUtil.java to instantiate SqlSessionFactory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.service;

import java.io.IOException;
import java.io.Reader;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

public class MyBatisUtil 
{
 private static SqlSessionFactory factory;

 private MyBatisUtil() {
 }

 static
 {
  Reader reader = null;
  try {
   reader = Resources.getResourceAsReader(&amp;quot;mybatis-config.xml&amp;quot;);
  } catch (IOException e) {
   throw new RuntimeException(e.getMessage());
  }
  factory = new SqlSessionFactoryBuilder().build(reader);
 }

 public static SqlSessionFactory getSqlSessionFactory() 
 {
  return factory;
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**Step#7: **Create UserService.java in src/main/java folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo.service;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import com.sivalabs.mybatisdemo.domain.User;
import com.sivalabs.mybatisdemo.mappers.UserMapper;

public class UserService
{

 public void insertUser(User user) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  userMapper.insertUser(user);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }
 }

 public User getUserById(Integer userId) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  return userMapper.getUserById(userId);
  }finally{
   sqlSession.close();
  }
 }

 public List&amp;lt;User&amp;gt; getAllUsers() {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  return userMapper.getAllUsers();
  }finally{
   sqlSession.close();
  }
 }

 public void updateUser(User user) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  userMapper.updateUser(user);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }

 }

 public void deleteUser(Integer userId) {
  SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
  try{
  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
  userMapper.deleteUser(userId);
  sqlSession.commit();
  }finally{
   sqlSession.close();
  }

 }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#8:&lt;/strong&gt; Create a JUnit Test class to test UserService methods.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.mybatisdemo;

import java.util.List;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sivalabs.mybatisdemo.domain.User;
import com.sivalabs.mybatisdemo.service.UserService;

public class UserServiceTest 
{
 private static UserService userService;

 @BeforeClass
    public static void setup() 
 {
  userService = new UserService();
 }

 @AfterClass
    public static void teardown() 
 {
  userService = null;
 }

    @Test
 public void testGetUserById() 
 {
  User user = userService.getUserById(1);
  Assert.assertNotNull(user);
  System.out.println(user);
 }

    @Test
    public void testGetAllUsers() 
    {
  List&amp;lt;User&amp;gt; users = userService.getAllUsers();
  Assert.assertNotNull(users);
  for (User user : users) 
  {
   System.out.println(user);
  }

 }

    @Test
    public void testInsertUser() 
    {
     User user = new User();
     user.setEmailId(&amp;quot;test_email_&amp;quot;+System.currentTimeMillis()+&amp;quot;@gmail.com&amp;quot;);
     user.setPassword(&amp;quot;secret&amp;quot;);
     user.setFirstName(&amp;quot;TestFirstName&amp;quot;);
     user.setLastName(&amp;quot;TestLastName&amp;quot;);

     userService.insertUser(user);
  Assert.assertTrue(user.getUserId() != 0);
  User createdUser = userService.getUserById(user.getUserId());
  Assert.assertNotNull(createdUser);
  Assert.assertEquals(user.getEmailId(), createdUser.getEmailId());
  Assert.assertEquals(user.getPassword(), createdUser.getPassword());
  Assert.assertEquals(user.getFirstName(), createdUser.getFirstName());
  Assert.assertEquals(user.getLastName(), createdUser.getLastName());

 }

    @Test
    public void testUpdateUser() 
    {
     long timestamp = System.currentTimeMillis();
  User user = userService.getUserById(2);
  user.setFirstName(&amp;quot;TestFirstName&amp;quot;+timestamp);
     user.setLastName(&amp;quot;TestLastName&amp;quot;+timestamp);
     userService.updateUser(user);
  User updatedUser = userService.getUserById(2);
  Assert.assertEquals(user.getFirstName(), updatedUser.getFirstName());
  Assert.assertEquals(user.getLastName(), updatedUser.getLastName());
 }

   @Test
   public void testDeleteUser() 
   {
     User user = userService.getUserById(4);
     userService.deleteUser(user.getUserId());
  User deletedUser = userService.getUserById(4);
  Assert.assertNull(deletedUser);   

 }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>