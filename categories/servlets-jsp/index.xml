<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Servlets Jsp on SivaLabs</title>
    <link>http://sivalabs.github.io/categories/servlets-jsp/</link>
    <description>Recent content in Servlets Jsp on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2011 06:43:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/categories/servlets-jsp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CustomTag to generate  and  tags with absolute path</title>
      <link>http://sivalabs.github.io/post/2011/customtag-to-generate-and-tags-with-absolute-path/</link>
      <pubDate>Thu, 25 Aug 2011 06:43:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/customtag-to-generate-and-tags-with-absolute-path/</guid>
      <description>&lt;p&gt;Generally we write our javascript and css styles in separate file and include them in JSPs using &lt;script&gt; and &lt;style&gt; tags.
To include those resource we can use either relative URL or absolute URL.&lt;/p&gt;

&lt;p&gt;If you use absolute URL you need to include the context root name which is not a good practice.
Later if you want to change the context root name you need to update in several places.&lt;/p&gt;

&lt;p&gt;If you use relative URL you may need to prefix the path with ../ or ../../ depending on your current URL which tedious process.&lt;/p&gt;

&lt;p&gt;To get rid of this problem we can create a custom which takes absolute URL without including context root name and render the corresponding &lt;script&gt; or &lt;style&gt; tags.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.core.web.tags;

import java.io.IOException;

import javax.servlet.jsp.JspException;

import javax.servlet.jsp.tagext.TagSupport;


/**

 * @author K. Siva Prasad Reddy

 */

public class IncludeResourceTag extends TagSupport

{

    private static final long serialVersionUID = 1L;



    private String path;

    private String type;//script or style



    @Override

    public int doStartTag() throws JspException

    {

        try

        {

            String absolutePath = getAbsolutePath(pageContext);

            String text = null;

            if(&amp;quot;script&amp;quot;.equalsIgnoreCase(type)

            {

                text = &amp;quot;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;&amp;quot;+absolutePath+&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;quot;;

            }

            else if if(&amp;quot;style&amp;quot;.equalsIgnoreCase(type)

            {

                text = &amp;quot;&amp;lt;LINK href=&amp;quot;&amp;quot;+absolutePath+&amp;quot;&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;&amp;quot;;

            }

            pageContext.getOut().write(text);

        } 

        catch (IOException e)

        {

            e.printStackTrace();

        }

        return SKIP_BODY;

    }



    @Override

    public int doEndTag() throws JspException

    {       

        return EVAL_PAGE;

    }



    public String getPath()

    {

        return path;

    }

    public void setPath(String path)

    {

        this.path = path;

    }



    public String getType()

    {

        return type;

    }

    public void setType(String type)

    {

        this.type = type;

    }



    public static String getAbsolutePath(PageContext pageContext)

    {

        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();

        String contextRoot = request.getContextPath();

        String cleanPath = stripStartingChars(path, &#39;/&#39;);       

        return (contextRoot+&amp;quot;/&amp;quot;+path);

    }



    public static String stripStartingChars(String str, char c)

    {

        int len = str.length();

        for (int i = 0; i &amp;lt; len; i++)

        {

            if(str.charAt(i) != c)

            {

                return str.substring(i);

            }

        }

        return str;

    }



}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to create the TLD sivalabs.tld and put it in WEB-INF dir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;


&amp;lt;taglib xmlns=&amp;quot;http://java.sun.com/xml/ns/j2ee&amp;quot;

    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;

    xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/j2ee 

    http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&amp;quot;

    version=&amp;quot;2.0&amp;quot;&amp;gt;



    &amp;lt;description&amp;gt;A tag library for SivaLabs CustomTag handlers.&amp;lt;/description&amp;gt;

    &amp;lt;tlib-version&amp;gt;1.0&amp;lt;/tlib-version&amp;gt;

    &amp;lt;short-name&amp;gt;SivaLabsTagLibrary&amp;lt;/short-name&amp;gt;

    &amp;lt;uri&amp;gt;http://sivalabs.blogspot.com/tags&amp;lt;/uri&amp;gt;



    &amp;lt;tag&amp;gt;

        &amp;lt;description&amp;gt;Outputs the JavaScript include tag&amp;lt;/description&amp;gt;

        &amp;lt;name&amp;gt;includeResource&amp;lt;/name&amp;gt;

        &amp;lt;tag-class&amp;gt;com.sivalabs.core.web.tags.IncludeResourceTag&amp;lt;/tag-class&amp;gt;

        &amp;lt;body-content&amp;gt;empty&amp;lt;/body-content&amp;gt;

        &amp;lt;attribute&amp;gt;

            &amp;lt;name&amp;gt;path&amp;lt;/name&amp;gt;

            &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;

            &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;

        &amp;lt;/attribute&amp;gt;

        &amp;lt;attribute&amp;gt;

            &amp;lt;name&amp;gt;type&amp;lt;/name&amp;gt;

            &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;

            &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;

        &amp;lt;/attribute&amp;gt;

    &amp;lt;/tag&amp;gt;


&amp;lt;/taglib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in JSPs you can use the custom tag as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%@taglib uri=&amp;quot;http://sivalabs.blogspot.com/tags&amp;quot; prefix=&amp;quot;sl&amp;quot;%&amp;gt;


&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;

    &amp;lt;sl:includeResource type=&amp;quot;style&amp;quot; path=&amp;quot;resources/css/style.css&amp;quot;/&amp;gt;

    &amp;lt;sl:includeResource type=&amp;quot;script&amp;quot; path=&amp;quot;resources/js/util.js&amp;quot;/&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

..

..

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now You can always use absolute path irrespective of current URL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to use RequestDispatcher.forward() and response.sendRedirect()?</title>
      <link>http://sivalabs.github.io/post/2011/when-to-use-requestdispatcherforward/</link>
      <pubDate>Thu, 25 Aug 2011 06:05:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/when-to-use-requestdispatcherforward/</guid>
      <description>&lt;p&gt;Many people know about how RequestDispatcher.forward() and response.sendRedirect() works.&lt;/p&gt;

&lt;p&gt;RequestDispatcher.forward() is generally called Server side redirection and is used to forward to a resource within the same application. That resource could be a JSP or another Servlet.&lt;/p&gt;

&lt;p&gt;response.sendRedirect() is generally called as Client side redirection as it issues a new request from the browser. This method is used to redirect to another resource within the same application or to the resource in some other application running in the same web container or can redirect to any other resource running in someother web container.&lt;/p&gt;

&lt;p&gt;There is one more important thing to consider when to use forward() and sendRedirect().&lt;/p&gt;

&lt;p&gt;Suppose you are on a new customer creation form and you filled the data and sumit it to CreateCustomerServlet. In CreateCustomerServlet you get all the data entered in the form and insert a row in the database and showing status.jsp saying Customer Created successfully.&lt;/p&gt;

&lt;p&gt;Assume you use requestDispatcher.forward(&amp;ldquo;status.jsp&amp;rdquo;) to display the status page.&lt;br /&gt;
Then in the browser the URL remains as &lt;a href=&#34;http://localhost:8080/App/CreateCustomerServlet&#34;&gt;http://localhost:8080/App/CreateCustomerServlet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now if the user press Refresh(F5) button on the browser the web container starts executing the request from CreateCustomerServlet. Again it will insert another duplicate row in database and show the status page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But in CreateCustomerServlet, if you use response.sendRedirect(&amp;ldquo;status.jsp&amp;rdquo;) to show status page the browser URL will be changed to &lt;a href=&#34;http://localhost:8080/App/status.jsp&#34;&gt;http://localhost:8080/App/status.jsp&lt;/a&gt;.&lt;br /&gt;
Now if the user press F5 the container will start processing the status.jsp only. It won&amp;rsquo;t invoke CreateCustomerServlet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So if you are doing any data modifications like insertion/updation/deletion always use response.sendRedirect().&lt;/p&gt;

&lt;p&gt;If you are using Struts-1.x you can use&lt;br /&gt;
If you are using SpringMVC you can use new ModelAndView(&amp;ldquo;redirect:status&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;For further information on this visit &lt;a href=&#34;http://en.wikipedia.org/wiki/Post/Redirect/Get&#34;&gt;http://en.wikipedia.org/wiki/Post/Redirect/Get&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>