<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quartz on SivaLabs</title>
    <link>http://sivalabs.github.io/tags/quartz/</link>
    <description>Recent content in Quartz on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Oct 2011 11:44:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/tags/quartz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring and Quartz Integration Using Custom Annotation</title>
      <link>http://sivalabs.github.io/post/2011/spring-and-quartz-integration-using-custom-annotation/</link>
      <pubDate>Mon, 10 Oct 2011 11:44:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/spring-and-quartz-integration-using-custom-annotation/</guid>
      <description>&lt;p&gt;We know Spring has support for integrating with Quartz framework.&lt;br /&gt;
But as of now Spring supports only static xml declarative approach only.&lt;br /&gt;
If you want to see how to integrate Spring+Quartz you can refer &lt;a href=&#34;http://sivalabs.blogspot.com/2011/05/spring-quartz-javamail-integration.html&#34;&gt;Spring + Quartz Integration &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As part of my pet project requirement I got to schedule the Jobs dynamically and I though of following 2 options:&lt;br /&gt;
1. Using Annotations for providing Job Metada&lt;br /&gt;
2. Loading the Job Metadata from Database&lt;/p&gt;

&lt;p&gt;For now I thought of going ahead with Annotation based approach and I want to integrate it with Spring as well.&lt;br /&gt;
Here is how I did it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a Custom Annotation QuartzJob&lt;/p&gt;

&lt;p&gt;package com.sivalabs.springsamples.jobscheduler;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import java.lang.annotation.Documented;&lt;br&gt;&lt;/br&gt;import java.lang.annotation.ElementType;&lt;br&gt;&lt;/br&gt;import java.lang.annotation.Retention;&lt;br&gt;&lt;/br&gt;import java.lang.annotation.RetentionPolicy;&lt;br&gt;&lt;/br&gt;import java.lang.annotation.Target;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import org.springframework.stereotype.Component;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;@Target({ElementType.TYPE})&lt;br&gt;&lt;/br&gt;@Retention(RetentionPolicy.RUNTIME)&lt;br&gt;&lt;/br&gt;@Documented&lt;br&gt;&lt;/br&gt;@Component&lt;br&gt;&lt;/br&gt;@Scope(&amp;ldquo;prototype&amp;rdquo;)&lt;br&gt;&lt;/br&gt;public @interface QuartzJob &lt;br&gt;&lt;/br&gt;{&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; String name();&lt;br&gt;&lt;/br&gt; String group() default &amp;ldquo;DEFAULT_GROUP&amp;rdquo;;&lt;br&gt;&lt;/br&gt; String cronExp();&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an ApplicationListener to scan for all the Job implementation classes and schedule them using Quartz scheduler.&lt;/p&gt;

&lt;p&gt;package com.sivalabs.springsamples.jobscheduler;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import java.util.ArrayList;&lt;br&gt;&lt;/br&gt;import java.util.List;&lt;br&gt;&lt;/br&gt;import java.util.Map;&lt;br&gt;&lt;/br&gt;import java.util.Set;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import org.quartz.Job;&lt;br&gt;&lt;/br&gt;import org.quartz.JobDetail;&lt;br&gt;&lt;/br&gt;import org.quartz.Scheduler;&lt;br&gt;&lt;/br&gt;import org.quartz.SchedulerException;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;&lt;/br&gt;import org.springframework.context.ApplicationContext;&lt;br&gt;&lt;/br&gt;import org.springframework.context.ApplicationListener;&lt;br&gt;&lt;/br&gt;import org.springframework.context.event.ContextRefreshedEvent;&lt;br&gt;&lt;/br&gt;import org.springframework.core.annotation.AnnotationUtils;&lt;br&gt;&lt;/br&gt;import org.springframework.scheduling.quartz.CronTriggerBean;&lt;br&gt;&lt;/br&gt;import org.springframework.scheduling.quartz.JobDetailBean;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;public class QuartJobSchedulingListener &lt;br&gt;&lt;/br&gt;    implements ApplicationListener&lt;ContextRefreshedEvent&gt;&lt;br&gt;&lt;/br&gt;{ &lt;br&gt;&lt;/br&gt; @Autowired&lt;br&gt;&lt;/br&gt; private Scheduler scheduler;&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; @Override&lt;br&gt;&lt;/br&gt; public void onApplicationEvent(ContextRefreshedEvent event)&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;  try &lt;br&gt;&lt;/br&gt;  {&lt;br&gt;&lt;/br&gt;    ApplicationContext applicationContext = event.getApplicationContext();&lt;br&gt;&lt;/br&gt;    List&lt;CronTriggerBean&gt; cronTriggerBeans = this.loadCronTriggerBeans(applicationContext);&lt;br&gt;&lt;/br&gt;    this.scheduleJobs(cronTriggerBeans);&lt;br&gt;&lt;/br&gt;  } &lt;br&gt;&lt;/br&gt;  catch (Exception e) &lt;br&gt;&lt;/br&gt;  {&lt;br&gt;&lt;/br&gt;    e.printStackTrace();&lt;br&gt;&lt;/br&gt;  }&lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; private List&lt;CronTriggerBean&gt; loadCronTriggerBeans(ApplicationContext applicationContext)&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;   Map&lt;String, Object&gt; quartzJobBeans = &lt;br&gt;&lt;/br&gt;    applicationContext.getBeansWithAnnotation(QuartzJob.class);&lt;br&gt;&lt;/br&gt;  &lt;br&gt;&lt;/br&gt;   Set&lt;String&gt; beanNames = quartzJobBeans.keySet();&lt;br&gt;&lt;/br&gt;  &lt;br&gt;&lt;/br&gt;   List&lt;CronTriggerBean&gt; cronTriggerBeans = new ArrayList&lt;CronTriggerBean&gt;();&lt;br&gt;&lt;/br&gt;  &lt;br&gt;&lt;/br&gt;   for (String beanName : beanNames) &lt;br&gt;&lt;/br&gt;   {&lt;br&gt;&lt;/br&gt;     CronTriggerBean cronTriggerBean = null;&lt;br&gt;&lt;/br&gt;     Object object = quartzJobBeans.get(beanName);&lt;br&gt;&lt;/br&gt;     System.out.println(object);&lt;br&gt;&lt;/br&gt;     try &lt;br&gt;&lt;/br&gt;     {&lt;br&gt;&lt;/br&gt;      cronTriggerBean = this.buildCronTriggerBean(object);&lt;br&gt;&lt;/br&gt;     } &lt;br&gt;&lt;/br&gt;     catch (Exception e) &lt;br&gt;&lt;/br&gt;     {&lt;br&gt;&lt;/br&gt;      e.printStackTrace();&lt;br&gt;&lt;/br&gt;     }&lt;br&gt;&lt;/br&gt;   &lt;br&gt;&lt;/br&gt;     if(cronTriggerBean != null)&lt;br&gt;&lt;/br&gt;     {&lt;br&gt;&lt;/br&gt;      cronTriggerBeans.add(cronTriggerBean);&lt;br&gt;&lt;/br&gt;     }&lt;br&gt;&lt;/br&gt;   }&lt;br&gt;&lt;/br&gt;   return cronTriggerBeans;&lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; public CronTriggerBean buildCronTriggerBean(Object job) throws Exception&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;   CronTriggerBean cronTriggerBean = null;&lt;br&gt;&lt;/br&gt;   QuartzJob quartzJobAnnotation = &lt;br&gt;&lt;/br&gt;     AnnotationUtils.findAnnotation(job.getClass(), QuartzJob.class);&lt;br&gt;&lt;/br&gt;     &lt;br&gt;&lt;/br&gt;   if(Job.class.isAssignableFrom(job.getClass()))&lt;br&gt;&lt;/br&gt;   {&lt;br&gt;&lt;/br&gt;     System.out.println(&amp;ldquo;It is a Quartz Job&amp;rdquo;);&lt;br&gt;&lt;/br&gt;     cronTriggerBean = new CronTriggerBean();&lt;br&gt;&lt;/br&gt;     cronTriggerBean.setCronExpression(quartzJobAnnotation.cronExp());    &lt;br&gt;&lt;/br&gt;     cronTriggerBean.setName(quartzJobAnnotation.name()+&amp;rdquo;_trigger&amp;rdquo;);&lt;br&gt;&lt;/br&gt;     //cronTriggerBean.setGroup(quartzJobAnnotation.group());&lt;br&gt;&lt;/br&gt;     JobDetailBean jobDetail = new JobDetailBean();&lt;br&gt;&lt;/br&gt;     jobDetail.setName(quartzJobAnnotation.name());&lt;br&gt;&lt;/br&gt;     //jobDetail.setGroup(quartzJobAnnotation.group());&lt;br&gt;&lt;/br&gt;     jobDetail.setJobClass(job.getClass());&lt;br&gt;&lt;/br&gt;     cronTriggerBean.setJobDetail(jobDetail);   &lt;br&gt;&lt;/br&gt;   }&lt;br&gt;&lt;/br&gt;   else&lt;br&gt;&lt;/br&gt;   {&lt;br&gt;&lt;/br&gt;    throw new RuntimeException(job.getClass()+&amp;rdquo; doesn&amp;rsquo;t implemented &amp;ldquo;+Job.class);&lt;br&gt;&lt;/br&gt;   }&lt;br&gt;&lt;/br&gt;   return cronTriggerBean;&lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; protected void scheduleJobs(List&lt;CronTriggerBean&gt; cronTriggerBeans)&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;  for (CronTriggerBean cronTriggerBean : cronTriggerBeans) &lt;br&gt;&lt;/br&gt;  {&lt;br&gt;&lt;/br&gt;    JobDetail jobDetail = cronTriggerBean.getJobDetail();&lt;br&gt;&lt;/br&gt;    try &lt;br&gt;&lt;/br&gt;    {&lt;br&gt;&lt;/br&gt;     scheduler.scheduleJob(jobDetail, cronTriggerBean);&lt;br&gt;&lt;/br&gt;    } &lt;br&gt;&lt;/br&gt;    catch (SchedulerException e) &lt;br&gt;&lt;/br&gt;    {&lt;br&gt;&lt;/br&gt;     e.printStackTrace();&lt;br&gt;&lt;/br&gt;    }   &lt;br&gt;&lt;/br&gt;  }&lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a customized JobFactory to use Spring beans as Job implementation objects.&lt;/p&gt;

&lt;p&gt;package com.sivalabs.springsamples.jobscheduler;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import org.quartz.Job;&lt;br&gt;&lt;/br&gt;import org.quartz.spi.TriggerFiredBundle;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.BeanWrapper;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.MutablePropertyValues;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.PropertyAccessorFactory;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;&lt;/br&gt;import org.springframework.context.ApplicationContext;&lt;br&gt;&lt;/br&gt;import org.springframework.scheduling.quartz.SpringBeanJobFactory;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;public class SpringQuartzJobFactory extends SpringBeanJobFactory&lt;br&gt;&lt;/br&gt;{&lt;br&gt;&lt;/br&gt; @Autowired&lt;br&gt;&lt;/br&gt; private ApplicationContext ctx;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt; @Override&lt;br&gt;&lt;/br&gt; protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;     @SuppressWarnings(&amp;ldquo;unchecked&amp;rdquo;)&lt;br&gt;&lt;/br&gt;  Job job = ctx.getBean(bundle.getJobDetail().getJobClass());&lt;br&gt;&lt;/br&gt;     BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);&lt;br&gt;&lt;/br&gt;     MutablePropertyValues pvs = new MutablePropertyValues();&lt;br&gt;&lt;/br&gt;     pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());&lt;br&gt;&lt;/br&gt;     pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());&lt;br&gt;&lt;/br&gt;     bw.setPropertyValues(pvs, true);&lt;br&gt;&lt;/br&gt;     return job;&lt;br&gt;&lt;/br&gt; } &lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the Job implementation classes and Annotate them using @QuartzJob&lt;/p&gt;

&lt;p&gt;package com.sivalabs.springsamples.jobscheduler;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import java.util.Date;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import org.quartz.JobExecutionContext;&lt;br&gt;&lt;/br&gt;import org.quartz.JobExecutionException;&lt;br&gt;&lt;/br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;&lt;/br&gt;import org.springframework.scheduling.quartz.QuartzJobBean;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;@QuartzJob(name=&amp;ldquo;HelloJob&amp;rdquo;, cronExp=&amp;ldquo;0/5 * * * * ?&amp;ldquo;)&lt;br&gt;&lt;/br&gt;public class HelloJob extends QuartzJobBean&lt;br&gt;&lt;/br&gt;{  &lt;br&gt;&lt;/br&gt; @Override&lt;br&gt;&lt;/br&gt; protected void executeInternal(JobExecutionContext context)&lt;br&gt;&lt;/br&gt;   throws JobExecutionException&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;  System.out.println(&amp;ldquo;Hello Job is running @ &amp;ldquo;+new Date());&lt;br&gt;&lt;/br&gt;  System.out.println(this.hashCode());  &lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the SchedulerFactoryBean and QuartJobSchedulingListener in applicationContext.xml&lt;/p&gt;

&lt;p&gt;&lt;beans&gt;&lt;br&gt;&lt;/br&gt; &lt;a href=&#34;context:annotation-config&#34;&gt;context:annotation-config&lt;/a&gt;&lt;a href=&#34;http://sivalabs.github.io/context:annotation-config&#34;&gt;/context:annotation-config&lt;/a&gt;&lt;br&gt;&lt;/br&gt; &lt;context:component-scan base-package=&#34;com.sivalabs&#34;&gt;&lt;a href=&#34;http://sivalabs.github.io/context:component-scan&#34;&gt;/context:component-scan&lt;/a&gt;&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt; &lt;bean&gt;&lt;/bean&gt;&lt;br&gt;&lt;/br&gt; &lt;bean&gt;&lt;br&gt;&lt;/br&gt;  &lt;property name=&#34;jobFactory&#34;&gt;&lt;br&gt;&lt;/br&gt;   &lt;bean&gt;&lt;/bean&gt;&lt;br&gt;&lt;/br&gt;  &lt;/property&gt;&lt;br&gt;&lt;/br&gt; &lt;/bean&gt;&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;&lt;/beans&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test Client&lt;/p&gt;

&lt;p&gt;package com.sivalabs.springsamples;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import org.quartz.Job;&lt;br&gt;&lt;/br&gt;import org.springframework.context.ApplicationContext;&lt;br&gt;&lt;/br&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;import com.sivalabs.springsamples.jobscheduler.HowAreYouJob;&lt;br&gt;&lt;/br&gt;import com.sivalabs.springsamples.jobscheduler.InvalidJob;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;public class TestClient&lt;br&gt;&lt;/br&gt;{&lt;br&gt;&lt;/br&gt; public static void main(String[] args)&lt;br&gt;&lt;/br&gt; {&lt;br&gt;&lt;/br&gt;  ApplicationContext context = new ClassPathXmlApplicationContext(&amp;ldquo;applicationContext.xml&amp;rdquo;);&lt;br&gt;&lt;/br&gt;  System.out.println(context);  &lt;br&gt;&lt;/br&gt; }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Spring &#43; Quartz &#43; JavaMail Integration Tutorial</title>
      <link>http://sivalabs.github.io/post/2011/spring-quartz-javamail-integration-tutorial/</link>
      <pubDate>Mon, 30 May 2011 14:57:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/spring-quartz-javamail-integration-tutorial/</guid>
      <description>&lt;p&gt;Quartz is a job scheduling framework which is used to schedule the jobs to be executed on the specified time schedule.&lt;br /&gt;
JavaMail is an API to send/recieve emails from Java Applications.&lt;/p&gt;

&lt;p&gt;Spring has integration points to integrate Quartz and JavaMail which makes easy to use those APIs.&lt;/p&gt;

&lt;p&gt;Lets create a small demo application to show how to integrate Spring + Quartz + JavaMail.&lt;/p&gt;

&lt;p&gt;Our application is to send birthday wishes emails to friends everyday at 6 AM.&lt;/p&gt;

&lt;p&gt;** Email.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Email &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String[] bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;Attachment&amp;gt; attachments = new ArrayList&amp;lt;Attachment&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFrom()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFrom(String from)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.from = from;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getTo()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setTo(String... to)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.to = to;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getCc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setCc(String... cc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.cc = cc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String[] getBcc()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setBcc(String... bcc)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.bcc = bcc;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getSubject()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setSubject(String subject)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.subject = subject;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getText()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setText(String text)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.text = text;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public List&amp;lt;Attachment&amp;gt; getAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return attachments;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachments(List&amp;lt;Attachment&amp;gt; attachments)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.addAll(attachments);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void addAttachment(Attachment attachment)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.add(attachment);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAttachment(int index)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.remove(index);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void removeAllAttachments()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.attachments.clear();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** Attachment.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Attachment&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private byte[] data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private boolean inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment(byte[] data, String filename, String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Attachment(byte[] data, String filename, String mimeType, boolean inline)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.inline = inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public byte[] getData()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setData(byte[] data)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.data = data;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getFilename()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setFilename(String filename)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.filename = filename;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public String getMimeType()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMimeType(String mimeType)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mimeType = mimeType;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public boolean isInline()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setInline(boolean inline)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.inline = inline;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** EmailService.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.activation.DataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.MessagingException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.internet.MimeMessage;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.util.ByteArrayDataSource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.mail.javamail.JavaMailSenderImpl;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.mail.javamail.MimeMessageHelper;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EmailService &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private JavaMailSenderImpl mailSender = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setMailSender(JavaMailSenderImpl mailSender)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.mailSender = mailSender;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void sendEmail(Email email) throws MessagingException {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  MimeMessage mimeMessage = mailSender.createMimeMessage();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  // use the true flag to indicate you need a multipart message&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  boolean hasAttachments = (email.getAttachments()!=null &amp;amp;&amp;amp; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         email.getAttachments().size() &amp;gt; 0 );&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, hasAttachments);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setTo(email.getTo());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setFrom(email.getFrom());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setSubject(email.getSubject());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  helper.setText(email.getText(), true);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;Attachment&amp;gt; attachments = email.getAttachments();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     if(attachments != null &amp;amp;&amp;amp; attachments.size() &amp;gt; 0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      for (Attachment attachment : attachments) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          String filename = attachment.getFilename() ;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          DataSource dataSource = new ByteArrayDataSource(attachment.getData(), &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                 attachment.getMimeType());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          if(attachment.isInline())&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           helper.addInline(filename, dataSource);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          }else{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           helper.addAttachment(filename, dataSource);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  mailSender.send(mimeMessage);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** BirthdayWisherJob.java**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.io.InputStream;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.ArrayList;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.Date;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.List;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.mail.MessagingException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.quartz.JobExecutionContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.quartz.JobExecutionException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.core.io.ClassPathResource;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.scheduling.quartz.QuartzJobBean;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class BirthdayWisherJob extends QuartzJobBean&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private EmailService emailService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public void setEmailService(EmailService emailService)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.emailService = emailService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; protected void executeInternal(JobExecutionContext context) throws JobExecutionException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(&amp;quot;Sending Birthday Wishes... &amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; usersBornToday = getUsersBornToday();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  for (User user : usersBornToday) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   try &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    Email email = new Email();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setFrom(&amp;quot;admin@sivalabs.com&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setSubject(&amp;quot;Happy BirthDay&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setTo(user.getEmail());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.setText(&amp;quot;&amp;lt;h1&amp;gt;Dear &amp;quot;+user.getName()+&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;quot;, &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;Many Many Happy Returns of the day :-)&amp;lt;/h1&amp;gt;&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    byte[] data = null;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    ClassPathResource img = new ClassPathResource(&amp;quot;HBD.gif&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    InputStream inputStream = img.getInputStream();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    data = new byte[inputStream.available()];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    while((inputStream.read(data)!=-1));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    Attachment attachment = new Attachment(data, &amp;quot;HappyBirthDay&amp;quot;, &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;quot;image/gif&amp;quot;, true);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    email.addAttachment(attachment);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    emailService.sendEmail(email);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   catch (MessagingException e) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    e.printStackTrace();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   catch (Exception e) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    e.printStackTrace();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private List&amp;lt;User&amp;gt; getUsersBornToday()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  List&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;User&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  User user1 = new User(&amp;quot;Siva Prasad&amp;quot;, &amp;quot;sivaprasadreddy.k@gmail.com&amp;quot;, new Date());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  users.add(user1);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  User user2 = new User(&amp;quot;John&amp;quot;, &amp;quot;abcd@gmail.com&amp;quot;, new Date());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  users.add(user2);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return users;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;applicationContext.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;beans&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;property name=&amp;quot;triggers&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;ref bean=&amp;quot;birthdayWisherCronTrigger&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobDetail&amp;quot; ref=&amp;quot;birthdayWisherJob&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;!-- run every morning at 6 AM --&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;cronExpression&amp;quot; value=&amp;quot;0/5 * * * * ?&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean name=&amp;quot;birthdayWisherJob&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobClass&amp;quot; value=&amp;quot;com.sivalabs.reminders.BirthdayWisherJob&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;jobDataAsMap&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;entry value-ref=&amp;quot;emailService&amp;quot; key=&amp;quot;emailService&amp;quot;&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/map&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property ref=&amp;quot;mailSender&amp;quot; name=&amp;quot;mailSender&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;host&amp;quot; value=&amp;quot;smtp.gmail.com&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;port&amp;quot; value=&amp;quot;465&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;protocol&amp;quot; value=&amp;quot;smtps&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;admin@gmail.com&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;*****&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;property name=&amp;quot;javaMailProperties&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.auth&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.starttls.enable&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    &amp;lt;prop key=&amp;quot;mail.smtps.debug&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   &amp;lt;/props&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/beans&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** TestClient.java **&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.reminders;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.context.ApplicationContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class TestClient {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args) &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>