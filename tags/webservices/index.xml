<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webservices on SivaLabs</title>
    <link>http://sivalabs.github.io/tags/webservices/</link>
    <description>Recent content in Webservices on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jun 2012 10:54:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/tags/webservices/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RESTEasy Tutorial Part 3 - Exception Handling</title>
      <link>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 10:54:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&lt;p&gt;RESTEasy Tutorial Series&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-1-basics.html&#34;&gt;RESTEasy Tutorial Part-1: Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-2-spring.html&#34;&gt;RESTEasy Tutorial Part-2: Spring Integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-3-exception.html&#34;&gt;RESTEasy Tutorial Part 3 - Exception Handling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.&lt;/p&gt;

&lt;p&gt;But putting try-catch-finally blocks all around the code is not a good practice. We should design/code in such a way that if there is any unrecoverable error occured then the code should throw that exception and there should an exception handler to catch those exceptions and extract the error details and give a proper error response to the client with all the error details.&lt;/p&gt;

&lt;p&gt;RESTEasy provides such ExceptionHandler mechanism which simplifies the ExceptionHandling process.&lt;/p&gt;

&lt;p&gt;In this part I will show you how we can use RESTEasy&amp;rsquo;s ExceptionHandlers to handle Exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1: Create Application Specific Exceptions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916667&#34;&gt;https://gist.github.com/sivaprasadreddy/2916667&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#2: Create ExceptionHandlers by implementing ExceptionMapper interface.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916671&#34;&gt;https://gist.github.com/sivaprasadreddy/2916671&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#3: Update UserResource.getUserXMLById() method to validate user input and throw respective exceptions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916676&#34;&gt;https://gist.github.com/sivaprasadreddy/2916676&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;**Step#4: Test the UserResource.getUserXMLById() service method by issueing following requests. **&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2916687&#34;&gt;https://gist.github.com/sivaprasadreddy/2916687&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;**
**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important things to note:&lt;/strong&gt;
As Spring is creating the necessary objects we should let Spring know about @Provider classes to get them registered with RESTEasy. We can do this in two ways.&lt;/p&gt;

&lt;p&gt;a)Annotate Provider classes with @Component&lt;/p&gt;

&lt;p&gt;b)Using component-scan&amp;rsquo;s include-filter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;context:component-scan base-package=&#34;com.sivalabs.springdemo&#34;&gt;&lt;/strong&gt;
&lt;strong&gt;         &lt;context:include-filter expression=&#34;javax.ws.rs.ext.Provider&#34; type=&#34;annotation&#34;/&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;a href=&#34;http://sivalabs.github.io/context:component-scan&#34;&gt;/context:component-scan&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-2: Spring Integration</title>
      <link>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-2-spring-integration/</link>
      <pubDate>Wed, 06 Jun 2012 17:19:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-2-spring-integration/</guid>
      <description>&lt;p&gt;RESTEasy Tutorial Series&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-1-basics.html&#34;&gt;RESTEasy Tutorial Part-1: Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-2-spring.html&#34;&gt;RESTEasy Tutorial Part-2: Spring Integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-3-exception.html&#34;&gt;RESTEasy Tutorial Part 3 - Exception Handling&lt;/a&gt;
RESTEasy provides support for Spring integration which enables us to expose Spring beans as RESTful WebServices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1: Configure RESTEasy+Spring dependencies using Maven.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2915901&#34;&gt;https://gist.github.com/sivaprasadreddy/2915901&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#2: Configure RESTEasy+Spring in web.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; version=&amp;quot;3.0&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemalocation=&amp;quot;http://java.sun.com/xml/ns/javaee 
        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot; id=&amp;quot;WebApp_ID&amp;quot;&amp;gt;

   &amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;
  &amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;org.jboss.resteasy.plugins.spring.SpringContextLoaderListener&amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;
  &amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;Resteasy&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&amp;lt;/servlet-class&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;Resteasy&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/rest/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;
  &amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;classpath:applicationContext.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;
  &amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;resteasy.servlet.mapping.prefix&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;/rest&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;

  &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;resteasy.scan&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
    &amp;lt;/context-param&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step#3: Create a Spring Service class UserService and update UserResource to use UserService bean.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2915642&#34;&gt;https://gist.github.com/sivaprasadreddy/2915642&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#4: Same JUnit TestCase to test the REST Webservice described in Part-1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882422&#34;&gt;https://gist.github.com/sivaprasadreddy/2882422&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Things to Keep in mind:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap Listener should be registered before any other listener.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should configure resteasy.servlet.mapping.prefix &lt;context-param&gt; if the HttpServletDispatcher servlet url-pattern is anything other than /*&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3. While using Spring integration set &lt;strong&gt;resteasy.scan&lt;/strong&gt; to &lt;strong&gt;_false _&lt;/strong&gt;or don&amp;rsquo;t configure &lt;strong&gt;resteasy.scan&lt;/strong&gt; parameter at all.
Otherwise you may get REST Resource instances(UserResource) from RestEasy instead of Spring container. While running JUnit Tests I observed this random behavior.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should register REST Resource as Spring bean by annotating with @Component or @Service.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-1: Basics</title>
      <link>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-1-basics/</link>
      <pubDate>Wed, 06 Jun 2012 15:37:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/resteasy-tutorial-part-1-basics/</guid>
      <description>&lt;p&gt;RESTEasy Tutorial Series&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-1-basics.html&#34;&gt;RESTEasy Tutorial Part-1: Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-2-spring.html&#34;&gt;RESTEasy Tutorial Part-2: Spring Integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sivalabs.in/2012/06/resteasy-tutorial-part-3-exception.html&#34;&gt;RESTEasy Tutorial Part 3 - Exception Handling&lt;/a&gt;
RESTEasy is a JAX-RS implementation from JBoss/RedHat and is in-built in JBoss 6 onwards.
Here I am going to show you how to develop a Simple RESTful Web Services application using RESTEasy and JBossAS7.1.1.FINAL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#1: Configure RESTEasy dependencies using Maven.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882384&#34;&gt;https://gist.github.com/sivaprasadreddy/2882384&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#2: Configure RESTEasy in web.xml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882393&#34;&gt;https://gist.github.com/sivaprasadreddy/2882393&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#3: Create User domain class, MockUserTable class to store User objects in-memory for testing purpose and UserResource class to expose CRUD operations on User as RESTful webservices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882408&#34;&gt;https://gist.github.com/sivaprasadreddy/2882408&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#6: JUnit TestCase to test the REST Webservice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2882422&#34;&gt;https://gist.github.com/sivaprasadreddy/2882422&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step#7: To test the REST service we can use the REST Client Tool. &lt;/strong&gt;
You can download REST Client Tool at &lt;a href=&#34;http://code.google.com/a/eclipselabs.org/p/restclient-tool/&#34;&gt;http://code.google.com/a/eclipselabs.org/p/restclient-tool/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Things to Keep in mind:&lt;/strong&gt;
1. org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap Listener should be registered before any other listener.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should configure &lt;strong&gt;resteasy.servlet.mapping.prefix&lt;/strong&gt; &lt;context-param&gt; if the HttpServletDispatcher servlet url-pattern is anything other than &lt;strong&gt;/&lt;/strong&gt;*
**
**&lt;/li&gt;
&lt;li&gt;Keep visiting my blog :-)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>JAX-WS WSI Authentication using UserName &amp; Password Security Headers</title>
      <link>http://sivalabs.github.io/post/2012/jax-ws-wsi-authentication-using-username-password-security-headers/</link>
      <pubDate>Mon, 30 Apr 2012 05:51:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2012/jax-ws-wsi-authentication-using-username-password-security-headers/</guid>
      <description>&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2555700&#34;&gt;https://gist.github.com/sivaprasadreddy/2555700&lt;/a&gt; /]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing WebServices using JDK6/JAX-WS is simple. Is it true?</title>
      <link>http://sivalabs.github.io/post/2011/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</link>
      <pubDate>Mon, 03 Oct 2011 06:53:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</guid>
      <description>&lt;p&gt;In many articles, blogs we can see how to develop WebServices using with JDK6&amp;rsquo;s JAX-WS in-built support in just 5 minutes.&lt;/p&gt;

&lt;p&gt;We can simply write a POJO and annotate it with @WebService, publish it with Endpoint.publish(&amp;hellip;) and you can see the generated wsdl by pointing your browser to &lt;a href=&#34;http://localhost:8080/JAXWS/helloService?wsdl&#34;&gt;http://localhost:8080/JAXWS/helloService?wsdl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Immediately we can write a client and call helloPort.sayHello(&amp;ldquo;siva&amp;rdquo;) and you will get &amp;ldquo;Hello Siva!!!&amp;rdquo; response from your HelloWebService.&lt;/p&gt;

&lt;p&gt;In the first look it feels like developing web services is very simple using JDK6&amp;rsquo;s in-built JAX-WS support.&lt;/p&gt;

&lt;p&gt;With that confidence immediately I thought of writing a bit more complex WebService and deploy it on Tomcat.&lt;/p&gt;

&lt;p&gt;As we can find number of articles on how to develop/deploy JAX-WS webservices on Tomcat Server, I started writing my next ABitComplexService and deployed on Tomcat and saw the generated WSDL file.&lt;/p&gt;

&lt;p&gt;Then I generated client stubs using wsimport and invoked webservice methods and it worked fine&amp;hellip; :-)&lt;/p&gt;

&lt;p&gt;Then I though of invoking the webservice from a simple web project and put the client code in a new Web web project and and call the web service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now the show begins :-)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then I got an opportunity to know what is JDK&amp;rsquo;s endorsed directory, how App Servers have their specific endorsed directories etc etc.&lt;/p&gt;

&lt;p&gt;I got weird errors like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exception in thread &amp;ldquo;main&amp;rdquo; javax.xml.ws.soap.SOAPFaultException: javax.xml.ws.WebFault.messageName()Ljava/lang/String;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;java.lang.ClassCastException: com.sun.xml.bind.v2.runtime.JAXBContextImpl cannot be cast to com.sun.xml.bind.api.JAXBRIContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After struggling for sometime I copied jaxws-api.jar/jaxb-api.jar to endorsed directories and finally get it worked.&lt;/p&gt;

&lt;p&gt;Now I wanted to make it a bit more complicated and thought of creating another WebService and deploy on JBoss Server and call it from the first WebService deployed on Tomcat.&lt;/p&gt;

&lt;p&gt;Now I have:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. MySecondWS webservice deployed on JBoss.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2. MyFirstWS webservice deployed on Tomcat. It is a Service Provider and Consumer(for MySecondWS) as well.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;3. MyWebClient a Dynamic Web Project. Its a client for MyFirstWS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here as MyFirstWS webservice is a Service provider I have all the JAX-WS RI jars in WEB-INF/lib directory.&lt;/p&gt;

&lt;p&gt;All set and I deployed all the Apps on their servers and hit the Submit button triggering MyFirstWS webservice call().&lt;/p&gt;

&lt;p&gt;I got weird errors like NullPointerExceptions, MetadataModelExceptions etc.&lt;/p&gt;

&lt;p&gt;After some trials I have identified the pattern that if &lt;strong&gt;I invoke the client from a project which has JAXWS-RI jars in its classpath I am getting this error.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But I need to develop a WebService which is both Service Provider and Consumer&amp;hellip;&lt;br /&gt;
For the Service Producer I need to have those Jars in my classpath and at the same time to be Service Consumer I shouldn&amp;rsquo;t have those jars in my WEB-INF/lib.&lt;/p&gt;

&lt;p&gt;So what to do? Yes, I know I need some more time to Google and I can find a way how to do this as this is very common requirement. But I feel like Developing Web Services using JDK6&amp;rsquo;s JAX-WS in-build support is not as easy as Advertised(My opinion only).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anyway this weekend I understood two things:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1. Developing (Real)WebServices with JAX-WS is not that simple as advertised in the Articles/Blogs.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2. You can easily waste your week-ends by entering into Java-Jar-Hell :-)&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying JAX-WS WebService on Tomcat-6</title>
      <link>http://sivalabs.github.io/post/2011/deploying-jax-ws-webservice-on-tomcat-6/</link>
      <pubDate>Fri, 30 Sep 2011 08:24:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/deploying-jax-ws-webservice-on-tomcat-6/</guid>
      <description>&lt;p&gt;Now we are going to see how to deploy JAX-WS WebService on Tomcat Server.&lt;br /&gt;
We are going to deploy The AuthenticationService developed in &lt;a href=&#34;http://sivalabs.blogspot.com/2011/09/developing-webservices-using-jax-ws.html&#34;&gt;http://sivalabs.blogspot.com/2011/09/developing-webservices-using-jax-ws.html&lt;/a&gt; on apache-tomcat-6.0.32.&lt;/p&gt;

&lt;p&gt;To deploy our AuthenticationService we need to add the following configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.web.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;web-app&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;listener&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;listener-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&amp;lt;/listener-class&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/listener&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;servlet&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;servlet-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServlet&amp;lt;/servlet-class&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/servlet&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;servlet-mapping&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;url-pattern&amp;gt;/services/AuthenticationService&amp;lt;/url-pattern&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;/servlet-mapping&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/web-app&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Create a new file WEB-INF/sun-jax-ws.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;endpoints&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  xmlns=&amp;quot;http://java.sun.com/xml/ns/jax-ws/ri/runtime&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  version=&amp;quot;2.0&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;endpoint&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      name=&amp;quot;AuthenticationService&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      implementation=&amp;quot;com.sivalabs.caas.services.AuthenticationServiceImpl&amp;quot;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      url-pattern=&amp;quot;/services/AuthenticationService&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/endpoints&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3. Download the JAX-WS Reference Implementation from &lt;a href=&#34;http://jax-ws.java.net/&#34;&gt;http://jax-ws.java.net/&lt;/a&gt;&lt;br /&gt;
Copy all the jar files from jaxws-ri/lib folder to WEB-INF/lib.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now deploy the application on Tomcat server.&lt;br /&gt;
You don&amp;rsquo;t need to publish the Service by our-self as we did using EndpointPublisher.&lt;br /&gt;
Once the tomcat is up and running see the generated wsdl at &lt;a href=&#34;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&#34;&gt;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now if you test the AuthenticationService using standalone client it will work fine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void testAuthenticationService()throws Exception&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  URL wsdlUrl = new URL(&amp;quot;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  QName qName = new QName(&amp;quot;http://sivalabs.blogspot.com/services/AuthenticationService&amp;quot;, &amp;quot;AuthenticationService&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Service service = Service.create(wsdlUrl,qName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationService port = service.getPort(AuthenticationService.class);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Credentials credentials=new Credentials();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setUserName(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setPassword(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationStatus authenticationStatus = port.authenticate(credentials);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(authenticationStatus.getStatusMessage());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;But if you try to test with the wsimport tool generated client code make sure that you dont have jax-ws-ri jars in Client classpath.&lt;/strong&gt;&lt;br /&gt;
Otherwise you will get the below error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.NoSuchMethodError: javax.xml.ws.WebFault.messageName()Ljava/lang/String;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; at com.sun.xml.ws.model.RuntimeModeler.processExceptions(RuntimeModeler.java:1162)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; at com.sun.xml.ws.model.RuntimeModeler.processDocWrappedMethod(RuntimeModeler.java:898)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Developing WebServices using JAX-WS</title>
      <link>http://sivalabs.github.io/post/2011/developing-webservices-using-jax-ws/</link>
      <pubDate>Thu, 29 Sep 2011 17:55:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2011/developing-webservices-using-jax-ws/</guid>
      <description>&lt;p&gt;Let us assume an enterprise is maintaining user authentication details in a centralized system. We need to create an AuthenticationService which will take credentials, validate them and return the status. The rest of the applications will use the AuthenticationService to authenticate the Users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create AuthenticationService interface as follows:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.caas.services;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.jws.WebService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.AuthenticationStatus;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.Credentials;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.exceptions.AuthenticationServiceException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;@WebService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public interface AuthenticationService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public AuthenticationStatus authenticate(Credentials credentials) throws AuthenticationServiceException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;






package com.sivalabs.caas.domain;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;/**&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; * @author siva&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; *&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; */&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class Credentials &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String userName;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String password;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Credentials() &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public Credentials(String userName, String password) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  super();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.userName = userName;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  this.password = password;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; //setters and getters&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;





package com.sivalabs.caas.domain;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;/**&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; * @author siva&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; *&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; */&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class AuthenticationStatus&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private String statusMessage;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private boolean success;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; //setters and getters&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;





package com.sivalabs.caas.exceptions;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;/**&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; * @author siva&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; *&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; */&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class AuthenticationServiceException extends RuntimeException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private static final long serialVersionUID = 1L;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public AuthenticationServiceException()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public AuthenticationServiceException(String msg)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  super(msg);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Now let us implement the AuthenticationService.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.caas.services;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.HashMap;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.util.Map;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.jws.WebService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.AuthenticationStatus;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.Credentials;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.exceptions.AuthenticationServiceException;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;/**&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; * @author siva&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; *&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; */&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;@WebService(endpointInterface=&amp;quot;com.sivalabs.caas.services.AuthenticationService&amp;quot;,&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   serviceName=&amp;quot;AuthenticationService&amp;quot;, &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   targetNamespace=&amp;quot;http://sivalabs.blogspot.com/services/AuthenticationService&amp;quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class AuthenticationServiceImpl implements AuthenticationService&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; private static final Map&amp;lt;string, string&amp;gt; CREDENTIALS = new HashMap&amp;lt;string, string&amp;gt;();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; static&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  CREDENTIALS.put(&amp;quot;admin&amp;quot;, &amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  CREDENTIALS.put(&amp;quot;test&amp;quot;, &amp;quot;test&amp;quot;);  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; @Override&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public AuthenticationStatus authenticate(Credentials credentials) throws AuthenticationServiceException&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(credentials == null)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   throw new AuthenticationServiceException(&amp;quot;Credentials is null&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationStatus authenticationStatus = new AuthenticationStatus();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String userName = credentials.getUserName();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  String password = credentials.getPassword();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  if(userName==null || userName.trim().length()==0 || password==null || password.trim().length()==0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   authenticationStatus.setStatusMessage(&amp;quot;UserName and Password should not be blank&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   authenticationStatus.setSuccess(false);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  else&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   if(CREDENTIALS.containsKey(userName) &amp;amp;&amp;amp; password.equals(CREDENTIALS.get(userName)))&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    authenticationStatus.setStatusMessage(&amp;quot;Valid UserName and Password&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    authenticationStatus.setSuccess(true);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   else&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    authenticationStatus.setStatusMessage(&amp;quot;Invalid UserName and Password&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    authenticationStatus.setSuccess(false);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return authenticationStatus;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here for simplicity we are checking the credentials against the static data stored in HashMap. In real applications this check will be done against database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we are going to publish the WebService.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.caas.publisher;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.xml.ws.Endpoint;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.services.AuthenticationServiceImpl;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class EndpointPublisher&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Endpoint.publish(&amp;quot;http://localhost:8080/CAAS/services/AuthenticationService&amp;quot;, new AuthenticationServiceImpl());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this standalone class to publish the AuthenticationService.&lt;/p&gt;

&lt;p&gt;To check whether the Service published successfully point the browser to URL &lt;a href=&#34;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&#34;&gt;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&lt;/a&gt;. If the service published successfully you will see the WSDL content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let us create a Standalone test client to test the webservice.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.sivalabs.caas.client;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import java.net.URL;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.xml.namespace.QName;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import javax.xml.ws.Service;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.AuthenticationStatus;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.domain.Credentials;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;import com.sivalabs.caas.services.AuthenticationService;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;/**&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; * @author siva&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; *&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; */&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public class StandaloneClient&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public static void main(String[] args) throws Exception&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  URL wsdlUrl = new URL(&amp;quot;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  QName qName = new QName(&amp;quot;http://sivalabs.blogspot.com/services/AuthenticationService&amp;quot;, &amp;quot;AuthenticationService&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Service service = Service.create(wsdlUrl,qName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationService port = service.getPort(AuthenticationService.class);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Credentials credentials=new Credentials();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setUserName(&amp;quot;admin1&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setPassword(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationStatus authenticationStatus = port.authenticate(credentials);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(authenticationStatus.getStatusMessage());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setUserName(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setPassword(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  authenticationStatus = port.authenticate(credentials);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(authenticationStatus.getStatusMessage());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Instead of writing StandaloneClient by our-self we can generate the Client using wsimport commandline tool.&lt;/strong&gt;&lt;br /&gt;
wsimport tool is there in JDK/bin directory.&lt;br /&gt;
Go to your project src directory and execute the following command.&lt;br /&gt;
&lt;strong&gt;wsimport -keep -p com.sivalabs.caas.client &lt;a href=&#34;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&#34;&gt;http://localhost:8080/CAAS/services/AuthenticationService?wsdl&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will generate the following java and class files in com.sivalabs.caas.client package.&lt;/p&gt;

&lt;p&gt;Authenticate.java&lt;br /&gt;
AuthenticateResponse.java&lt;br /&gt;
AuthenticationService_Service.java&lt;br /&gt;
AuthenticationService.java&lt;br /&gt;
AuthenticationServiceException_Exception.java&lt;br /&gt;
AuthenticationServiceException.java&lt;br /&gt;
AuthenticationStatus.java&lt;br /&gt;
Credentials.java&lt;br /&gt;
ObjectFactory.java&lt;br /&gt;
package-info.java&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you can use the generated Java files to test the Service.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void main(String[] args) throws Exception&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  AuthenticationService_Service service = new AuthenticationService_Service();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  com.sivalabs.caas.client.AuthenticationService authenticationServiceImplPort = service.getAuthenticationServiceImplPort();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  com.sivalabs.caas.client.Credentials credentials = new com.sivalabs.caas.client.Credentials();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setUserName(&amp;quot;admin1&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setPassword(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  com.sivalabs.caas.client.AuthenticationStatus authenticationStatus = authenticationServiceImplPort.authenticate(credentials);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(authenticationStatus.getStatusMessage());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setUserName(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  credentials.setPassword(&amp;quot;admin&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  authenticationStatus = authenticationServiceImplPort.authenticate(credentials);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  System.out.println(authenticationStatus.getStatusMessage());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In next article I will show how to deploy this AuthenticationService in Tomcat.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>