<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webservices on SivaLabs</title>
    <link>https://sivalabs.github.io/tags/webservices/</link>
    <description>Recent content in Webservices on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jun 2012 05:24:00 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/tags/webservices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RESTEasy Tutorial Part 3 â€“ Exception Handling</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 05:24:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-2: Spring Integration</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</link>
      <pubDate>Wed, 06 Jun 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy provides support for Spring integration which enables us to expose Spring beans as RESTful WebServices.
Step#1: Configure RESTEasy+Spring dependencies using Maven.
 Step#2: Configure RESTEasy+Spring in web.xml
&amp;lt;web-app xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34; xmlns:web=&#34;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34; xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&#34; id=&#34;WebApp_ID&#34; version=&#34;3.0&#34; &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&amp;lt;/listener-class &amp;lt;/listener &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.spring.SpringContextLoaderListener&amp;lt;/listener-class &amp;lt;/listener &amp;lt;servlet &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;servlet-classorg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&amp;lt;/servlet-class &amp;lt;/servlet &amp;lt;servlet-mapping &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;url-pattern/rest/*&amp;lt;/url-pattern &amp;lt;/servlet-mapping &amp;lt;context-param contextConfigLocation&amp;lt;/param-name classpath:applicationContext.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-1: Basics</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</link>
      <pubDate>Wed, 06 Jun 2012 10:07:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy is a JAX-RS implementation from JBoss/RedHat and is in-built in JBoss 6 onwards.
Here I am going to show you how to develop a Simple RESTful Web Services application using RESTEasy and JBossAS7.1.1.FINAL.
Step#1: Configure RESTEasy dependencies using Maven.
 Step#2: Configure RESTEasy in web.xml
 Step#3: Create User domain class, MockUserTable class to store User objects in-memory for testing purpose and UserResource class to expose CRUD operations on User as RESTful webservices.</description>
    </item>
    
    <item>
      <title>JAX-WS WSI Authentication using UserName &amp; Password Security Headers</title>
      <link>https://sivalabs.github.io/2012/04/jax-ws-wsi-authentication-using-username-password-security-headers/</link>
      <pubDate>Mon, 30 Apr 2012 00:21:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/jax-ws-wsi-authentication-using-username-password-security-headers/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Developing WebServices using JDK6/JAX-WS is simple. Is it true?</title>
      <link>https://sivalabs.github.io/2011/10/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</link>
      <pubDate>Mon, 03 Oct 2011 01:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/10/developing-webservices-using-jdk6jax-ws-is-simple-is-it-true/</guid>
      <description>In many articles, blogs we can see how to develop WebServices using with JDK6&amp;#8217;s JAX-WS in-built support in just 5 minutes.
We can simply write a POJO and annotate it with @WebService, publish it with Endpoint.publish(&amp;#8230;) and you can see the generated wsdl by pointing your browser to http://localhost:8080/JAXWS/helloService?wsdl.
Immediately we can write a client and call helloPort.sayHello(&amp;#8220;siva&amp;#8221;) and you will get &amp;#8220;Hello Siva!!!&amp;#8221; response from your HelloWebService.
In the first look it feels like developing web services is very simple using JDK6&amp;#8217;s in-built JAX-WS support.</description>
    </item>
    
    <item>
      <title>Deploying JAX-WS WebService on Tomcat-6</title>
      <link>https://sivalabs.github.io/2011/09/deploying-jax-ws-webservice-on-tomcat-6/</link>
      <pubDate>Fri, 30 Sep 2011 02:54:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/09/deploying-jax-ws-webservice-on-tomcat-6/</guid>
      <description>Now we are going to see how to deploy JAX-WS WebService on Tomcat Server.
We are going to deploy The AuthenticationService developed in http://sivalabs.blogspot.com/2011/09/developing-webservices-using-jax-ws.html on apache-tomcat-6.0.32.
To deploy our AuthenticationService we need to add the following configuration.
1.web.xml
&amp;lt;web-app&amp;gt;
&amp;lt;listener&amp;gt;
&amp;lt;listener-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;com.sun.xml.ws.transport.http.servlet.WSServlet&amp;lt;/servlet-class&amp;gt;
&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
&amp;lt;servlet-name&amp;gt;authenticationService&amp;lt;/servlet-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/services/AuthenticationService&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;  2. Create a new file WEB-INF/sun-jax-ws.xml
&amp;lt;?xml&amp;nbsp;version=&#34;1.0&#34;&amp;nbsp;encoding=&#34;UTF-8&#34;?&amp;gt;
&amp;lt;endpoints
&amp;nbsp;&amp;nbsp;xmlns=&#34;http://java.sun.com/xml/ns/jax-ws/ri/runtime&#34;
&amp;nbsp;&amp;nbsp;version=&#34;2.0&#34;&amp;gt;
&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;lt;endpoint
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name=&#34;AuthenticationService&#34;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation=&#34;com.sivalabs.caas.services.AuthenticationServiceImpl&#34;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;url-pattern=&#34;/services/AuthenticationService&#34;/&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;lt;/endpoints&amp;gt;</description>
    </item>
    
    <item>
      <title>Developing WebServices using JAX-WS</title>
      <link>https://sivalabs.github.io/2011/09/developing-webservices-using-jax-ws/</link>
      <pubDate>Thu, 29 Sep 2011 12:25:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/09/developing-webservices-using-jax-ws/</guid>
      <description>Let us assume an enterprise is maintaining user authentication details in a centralized system. We need to create an AuthenticationService which will take credentials, validate them and return the status. The rest of the applications will use the AuthenticationService to authenticate the Users.
Create AuthenticationService interface as follows:
package com.sivalabs.caas.services;
import javax.jws.WebService;
import com.sivalabs.caas.domain.AuthenticationStatus;
import com.sivalabs.caas.domain.Credentials;
import com.sivalabs.caas.exceptions.AuthenticationServiceException;
@WebService
public interface AuthenticationService
{
public AuthenticationStatus authenticate(Credentials credentials) throws AuthenticationServiceException;
}</description>
    </item>
    
  </channel>
</rss>