<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on SivaLabs</title>
    <link>https://sivalabs.github.io/tags/spring/</link>
    <description>Recent content in Spring on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Aug 2017 12:30:43 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Tutorials – Auto Refresh Config Changes using Spring Cloud Bus</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</link>
      <pubDate>Mon, 14 Aug 2017 12:30:43 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</guid>
      <description>Problem In the previous article Introduction to Spring Cloud Config Server we have seen how to use Spring Cloud Config Server.
But, the problem is to reload the config changes in Config Client applications we need to trigger /refresh endpoint manually. This is not practical and viable if you have large number of applications.
Solution Spring Cloud Bus module can be used to link multiple applications with a message broker and we can broadcast configuration changes.</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Introduction to Spring Cloud Config Server</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</link>
      <pubDate>Mon, 14 Aug 2017 03:35:07 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</guid>
      <description>Problem SpringBoot provides lot of flexibility in externalizing configuration properties via properties or YAML files. We can also configure properties for each environment (dev, qa, prod etc) separately using profile specific configuration files such as application.properties, application-dev.properties, application-prod.properties etc. But once the application is started we can not update the properties at runtime. If we change the properties we need to restart the application to use the updated configuration properties.</description>
    </item>
    
    <item>
      <title>My Review of Sanjay Patel’s Spring Course</title>
      <link>https://sivalabs.github.io/2016/06/my-review-of-sanjay-patels-spring-course/</link>
      <pubDate>Fri, 03 Jun 2016 01:18:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/06/my-review-of-sanjay-patels-spring-course/</guid>
      <description>Spring is the most popular Java framework for building web and enterprise applications. There are plenty of official documentation, books, and Training Courses available for Spring framework on web.
I got an opportunity to review Sanjay Patel&amp;#8216;s Spring Course Material which is divided into 3 modules.
http://www.naturalprogrammer.com/spring-tutorial/
The total course is divided into 3 modules covering various aspects of web application development using Spring/SpringBoot framework.
 Module I : Spring Framework 4 And Dependency Injection For Beginners Module II : Spring Framework for the Real World Module III : Spring Framework REST API Development  Module I: Spring Framework 4 and Dependency Injection For Beginners</description>
    </item>
    
    <item>
      <title>Retrying Method Execution using Spring AOP</title>
      <link>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</link>
      <pubDate>Tue, 05 Jan 2016 15:40:36 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</guid>
      <description>One of my blog follower sends an email asking me to show an example of &amp;#8220;RealWorld Usage of Spring AOP&amp;#8221;. He mentioned that in most of the examples the usage of Spring AOP is demonstrated for logging method entry/exit or Transaction management or Security checks. He wanted to know how Spring AOP is being used in &amp;#8220;Real Project for Real Problems&amp;#8221;.
So I would like to show how I have used Spring AOP for one of my project to handle a real problem.</description>
    </item>
    
    <item>
      <title>Selecting The Technology Stack for JCart</title>
      <link>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</link>
      <pubDate>Sun, 22 Nov 2015 05:17:20 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</guid>
      <description>Selecting the right technology stack is very crucial and plays an important role in project success. Many of the architects (unknowingly??!!) try to make complex designs by trying to use all kinds of latest and greatest stuff. On the other hand some architects try to be in their comfort zone by limiting their technology stack to the technologies with which they are comfortable. Both approaches are dangerous. One should understand the business needs and pick the technologies that are necessary for project.</description>
    </item>
    
    <item>
      <title>Developing a simple e-commerce application from scratch to production using SpringBoot</title>
      <link>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</link>
      <pubDate>Fri, 20 Nov 2015 14:18:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</guid>
      <description>We can find plenty of information on any technical topic, be it Java, .NET, Python or any frameworks like Spring, Hibernate, CDI, JSF etc. You can find hundreds of well written blogs on many of these topics. For example, you can find lot of tutorials on how to use SpringBoot or how to use various mappings in JPA/Hibernate or how to do form validations in JSF etc. Also, there are plenty of books published by well established publishers on most of the technologies.</description>
    </item>
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?
I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club.</description>
    </item>
    
    <item>
      <title>SpringBoot: Introducing SpringBoot</title>
      <link>https://sivalabs.github.io/2014/07/springboot-introducing-springboot/</link>
      <pubDate>Wed, 02 Jul 2014 00:03:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2014/07/springboot-introducing-springboot/</guid>
      <description>SpringBoot&amp;#8230;there is a lot of buzz about SpringBoot nowadays. So what is SpringBoot?
 SpringBoot is a new spring portfolio project which takes opinionated view of building production-ready Spring applications by drastically reducing the amount of configuration required. Spring Boot is taking the convention over configuration style to the next level by registering the default configurations automatically based on the classpath libraries available at runtime.
 Well.. you might have already read this kind of introduction to SpringBoot on many blogs.</description>
    </item>
    
    <item>
      <title>Book Review: Enterprise Application Development with Ext JS and Spring</title>
      <link>https://sivalabs.github.io/2014/02/book-review-enterprise-application-development-with-ext-js-and-spring/</link>
      <pubDate>Tue, 11 Feb 2014 00:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2014/02/book-review-enterprise-application-development-with-ext-js-and-spring/</guid>
      <description>I was asked to review &amp;#8220;Enterprise Application Development with Ext JS and Spring&amp;#8221; book by Packtpub guys and here is my review on the book. Actually now I am working on a project which is being developed using ExtJS and I thought of buying this book. But surprisingly on the very next day I was asked to review this book and gave me the ebook :-).
  Book WebSite URL:&amp;nbsp;http://www.</description>
    </item>
    
    <item>
      <title>Deploying BroadleafCommerce 2.0 on JBoss AS 7</title>
      <link>https://sivalabs.github.io/2013/05/deploying-broadleafcommerce-20-on-jboss/</link>
      <pubDate>Mon, 27 May 2013 11:40:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2013/05/deploying-broadleafcommerce-20-on-jboss/</guid>
      <description>First 2 steps are not really related to Broadleaf specific, but mentioned to make it easy to follow(copy/paste) the steps.
**Step#1: Configure DataSources in JBoss AS. **
**
**
&amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafDS&#34; pool-name=&#34;BroadleafDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;true&#34; use-ccm=&#34;true&#34;&amp;gt; &amp;lt;connection-url&amp;gt;jdbc:mysql://localhost:3306/broadleaf&amp;lt;/connection-url&amp;gt; &amp;lt;driver&amp;gt;mysql&amp;lt;/driver&amp;gt; &amp;lt;security&amp;gt; &amp;lt;user-name&amp;gt;root&amp;lt;/user-name&amp;gt; &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;timeout&amp;gt; &amp;lt;idle-timeout-minutes&amp;gt;0&amp;lt;/idle-timeout-minutes&amp;gt; &amp;lt;query-timeout&amp;gt;600&amp;lt;/query-timeout&amp;gt; &amp;lt;/timeout&amp;gt; &amp;lt;/datasource&amp;gt; &amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafSecureDS&#34; pool-name=&#34;BroadleafSecureDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;true&#34; use-ccm=&#34;true&#34;&amp;gt; &amp;lt;connection-url&amp;gt;jdbc:mysql://localhost:3306/broadleaf&amp;lt;/connection-url&amp;gt; &amp;lt;driver&amp;gt;mysql&amp;lt;/driver&amp;gt; &amp;lt;security&amp;gt; &amp;lt;user-name&amp;gt;root&amp;lt;/user-name&amp;gt; &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;timeout&amp;gt; &amp;lt;idle-timeout-minutes&amp;gt;0&amp;lt;/idle-timeout-minutes&amp;gt; &amp;lt;query-timeout&amp;gt;600&amp;lt;/query-timeout&amp;gt; &amp;lt;/timeout&amp;gt; &amp;lt;/datasource&amp;gt; &amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafCmsDS&#34; pool-name=&#34;BroadleafCmsDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;</description>
    </item>
    
    <item>
      <title>A bunch of Maven Archetypes for Spring based Projects</title>
      <link>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</link>
      <pubDate>Mon, 29 Oct 2012 12:18:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</guid>
      <description>Maven is a good project management tool which&amp;nbsp;greatly&amp;nbsp;reduces the amount of time we spend on creating java projects with proper structure.&amp;nbsp;With so many&amp;nbsp;predefined&amp;nbsp;maven archetypes it is even easier to create projects by simply selecting the archetype based on the technologies we need and type(jar/war/ear) of project we want to create.
However sometimes those predefined archetypes structure may not suite well for our needs or we may need some more additions to the pre-configured dependencies/frameworks etc.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial : Part4 – Spring Integration</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</link>
      <pubDate>Wed, 24 Oct 2012 00:40:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</guid>
      <description>MyBatis Tutorial: Part1 &amp;#8211; CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 &amp;#8211; Mapping Relationships
MyBatis Tutorial : Part4 &amp;#8211; Spring Integration
MyBatis-Spring is a subproject of MyBatis and provides Spring integration support which drastically simplifies the MyBatis usage. For those who are familiar with Spring&amp;#8217;s way of Dependency Injection process, using MyBatis-Spring is a very simple.
First let us see the process of using MyBatis without Spring.</description>
    </item>
    
    <item>
      <title>Spring3&#43;JPA2&#43;JavaEE6AppServer = Confusion Over Configuration</title>
      <link>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</link>
      <pubDate>Fri, 12 Oct 2012 05:38:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</guid>
      <description>Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great. This post is not a rant on Spring Vs JavaEE6, but my experience of porting a Spring3+JPA2(Hibernate) application on JBoss AS-7.1 App Server.
My application requirement is very simple: Developing a couple of SOAP based webservices using Spring3.1 and JPA2(Hibernate) and host it on JBoss AS 7.1.
So I started creating a multi-module maven project with one jar module containing the service implementations using Spring &amp;amp; JPA and another war module which exposes those services as SOAP based webservices.</description>
    </item>
    
    <item>
      <title>How I explained Dependency Injection to My Team</title>
      <link>https://sivalabs.github.io/2012/06/how-i-explained-dependency-injection-to-my-team/</link>
      <pubDate>Tue, 19 Jun 2012 02:20:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/how-i-explained-dependency-injection-to-my-team/</guid>
      <description>Recently our company started developing a new java based web application and after some evaluation process we decided to use Spring.
But many of the team members are not aware of Spring and Dependency Injection principles.
So I was asked to give a crash course on what is Dependency Injection and basics on Spring.
Instead of telling all the theory about IOC/DI I thought of explaining with an example.
Requirement: We will get some Customer Address and we need to validate the address.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part 3 – Exception Handling</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 05:24:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-2: Spring Integration</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</link>
      <pubDate>Wed, 06 Jun 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy provides support for Spring integration which enables us to expose Spring beans as RESTful WebServices.
Step#1: Configure RESTEasy+Spring dependencies using Maven.
 Step#2: Configure RESTEasy+Spring in web.xml
&amp;lt;web-app xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34; xmlns:web=&#34;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34; xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&#34; id=&#34;WebApp_ID&#34; version=&#34;3.0&#34; &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&amp;lt;/listener-class &amp;lt;/listener &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.spring.SpringContextLoaderListener&amp;lt;/listener-class &amp;lt;/listener &amp;lt;servlet &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;servlet-classorg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&amp;lt;/servlet-class &amp;lt;/servlet &amp;lt;servlet-mapping &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;url-pattern/rest/*&amp;lt;/url-pattern &amp;lt;/servlet-mapping &amp;lt;context-param contextConfigLocation&amp;lt;/param-name classpath:applicationContext.</description>
    </item>
    
    <item>
      <title>What additional features do JavaEE6 have to move from Spring?</title>
      <link>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</link>
      <pubDate>Mon, 09 Apr 2012 16:52:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</guid>
      <description>I am a senior java developer who has to work on the technologies chosen by the application architect.
At the maximum I can express my opinion on a particular technology, I can&amp;#8217;t make/influence technology selection decision. So I don&amp;#8217;t have a choice of moving from Spring to JavaEE6 or from JavaEE6 to Spring on my official projects.
I strongly believe that as a Java developer I have to keep updated on (at least few) latest technologies.</description>
    </item>
    
    <item>
      <title>Spring and Quartz Integration Using Custom Annotation</title>
      <link>https://sivalabs.github.io/2011/10/spring-and-quartz-integration-using-custom-annotation/</link>
      <pubDate>Mon, 10 Oct 2011 11:44:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/10/spring-and-quartz-integration-using-custom-annotation/</guid>
      <description>We know Spring has support for integrating with Quartz framework.
But as of now Spring supports only static xml declarative approach only.
If you want to see how to integrate Spring+Quartz you can refer Spring + Quartz Integration .
As part of my pet project requirement I got to schedule the Jobs dynamically and I though of following 2 options:
1. Using Annotations for providing Job Metada
2. Loading the Job Metadata from Database</description>
    </item>
    
    <item>
      <title>Spring &#43; Quartz &#43; JavaMail Integration Tutorial</title>
      <link>https://sivalabs.github.io/2011/05/spring-quartz-javamail-integration-tutorial/</link>
      <pubDate>Mon, 30 May 2011 09:27:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/05/spring-quartz-javamail-integration-tutorial/</guid>
      <description>Quartz is a job scheduling framework which is used to schedule the jobs to be executed on the specified time schedule.
JavaMail is an API to send/recieve emails from Java Applications.
Spring has integration points to integrate Quartz and JavaMail which makes easy to use those APIs.
Lets create a small demo application to show how to integrate Spring + Quartz + JavaMail.
Our application is to send birthday wishes emails to friends everyday at 6 AM.</description>
    </item>
    
    <item>
      <title>SpringMVC &#43; Hibernate Error: No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here</title>
      <link>https://sivalabs.github.io/2011/05/springmvc-hibernate-error-no-hibernate-session-bound-to-thread-and-configuration-does-not-allow-creation-of-non-transactional-one-here/</link>
      <pubDate>Tue, 17 May 2011 02:14:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/05/springmvc-hibernate-error-no-hibernate-session-bound-to-thread-and-configuration-does-not-allow-creation-of-non-transactional-one-here/</guid>
      <description>While developing a web application using SpringMVC and Hibernate I got &amp;#8220;No Hibernate Session bound to thread Exception&amp;#8221; becuase of some configuration issue.
Here I am going to explain how I resolved the issue.
I used the SpringMVC/@Controller approach and configured the Web related Spring configuration in dispatcher-servlet.xml as follows:
&amp;lt;beans
&amp;lt;context:annotation-config&#34;/&amp;gt;
&amp;lt;context:component-scan base-package=&#34;com.sivalabs&#34;/&amp;gt;
&amp;lt;bean&amp;lt;/bean
&amp;lt;bean&amp;lt;/bean
&amp;lt;bean class=&#34;org.springframework.web.servlet.view.InternalResourceViewResolver&#34; p:prefix=&#34;/WEB-INF/jsp/&#34; p:suffix=&#34;.jsp&#34;&amp;lt;/bean
&amp;lt;bean id=&#34;messageSource&#34; class=&#34;org.springframework.context.support.ResourceBundleMessageSource&#34;
p:basename=&#34;Messages&#34;&amp;lt;/bean
&amp;lt;/beans
 I have configured my business serices and DAOs in applicationContext.</description>
    </item>
    
    <item>
      <title>SpringMVC HelloWorld Tutorial</title>
      <link>https://sivalabs.github.io/2011/03/springmvc-helloworld-tutorial/</link>
      <pubDate>Tue, 29 Mar 2011 02:15:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/03/springmvc-helloworld-tutorial/</guid>
      <description>Spring is a popular Application framework based on Inversion Of Control/DependencyInjection principle.
SpringMVC is a framework following MVC architecture for building web applications.
Let us see how to create simple Hello World application using SpringMVC.
Step1 :
Copy the SpringMVC dependent libraries into WEB-INF/lib folder.
You can download the latest Spring bundle at http://www.springsource.org/download
Step2:
Configure the Spring&amp;#8217;s FrontController class DispatcherServlet in web.xml.
You can configure the other spring beans (if any) in XMLs and wireup using ContextLoaderListener as follows:</description>
    </item>
    
    <item>
      <title>Spring&#43;Hibernate Application with zero XML</title>
      <link>https://sivalabs.github.io/2011/02/springhibernate-application-with-zero-xml/</link>
      <pubDate>Thu, 17 Feb 2011 17:00:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/02/springhibernate-application-with-zero-xml/</guid>
      <description>Spring framework came up with Annotation support since 2.5 version which eases the development.
Whether Annotation based approach better or XML approach is better is depends on the project and their personal preference.
Let us see how we can write a Simple Application using Spring and Hibernate using Annotations, no xml at all.
The configuration for JDBC datasource and Hibernate properties:
application.properties
################### JDBC Configuration ##########################
jdbc.driverClassName=org.hsqldb.jdbcDriver
jdbc.url=jdbc:hsqldb:file:db/SivaLabsDB;shutdown=true
jdbc.username=sa
jdbc.password=</description>
    </item>
    
    <item>
      <title>Applying IOC/DI to Method Design</title>
      <link>https://sivalabs.github.io/2011/01/applying-iocdi-to-method-design/</link>
      <pubDate>Wed, 19 Jan 2011 10:21:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/01/applying-iocdi-to-method-design/</guid>
      <description>Eventhough IOC is a generic design pattern, with Spring framework IOC/DI pattern became more popular.
We can find lot of definitions for IOC/DI over internet, but the underlying concept is same.
&amp;#8220;Instead of component is responsible for getting the required dependencies to perform a task, a container/factory should build the dependencies and inject the dependencies into the component. Then the component can perform the sole activity for which it is responsible.</description>
    </item>
    
    <item>
      <title>Aspect Oriented Programming using SpringAOP</title>
      <link>https://sivalabs.github.io/2011/01/aspect-oriented-programming-using-springaop/</link>
      <pubDate>Mon, 17 Jan 2011 18:01:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/01/aspect-oriented-programming-using-springaop/</guid>
      <description>While developing software applications for a business we do recieve the requirements either from requirements gathering team or from business analysts. In general those requirements are functional requirements which represents the activities that the business is doing. while developing software applications, apart from the functional requirements we should also consider some other points like performance, transaction management, security, logging etc. These are called non-functional requirements.
Suppose let us consider a BookStore application which is providing web access the store.</description>
    </item>
    
    <item>
      <title>Struts, Spring, Hibernate… What next?</title>
      <link>https://sivalabs.github.io/2011/01/struts-spring-hibernate-what-next/</link>
      <pubDate>Sun, 09 Jan 2011 00:16:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/01/struts-spring-hibernate-what-next/</guid>
      <description>I have started my career in 2006 as a Java Developer. Since then most of the times I was being involved in developing web applications using Servlets, JSP, Struts, IBatis and Hibernate. In late 2008 I started working with Spring and now I am a big fan of Spring.
I am pretty much interested in learning new technologies/frameworks. So i started playing with several things like Quartz, JMS, JSF,JasperReports, DWR, XStream API, JPA, JavaMail, DisplayTag, JUnit, Ant, ApachePOI, JExcel blah blah blah.</description>
    </item>
    
    <item>
      <title>Multiple DataSource configurations using Spring</title>
      <link>https://sivalabs.github.io/2010/09/multiple-datasource-configurations-using-spring/</link>
      <pubDate>Thu, 02 Sep 2010 05:00:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2010/09/multiple-datasource-configurations-using-spring/</guid>
      <description>While developing Java based applications we might frequently need to change the database properties based on the environment we are working like PRODUCTION, DEVELOPMENT OR UAT environments. In that situations the following approach will be useful and easy to configure database properties for each environment.
If we want to change the environment we just need to change the ENV property value.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
jdbc.properties</description>
    </item>
    
    <item>
      <title>What is Inversion Of Control (IOC)?</title>
      <link>https://sivalabs.github.io/2008/12/what-is-inversion-of-control-ioc/</link>
      <pubDate>Sun, 21 Dec 2008 04:39:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2008/12/what-is-inversion-of-control-ioc/</guid>
      <description>Inversion Of Control is a design pattern which suggests the creation of collaborating objects and injecting them should not be done by the dependent object itself.
For example, Suppose WhetherController(Servlet) is depend on WhetherService which is depend WhetherDAO.
WhetherController .java
class WhetherController extends HttpServlet
{ 
protected doPost(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException 
{ 
WhetherService service = new WhetherService(); 
service.doSomething(params);
….
…. 
}
}</description>
    </item>
    
  </channel>
</rss>