<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaee on SivaLabs</title>
    <link>https://sivalabs.github.io/tags/javaee/</link>
    <description>Recent content in Javaee on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2015 13:04:00 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/tags/javaee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?
I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club.</description>
    </item>
    
    <item>
      <title>Spring3&#43;JPA2&#43;JavaEE6AppServer = Confusion Over Configuration</title>
      <link>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</link>
      <pubDate>Fri, 12 Oct 2012 05:38:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</guid>
      <description>Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great. This post is not a rant on Spring Vs JavaEE6, but my experience of porting a Spring3+JPA2(Hibernate) application on JBoss AS-7.1 App Server.
My application requirement is very simple: Developing a couple of SOAP based webservices using Spring3.1 and JPA2(Hibernate) and host it on JBoss AS 7.1.
So I started creating a multi-module maven project with one jar module containing the service implementations using Spring &amp;amp; JPA and another war module which exposes those services as SOAP based webservices.</description>
    </item>
    
    <item>
      <title>Keep The Code Clean: WatchDog &amp; SpotTheBug Approach</title>
      <link>https://sivalabs.github.io/2012/08/keep-code-clean-watchdog-spotthebug/</link>
      <pubDate>Tue, 28 Aug 2012 04:55:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/08/keep-code-clean-watchdog-spotthebug/</guid>
      <description>Before going to discuss &amp;#8220;WatchDog &amp;amp; SpotTheBug Approach&amp;#8220;, let me give a brief context on what is the needs for this.
Three months back I was asked to write core infrastructure code for our new application which uses all the latest and greatest technologies.
I have written the infrastructure code and implemented 2 usecases to demonstrate which logic should go into which layer and the code looks good(atleast to me :-)).</description>
    </item>
    
    <item>
      <title>What additional features do JavaEE6 have to move from Spring?</title>
      <link>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</link>
      <pubDate>Mon, 09 Apr 2012 16:52:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/what-additional-features-do-javaee6-have-to-move-from-spring/</guid>
      <description>I am a senior java developer who has to work on the technologies chosen by the application architect.
At the maximum I can express my opinion on a particular technology, I can&amp;#8217;t make/influence technology selection decision. So I don&amp;#8217;t have a choice of moving from Spring to JavaEE6 or from JavaEE6 to Spring on my official projects.
I strongly believe that as a Java developer I have to keep updated on (at least few) latest technologies.</description>
    </item>
    
  </channel>
</rss>