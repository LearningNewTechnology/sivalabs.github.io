<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on SivaLabs</title>
    <link>http://sivalabs.github.io/tags/angularjs/</link>
    <description>Recent content in Angularjs on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Oct 2014 08:17:00 +0000</lastBuildDate>
    <atom:link href="http://sivalabs.github.io/tags/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RIP AngularJS! Oh Sorry, RIP $scope, ng-controller, DDO, jqLite and whatever you like in AngularJS</title>
      <link>http://sivalabs.github.io/post/2014/rip-angularjs-oh-sorry-rip-scope-ng-controller-ddo-jqlite-and-whatever-you-like-in-angularjs/</link>
      <pubDate>Wed, 29 Oct 2014 08:17:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2014/rip-angularjs-oh-sorry-rip-scope-ng-controller-ddo-jqlite-and-whatever-you-like-in-angularjs/</guid>
      <description>&lt;p&gt;I am  Software Developer, specifically Java Developer, spending most of the time writing back-end part of the applications. I can write basic HTML/JavaScript/CSS stuff to get the things done when needed. I didn&amp;rsquo;t have much passion on HTML/JavaScript and neither I am good at web development. I just has good enough knowledge to get the front-end work done for my requirements. Whenever I find sometime I tried to experiment with some cool back-end technologies like SpringBoot or JavaEE7, I never spend my weekends learning any front-end technologies.&lt;/p&gt;

&lt;blockquote&gt;When I had to develop UI for my projects I preferred PrimeFaces or SpringMVC/Bootstrap and get it done. **But this situation got changed when I found AngularJS**!!&lt;/blockquote&gt;

&lt;p&gt;Once I started learning and doing AngularJS stuff, I feel its a lot of fun doing front-end development too. AngularJS made so many things easy to build front-end UI such as templating, routing, Ajax etc. I started reading and experimenting with AngularJS on weekends too. I bought couple of AngularJS books and started tinkering with IONIC framework(which depends on AngularJS) too for Mobile Development. Everything about AngularJS is looking great.&lt;/p&gt;

&lt;blockquote&gt;Last night I saw ng-europe conference videos on YouTube and I was shocked by seeing their AngularJS 2.0 plans. The bottom line of AngularJS 2.0 is &#34;**They are going to kill everything that I learned and familiar with like $scope, controllers, jqLite etc&#34; and introducing &#34;annotation madness&#34; and borrowing features from Dart/TypeScript/AtScript whatever**.&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Simply put the relationship between AngularJS 1.0 to AngularJS 2.0 is same as Struts 1.0 to Struts 2.0. They are sharing the same name for branding purpose, except that everything looks different.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us take a step back and see what is good and what is bad in AngularJS 2.0 direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adaptability:&lt;/strong&gt;&lt;br /&gt;
I feel one of the reasons for AngularJS popularity is, it is easy to learn and use even for back-end developers. I am not feeling the same excitement after looking at AngularJS 2.0 annotated classes, cryptic attributes like (click)=&amp;ldquo;doSomething()&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As a Java Developer my primary interest is in back-end stuff and I just need a tool to get the front-end stuff done without delving too much into HTML/JavaScript world and I find AngularJS 1.x is really great for my kind of people.&lt;/p&gt;

&lt;p&gt;Now with this 2.0 changes for adopting next generation ECMAScript/Dart/AtScript/Whatever features, AngularJS is not seems easy to me like it used to be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ecosystem:&lt;/strong&gt;&lt;br /&gt;
One best part of AngularJS is you can find hell lot of information in blogs, YouTube, books etc. Just search for AngularJS tutorials, I am sure you will get piles of blogs and videos showing how to developing end to end applications using AngularJS.&lt;/p&gt;

&lt;p&gt;Many people invested so much time in learning AngularJS way of doing things, blogged about it. Many books published on AngularJS and many more books are on the way.&lt;/p&gt;

&lt;p&gt;With the AngularJS 2.0 direction, all of this knowledge become legacy. Do you buy and read an AngularJS 1.x book which is going to become legacy content soon??!!&lt;/p&gt;

&lt;p&gt;Lot of developers spend so much time and build open-source modules and published on www.ngmodules.org. What will be the future of these modules?? What the module authors should do now? Should they continue adding more features for a dead end project? Should they take a break and wait for 2.0 release and rewrite their whole module as per 2.0 way of doing things??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Tools:&lt;/strong&gt;&lt;br /&gt;
NetBeans/Intellij/Eclipse IDE developers might have spent good amount of time for adding support for AngularJS. Now they have to write another set of plugin(s) for AngularJS 2.0 support!! What about Yeoman angular-generator and jHipster??!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future of applications recently ported to AngularJS:&lt;/strong&gt;&lt;br /&gt;
Many of the enthusiastic developers learned and loved AngularJS and convinced their managers to use AngularJS for their next big project. Even worse, you might have recently migrated one of your legacy project to AngularJS. What will be the future of these kind of applications? Should we again rewrite whole application using AngularJS 2.0 or stick to AngularJS 1.3 forever??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider my scenario.&lt;/strong&gt;&lt;br /&gt;
We have an internal application with a small set of futures which is developed using Java/Spring/jQuery. We have plans to add lot of other features to this application. I spent lot of time convincing my fellow developers that AngularJS is better and get them out of their &amp;ldquo;jQuery comfort zone&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;After I showed few demos and explained a bunch of AngularJS features, my manager and team agreed to go with SpringBoot and AngularJS. Now how do I break this news to my manager and team? Should I go back and say &amp;ldquo;Whatever I explained you about AngularJS is going to be changed completely and I don&amp;rsquo;t know how it will be in AngularJS 2.0&amp;rdquo;?.&lt;/p&gt;

&lt;blockquote&gt;  
**OMG, I am complaining a lot!! **I know it&#39;s open-source world. If you like it use it, otherwise move on. Some people even argue you can fork it and continue on AngularJS 1.x branch and we all know where that argument leads to.&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong. &lt;strong&gt;I am not saying frameworks/libraries should not be evolved. For a major version a framework can break compatibility to some extent, but not to an extent where you just have to rewrite everything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;br /&gt;
AngularJS 1.x was great. But even before my organization&amp;rsquo;s evaluation cycle completes you broke the compatibility rule. I can&amp;rsquo;t confidently suggest AngularJS for my future project anymore.&lt;/p&gt;

&lt;p&gt;On the bright side, AngularJS 2.0 might be a better framework than AngularJS 1.x if you look at it as a brand new framework (who knows!!). Hope AngularJS 2.0 will be great!!.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS: Different ways of using Array Filters</title>
      <link>http://sivalabs.github.io/post/2014/angularjs-different-ways-of-using-array-filters/</link>
      <pubDate>Mon, 15 Sep 2014 07:13:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2014/angularjs-different-ways-of-using-array-filters/</guid>
      <description>&lt;p&gt;&lt;strong&gt;AngularJS&lt;/strong&gt; provides filter feature which can be used to format input value or to filter an Array with the given matching input criteria. For example you can use &amp;lsquo;date&amp;rsquo; filter to format a Date value into human readable Date representation like &lt;strong&gt;MM-DD-YYYY&lt;/strong&gt; as &lt;strong&gt;{{dob | date}}&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand there are Array filtering feature which is very useful while filtering data from an Array of JavaScript objects. The Array filtering is very commonly used with a Table along with &lt;strong&gt;ng-repeat&lt;/strong&gt; directive.&lt;/p&gt;

&lt;p&gt;For example, we can have a list of Todos which we can display in a Table using &lt;strong&gt;ng-repeat&lt;/strong&gt; tag. And we can have a text field to search todos which matches any one of the data properties of Todo object as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.todos = [
    {id: 1,title: &#39;Learn AngularJS&#39;, description: &#39;Learn AngularJS&#39;, done: true, date: new Date()}  ,
    {id: 2,title: &#39;Explore ui-router&#39;, description: &#39;Explore and use ui-router instead of ngRoute&#39;, done: true, date: new Date()}  ,
    {id: 3,title: &#39;Play with Restangular&#39;, description: &#39;Restangular seems better than $resource, have a look&#39;, done: false, date: new Date()}  ,
    {id: 4,title: &#39;Try yeoman&#39;, description: &#39;No more labour work..use Yeoman&#39;, done: false, date: new Date()}  ,
    {id: 5,title: &#39;Try MEANJS&#39;, description: &#39;Aah..MEANJS stack seems cool..why dont u try once&#39;, done: false, date: new Date()}                
            ];









&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;searchTodos&amp;quot;&amp;gt;
 &amp;lt;table class=&amp;quot;table table-striped table-bordered&amp;quot;&amp;gt;
 &amp;lt;thead&amp;gt;
  &amp;lt;tr&amp;gt;
   &amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;
   &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt;
   &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;
   &amp;lt;th&amp;gt;Done?&amp;lt;/th&amp;gt;
   &amp;lt;th&amp;gt;Date&amp;lt;/th&amp;gt;
  &amp;lt;/tr&amp;gt;
 &amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
  &amp;lt;tr ng-repeat=&amp;quot;todo in todos| filter: searchTodos&amp;quot;&amp;gt;
   &amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;{{todo.title}}&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;{{todo.description}}&amp;lt;/td&amp;gt; 
   &amp;lt;td&amp;gt;{{todo.done}}&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;{{todo.date | date}}&amp;lt;/td&amp;gt; 
  &amp;lt;/tr&amp;gt;

 &amp;lt;/tbody&amp;gt;

&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observe that our search input field&amp;rsquo;s &lt;strong&gt;ng-model&lt;/strong&gt; attribute is set to &amp;lsquo;&lt;strong&gt;searchTodos&lt;/strong&gt;&amp;rsquo; which we have used to filter on &lt;strong&gt;ng-repeat&lt;/strong&gt; attribute. As you type in the search input field, the &lt;strong&gt;$scope.todos&lt;/strong&gt; array will be filtered and only matching records will be shown up. This is a &amp;ldquo;&lt;strong&gt;match anything&lt;/strong&gt;&amp;rdquo; type filter, means the search criteria will be checked against all properties(&lt;strong&gt;id, title, description, date&lt;/strong&gt;) of Todo object.&lt;/p&gt;

&lt;p&gt;If you want to search only on one field, say &amp;lsquo;&lt;strong&gt;description&lt;/strong&gt;&amp;rsquo;, you can apply filter as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&amp;quot;todo in todos| filter: {description: searchTodos}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to display only Todos which aren&amp;rsquo;t &lt;strong&gt;done&lt;/strong&gt; yet then you can do it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&amp;quot;todo in todos| filter: {description: searchTodos, done: false}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note that here the 2 conditions will be applied using AND conditions. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to display only Todos which aren&amp;rsquo;t done yet and you want to search on all fields not just on &amp;lsquo;&lt;strong&gt;description&lt;/strong&gt;&amp;rsquo; then you can do it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&amp;quot;todo in todos| filter: {$: searchTodos, done: false}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;strong&gt;$&lt;/strong&gt; means all fields. So far so good as it is a simple and straight forward case.&lt;/p&gt;

&lt;p&gt;How about having nested objects in our Array objects and we want to search based on a nested object property?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at such a type of scenario. In order to explain these scenarios I am using some code examples from my ebuddy application.&lt;/p&gt;

&lt;p&gt;In my ebuddy application I have an ExpenseManager module where I will keep track of my expenses as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I will have a list of Accounts such as Cash, savings Bank Account, CreditCard etc with the current balance details.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I will have a list of Payees such as HouseRent, PowerBill, Salary etc which fall into INCOME or EXPENDITURE categories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I will record all my transactions by picking one of the account and a Payee and the amount.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This application is just to record my financial transactions so that I can see monthly reports by Account or Payee wise. I hope you get an idea about the domain model.&lt;/p&gt;

&lt;p&gt;Now let us create a simple AngularJS application and set some sample data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;My AngularJS App&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;link href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;/&amp;gt;
  &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.20/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

  &amp;lt;script&amp;gt;
      var myApp = angular.module(&#39;myApp&#39;,[]);
      myApp.controller(&#39;SampleController&#39;, function($scope){
            $scope.accounts = [ 
                    {id: 1, name: &#39;Cash&#39;}, 
                    {id: 2, name: &#39;Bank Savings&#39;} 
                  ];
            $scope.payees = [
                    {id:&#39;1&#39;,name:&#39;HouseRent&#39;, txnType:&#39;EXPENDITURE&#39;},
                    {id: &#39;2&#39;, name:&#39;InternetBill&#39;, txnType:&#39;EXPENDITURE&#39;}, 
                    {id:&#39;3&#39;, name: &#39;PowerBill&#39;, txnType:&#39;EXPENDITURE&#39;}, 
                    {id:&#39;4&#39;, name: &#39;Salary&#39;, txnType:&#39;INCOME&#39;}
                  ];
            $scope.transactions = [
                {id:&#39;1&#39;, txnType:&#39;EXPENDITURE&#39;, amount: 1000, account: $scope.accounts[0], payee: $scope.payees[0]},
                {id:&#39;2&#39;, txnType:&#39;EXPENDITURE&#39;, amount: 500, account: $scope.accounts[1], payee: $scope.payees[1]},
                {id:&#39;3&#39;, txnType:&#39;EXPENDITURE&#39;, amount: 1200, account: $scope.accounts[0], payee: $scope.payees[1]},
                {id:&#39;4&#39;, txnType:&#39;INCOME&#39;, amount: 5000, account: $scope.accounts[1], payee: $scope.payees[3]},
                {id:&#39;5&#39;, txnType:&#39;EXPENDITURE&#39;, amount:200, account: $scope.accounts[0], payee: $scope.payees[2]}
            ];

      });

  &amp;lt;/script&amp;gt;  
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;SampleController&amp;quot;&amp;gt;
&amp;lt;br/&amp;gt;
 &amp;lt;div class=&amp;quot;col-md-8 col-md-offset-2&amp;quot;&amp;gt;

    &amp;lt;h3&amp;gt;Transaction Details&amp;lt;/h3&amp;gt;
    &amp;lt;table class=&amp;quot;table table-striped table-bordered&amp;quot;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Account&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Type&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Payee&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Amount&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr ng-repeat=&amp;quot;txn in transactions&amp;quot;&amp;gt;
                &amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{txn.account.name}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{txn.txnType}}&amp;lt;/td&amp;gt; 
                &amp;lt;td&amp;gt;{{txn.payee.name}}&amp;lt;/td&amp;gt; 
                &amp;lt;td&amp;gt;{{txn.amount}}&amp;lt;/td&amp;gt; 
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple AngularJS page which is displaying list of transactions in a table. Observe that the transactions contains nested objects (&lt;strong&gt;account&lt;/strong&gt;, &lt;strong&gt;payee&lt;/strong&gt;) and we are displaying nested properties (&lt;strong&gt;txn.account.name&lt;/strong&gt;, &lt;strong&gt;txn.payee.name&lt;/strong&gt;) in our table.&lt;/p&gt;

&lt;p&gt;Now we want to filter the transactions in a variety of ways, so lets look at them case by case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case#1: Search by Payee Name &lt;/strong&gt;
In our transaction object we have a nested payee object which contains name property on which we want to perform search.&lt;/p&gt;

&lt;p&gt;Let us create form which will contain all our filters before transactions table.
The first thought that came to my mind to perform a search on a nested property is use the nested property path in filter as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;payeeName&amp;quot;&amp;gt;
...
&amp;lt;tr ng-repeat=&amp;quot;txn in transactions| filter: {payee.name : payeeName}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;But THIS WON&amp;rdquo;T WORK. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To search on a nested property we can name our input field &lt;strong&gt;ng-model&lt;/strong&gt; to match the target property path and use the root object name as filter as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;col-md-8 col-md-offset-2&amp;quot;&amp;gt;
     &amp;lt;form class=&amp;quot;form-horizontal&amp;quot; role=&amp;quot;form&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
          &amp;lt;label for=&amp;quot;input1&amp;quot; class=&amp;quot;col-sm-4 control-label&amp;quot;&amp;gt;Search by Payee&amp;lt;/label&amp;gt;
          &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt;
            &amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;input1&amp;quot; placeholder=&amp;quot;Payee Name&amp;quot; ng-model=&amp;quot;filterTxn.payee.name&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
  &amp;lt;!-- additional filters will come here --&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;h3&amp;gt;Transaction Details&amp;lt;/h3&amp;gt;
 &amp;lt;table class=&amp;quot;table table-striped table-bordered&amp;quot;&amp;gt;
  ...
  &amp;lt;tbody&amp;gt;
            &amp;lt;tr ng-repeat=&amp;quot;txn in transactions| filter: filterTxn&amp;quot;&amp;gt;
                ...
    ...
            &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observe that we have bind the input field ng-model to &amp;ldquo;&lt;strong&gt;filterTxn.payee.name&lt;/strong&gt;&amp;rdquo; and used filter: &lt;strong&gt;filterTxn&lt;/strong&gt; as filter. So &lt;strong&gt;txn.payee.name&lt;/strong&gt; will be matched against &lt;strong&gt;filterTxn.payee.name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case#2: Filter by Accounts Dropdown &lt;/strong&gt;
We would like to filter the transactions by using Accounts Select dropdown. First we need to populate a select dropdown using &lt;strong&gt;$scope.accounts&lt;/strong&gt; and use it as a filter.&lt;/p&gt;

&lt;p&gt;Add the following filter after our first filter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
  &amp;lt;label for=&amp;quot;input2&amp;quot; class=&amp;quot;col-sm-4 control-label&amp;quot;&amp;gt;Search By Account&amp;lt;/label&amp;gt;
  &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt;
  &amp;lt;select id=&amp;quot;input2&amp;quot; class=&amp;quot;form-control&amp;quot; ng-model=&amp;quot;filterTxn.account&amp;quot;&amp;gt;
   &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;All Accounts&amp;lt;/option&amp;gt;
   &amp;lt;option ng-repeat=&amp;quot;item in accounts&amp;quot; value=&amp;quot;{{item.id}}&amp;quot;&amp;gt;{{item.name}}&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are populating a &lt;select&gt; field with &lt;strong&gt;$scope.accounts&lt;/strong&gt; array by displaying Account Name and using id as value.&lt;/p&gt;

&lt;p&gt;The key part here is we have bind &lt;strong&gt;ng-model&lt;/strong&gt; to &lt;strong&gt;filterTxn.account&lt;/strong&gt;. When we select an account, the selected account object reference will be stored in &lt;strong&gt;filterTxn.account&lt;/strong&gt;. As we already have &lt;strong&gt;filterTxn&lt;/strong&gt; as filter, the account filter will also be applied along with payee name filter.&lt;/p&gt;

&lt;p&gt;Also note that the first option &lt;strong&gt;&amp;ldquo;All Accounts&amp;rdquo;&lt;/strong&gt; value is empty (&lt;strong&gt;&amp;rdquo;&amp;rdquo;&lt;/strong&gt;) which will be treated as &lt;strong&gt;null&lt;/strong&gt; by AngularJS, so when the &amp;ldquo;All Accounts&amp;rdquo; is option is selected no account filter will be applied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case#3: Search By Transaction Type &lt;/strong&gt;
We want to filter the transaction by transaction type (&lt;strong&gt;INCOME&lt;/strong&gt; or &lt;strong&gt;EXPENDITURE&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;Add the following filter after the second filter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
  &amp;lt;label for=&amp;quot;input3&amp;quot; class=&amp;quot;col-sm-4 control-label&amp;quot;&amp;gt;Search By Type&amp;lt;/label&amp;gt;
  &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt;
  &amp;lt;select id=&amp;quot;input3&amp;quot; class=&amp;quot;form-control&amp;quot; ng-model=&amp;quot;filterTxn.txnType&amp;quot;&amp;gt;
   &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;All Types&amp;lt;/option&amp;gt;
   &amp;lt;option value=&amp;quot;EXPENDITURE&amp;quot;&amp;gt;EXPENDITURE&amp;lt;/option&amp;gt;
   &amp;lt;option value=&amp;quot;INCOME&amp;quot;&amp;gt;INCOME&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope no further explanation is need for this :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case#4: Search by Payees of Expenditure type &lt;/strong&gt;
Aaah..this is interesting!!. We want to search by Payee names but only in &lt;strong&gt;EXPENDITURE&lt;/strong&gt; type payees.&lt;/p&gt;

&lt;p&gt;We can&amp;rsquo;t simply apply filter like &lt;strong&gt;&amp;ldquo;filter: expPayeeFilter | filter: {txnType: &amp;lsquo;EXPENDITURE&amp;rsquo;}&amp;rdquo;&lt;/strong&gt; because it will always filter by &lt;strong&gt;EXPENDITURE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we will create a custom filter to perform &amp;ldquo;&lt;strong&gt;&lt;em&gt;search by payee name in EXPENDITURE type payees only when some filter text entered&lt;/em&gt;&lt;/strong&gt;&amp;rdquo; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myApp.filter(&#39;expenditurePayeeFilter&#39;, [function($filter) {
 return function(inputArray, searchCriteria, txnType){         
  if(!angular.isDefined(searchCriteria) || searchCriteria == &#39;&#39;){
   return inputArray;
  }         
  var data=[];
  angular.forEach(inputArray, function(item){             
   if(item.txnType == txnType){
    if(item.payee.name.toLowerCase().indexOf(searchCriteria.toLowerCase()) != -1){
     data.push(item);
    }
   }
  });      
  return data;
 };
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have created a custom filter using &lt;strong&gt;myApp.filter()&lt;/strong&gt; and inside it we have used &lt;strong&gt;angular.forEach()&lt;/strong&gt; to iterate over the input array, rest is plain javascript..no magic.&lt;/p&gt;

&lt;p&gt;Now we will apply this custom filter as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&amp;quot;txn in transactions| filter: filterTxn | expenditurePayeeFilter:searchCriteria:&#39;EXPENDITURE&#39;&amp;quot;&amp;gt;
 &amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{txn.account.name}}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{txn.txnType}}&amp;lt;/td&amp;gt; 
 &amp;lt;td&amp;gt;{{txn.payee.name}}&amp;lt;/td&amp;gt; 
 &amp;lt;td&amp;gt;{{txn.amount}}&amp;lt;/td&amp;gt; 
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observer the syntax: &lt;strong&gt;customFilterName:param1:param2:..:paramN&lt;/strong&gt;.
These parameters will be passed as arguments to the function inside our custom directive.&lt;/p&gt;

&lt;p&gt;We have seen few interesting options on how to use AngularJS array filtering features.&lt;/p&gt;

&lt;p&gt;You can find the complete page at &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/fbee047803d14631fafd&#34;&gt;https://gist.github.com/sivaprasadreddy/fbee047803d14631fafd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps. :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS: Introducing modules, controllers, services</title>
      <link>http://sivalabs.github.io/post/2014/angularjs-introducing-modules-controllers-services/</link>
      <pubDate>Fri, 05 Sep 2014 13:08:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2014/angularjs-introducing-modules-controllers-services/</guid>
      <description>&lt;p&gt;In my previous post &lt;a href=&#34;http://www.sivalabs.in/2014/09/angularjs-tutorial-getting-started-with.html&#34;&gt;&lt;strong&gt;AngularJS Tutorial: Getting Started with AngularJS&lt;/strong&gt;&lt;/a&gt; we have seen how to setup an application using SpringBoot + AngularJS + WebJars. But it&amp;rsquo;s a kind of quick start tutorial where I haven&amp;rsquo;t explained much about AngularJS modules, controllers and services. Also it is a single screen (only one route) application.&lt;/p&gt;

&lt;p&gt;In this part-2 tutorial, we will take a look at what are Angular modules, controllers and services and how to configure and use them. Also we will look into how to use &lt;strong&gt;ngRoute&lt;/strong&gt; to build multi-screen application.&lt;/p&gt;

&lt;p&gt;If we take a look at the code that we developed in previous post, especially in &lt;strong&gt;controllers.js&lt;/strong&gt;, we clubbed the client side controller logic and business logic(of-course we don&amp;rsquo;t have any biz logic here :-)) in our Controllers which is not good.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As java developers we get used to have dozen layers and we love making things complex and complain Java is complex. But here in AngularJS things looks simpler, let&amp;rsquo;s make things little bit complex. I am just kidding :-)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;Even if you put all your logic in single place as we did in **controllers.js**, it will work and acceptable for simple applications. But if you are going to develop large enterprise application (who said enterprise applications should be large...hmm..ok..continue..) then things quickly become messy. And believe me working with a messy large JavaScript codebase is lot more painful than messy large Java codebase. So it is a good idea to separate the business logic from controller logic.&lt;/blockquote&gt;

&lt;p&gt;In AngularJS we can organize application logic into modules and make them work together using dependency injection. Lets see how to create a module in AngularJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;var myModule = angular.module(&amp;lsquo;moduleName&amp;rsquo;,[&amp;lsquo;dependency1&amp;rsquo;,&amp;lsquo;dependency2&amp;rsquo;]);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is how we can create a module by using angular.module() function by passing the module name and specifying a list of dependencies if there are any.&lt;/p&gt;

&lt;p&gt;Once we define a module we can get handle of the module as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;var myModule = angular.module(&amp;lsquo;moduleName&amp;rsquo;);&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;_Observe that there is no second argument here which means we are getting the reference of a predefined angular module. If you include the second argument, which is an array, then it means you are defining the new module._&lt;/blockquote&gt;

&lt;p&gt;Once we define a new module we can create controllers in that module as follows:&lt;/p&gt;

&lt;p&gt;module.controller(&amp;lsquo;ControllerName&amp;rsquo;,[&amp;lsquo;dependency1&amp;rsquo;,&amp;lsquo;dependency2&amp;rsquo;, function(dependency1, dependency2){
//logic
}]);&lt;/p&gt;

&lt;p&gt;For example, lets see how we to create &lt;strong&gt;TodoController&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var myApp = angular.module(&amp;lsquo;myApp&amp;rsquo;,[&amp;lsquo;ngRoute&amp;rsquo;]);
myApp.controller(&amp;lsquo;TodoController&amp;rsquo;,[&amp;lsquo;$scope&amp;rsquo;,&amp;lsquo;$http&amp;rsquo;,function($scope,$http){
//logic
}]);&lt;/p&gt;

&lt;p&gt;Here we are creating &lt;strong&gt;TodoController&lt;/strong&gt; and providing &lt;strong&gt;$scope&lt;/strong&gt; and &lt;strong&gt;$http&lt;/strong&gt; as dependencies which are built-in angularjs services.&lt;/p&gt;

&lt;p&gt;We can also create the same controller as follows:
myApp.controller(&amp;lsquo;TodoController&amp;rsquo;,function($scope,$http){
//logic
});&lt;/p&gt;

&lt;p&gt;Observe that we are directly passing a function as a second argument instead of an array which has an array of dependencies followed by a function which takes the same dependencies as arguments and it works exactly same as array based declaration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why do we need to do more typing when both do the same thing??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AngularJS injects the dependencies by name, that means when you define $http as a dependency then AngularJS looks for a registered service with name &amp;lsquo;&lt;strong&gt;$http&lt;/strong&gt;&amp;rsquo;. But majority of the real world applications use JavaScript code minification tools to reduce the size. Those tools may rename your variables to short variable names.&lt;/p&gt;

&lt;p&gt;For example:
myApp.controller(&amp;lsquo;TodoController&amp;rsquo;,function($scope,$http){
//logic
});&lt;/p&gt;

&lt;p&gt;The preceding code might be minified into:
myApp.controller(&amp;lsquo;TodoController&amp;rsquo;,function($s,$h){
//logic
});&lt;/p&gt;

&lt;p&gt;Then AngularJS tries to look for registered services with names &lt;strong&gt;$s&lt;/strong&gt; and &lt;strong&gt;$h&lt;/strong&gt; instead of &lt;strong&gt;$scope&lt;/strong&gt; and &lt;strong&gt;$http&lt;/strong&gt; and eventually it will fail. To overcome this issue we define the names of services as string literals in array and specify the same names as function arguments. With this even after JavaScript minifies the function argument names, string literals remains same and AngularJS picks right services to inject.&lt;/p&gt;

&lt;p&gt;That means you can write the controller as follows:&lt;/p&gt;

&lt;p&gt;myApp.controller(&amp;lsquo;TodoController&amp;rsquo;,[&amp;lsquo;$scope&amp;rsquo;,&amp;lsquo;$http&amp;rsquo;,function($s,$h){
//here $s represents $scope and $h represents $http services
}]);&lt;/p&gt;

&lt;blockquote&gt;**So always prefer to use array based dependencies approach.**&lt;/blockquote&gt;

&lt;p&gt;Ok, now we know how to create controllers. Lets see how we can add some functionality to our controllers.&lt;/p&gt;

&lt;p&gt;Here in our &lt;strong&gt;TodoController&lt;/strong&gt; we defined a variable &lt;strong&gt;todos&lt;/strong&gt; which initially holds an empty array and we defined &lt;strong&gt;loadTodos()&lt;/strong&gt; function which loads todos from RESTful services using &lt;strong&gt;$http.get()&lt;/strong&gt; and once response received we are setting the todos array to our &lt;strong&gt;todos&lt;/strong&gt; variable. Simple and straight forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why can&amp;rsquo;t we directly assign the response of $http.get() to our todos variable like todoCtrl.todos = $http.get(&amp;lsquo;/todos.json&amp;rsquo;);??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because &lt;strong&gt;$http.get(&amp;lsquo;/todos.json&amp;rsquo;)&lt;/strong&gt; returns a &lt;strong&gt;promise&lt;/strong&gt;, not actual response data. So you have to get data from success handler function. Also note that if you want to perform any logic after receiving data from &lt;strong&gt;$http.get()&lt;/strong&gt; you should put your logic inside success handler function only.&lt;/p&gt;

&lt;p&gt;For example if you are deleting a Todo item and then reload the todos you should &lt;strong&gt;NOT&lt;/strong&gt; do as follows:&lt;/p&gt;

&lt;p&gt;$http.delete(&amp;lsquo;/todos.json/1&amp;rsquo;).success(function(data){
//hurray, deleted
}).error(function(){
alert(&amp;lsquo;Error in deleting Todo&amp;rsquo;);
});
todoCtrl.loadTodos();&lt;/p&gt;

&lt;p&gt;Here you might assume that after delete is done it will &lt;strong&gt;loadTodos()&lt;/strong&gt; and the deleted Todo item won&amp;rsquo;t show up, but that won&amp;rsquo;t work like that. You should do it as follows:&lt;/p&gt;

&lt;p&gt;$http.delete(&amp;lsquo;/todos.json/1&amp;rsquo;).success(function(data){
//hurray, deleted
todoCtrl.loadTodos();
}).error(function(){
alert(&amp;lsquo;Error in deleting Todo&amp;rsquo;);
});&lt;/p&gt;

&lt;p&gt;Lets move on to how to create AngularJS services. Creating services is also similar to controllers but AngularJS provides multiple ways for creating services.
There are 3 ways to create AngularJS services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;module.factory()&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;module.service()&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;module.provider()&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Using module.factory()&lt;/strong&gt;
We can create a service using &lt;strong&gt;module.factory()&lt;/strong&gt; as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/b264fd883424a895c9e7&#34;&gt;https://gist.github.com/sivaprasadreddy/b264fd883424a895c9e7&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using module.service()&lt;/strong&gt;
We can create a service using &lt;strong&gt;module.service()&lt;/strong&gt; as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/42bd33585fc34b9fa6b7&#34;&gt;https://gist.github.com/sivaprasadreddy/42bd33585fc34b9fa6b7&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using module.provider()&lt;/strong&gt;
We can create a service using &lt;strong&gt;module.provider()&lt;/strong&gt; as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/522fb12b3e4b22c1d0ca&#34;&gt;https://gist.github.com/sivaprasadreddy/522fb12b3e4b22c1d0ca&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;You can find good documentation on which method is appropriate in which scenario at &lt;a href=&#34;http://www.ng-newsletter.com/advent2013/#!/day/1&#34;&gt;http://www.ng-newsletter.com/advent2013/#!/day/1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us create a **TodoService **in our &lt;strong&gt;services.js&lt;/strong&gt; file as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/746449a4623d12cf37d1&#34;&gt;https://gist.github.com/sivaprasadreddy/746449a4623d12cf37d1&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now inject our **TodoService **into our **TodoController **as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/c9ef496493fdf42f4bf8&#34;&gt;https://gist.github.com/sivaprasadreddy/c9ef496493fdf42f4bf8&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now we have separated our controller logic and business logic using AngularJS controllers and services and make them work together using Dependency Injection.&lt;/p&gt;

&lt;p&gt;In the beginning of the post I said we will be developing a multi-screen application demonstrating &lt;strong&gt;ngRoute&lt;/strong&gt; functionality.
In addition to Todos, let us add PhoneBook feature to our application where we can maintain list of contacts.&lt;/p&gt;

&lt;p&gt;First, let us build the back-end functionality for PhoneBook REST services.&lt;/p&gt;

&lt;p&gt;Create Person JPA entity, its Spring Data JPA repository and Controller.
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/0742b57bad46fa3809e6&#34;&gt;https://gist.github.com/sivaprasadreddy/0742b57bad46fa3809e6&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now let us create AngularJS service and controller for Contacts. Observe that we will be using &lt;strong&gt;module.service()&lt;/strong&gt; approach this time.
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/8a1744e0696fbdaa9375&#34;&gt;https://gist.github.com/sivaprasadreddy/8a1744e0696fbdaa9375&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now we need to configure our application routes in &lt;strong&gt;app.js&lt;/strong&gt; file.
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/9b35955454f750ed7911&#34;&gt;https://gist.github.com/sivaprasadreddy/9b35955454f750ed7911&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Here we have configured our application routes on &lt;strong&gt;$routeProvider&lt;/strong&gt; inside &lt;strong&gt;myApp.config()&lt;/strong&gt; function.
When url matches with any of the routes then corresponding template content will be rendered in &lt;strong&gt;&lt;div ng-view&gt;&lt;/div&gt;&lt;/strong&gt; div in our &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the url doesn&amp;rsquo;t match with any of the configured urls then it will be routed to &amp;lsquo;&lt;strong&gt;home&lt;/strong&gt;&amp;rsquo; as specified in &lt;strong&gt;otherwise()&lt;/strong&gt; configuration.&lt;/p&gt;

&lt;p&gt;Our &lt;strong&gt;templates/home.html&lt;/strong&gt; won&amp;rsquo;t have anything for now and &lt;strong&gt;templates/todos.html&lt;/strong&gt; file will be same as &lt;strong&gt;home.html&lt;/strong&gt; in previous post.&lt;/p&gt;

&lt;p&gt;The new** templates/contacts.html** will just have a table listing contacts as follows:
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/0e7ea5f70a00f5e2a088&#34;&gt;https://gist.github.com/sivaprasadreddy/0e7ea5f70a00f5e2a088&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now let us create navigation links to Todos, Contacts pages in our &lt;strong&gt;index.html&lt;/strong&gt; page &lt;strong&gt;&lt;body&gt;&lt;/strong&gt;.
[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/d477e4fadcf3dc3ec28f&#34;&gt;https://gist.github.com/sivaprasadreddy/d477e4fadcf3dc3ec28f&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;By now we have a multi-screen application and we understood how to use modules, controllers and services.
You can find the code for this article at &lt;a href=&#34;https://github.com/sivaprasadreddy/angularjs-samples/tree/master/angularjs-series/angularjs-part2&#34;&gt;https://github.com/sivaprasadreddy/angularjs-samples/tree/master/angularjs-series/angularjs-part2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next article would be on how to use &lt;strong&gt;$resource&lt;/strong&gt; instead of &lt;strong&gt;$http&lt;/strong&gt; to consume REST services. 
Also we will look update our application to use more powerful &lt;strong&gt;ui-router&lt;/strong&gt; module instead of &lt;strong&gt;ngRoute&lt;/strong&gt;. Stay tuned :-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Tutorial: Getting Started with AngularJS</title>
      <link>http://sivalabs.github.io/post/2014/angularjs-tutorial-getting-started-with-angularjs/</link>
      <pubDate>Thu, 04 Sep 2014 13:44:00 +0000</pubDate>
      
      <guid>http://sivalabs.github.io/post/2014/angularjs-tutorial-getting-started-with-angularjs/</guid>
      <description>&lt;p&gt;AngularJS is a popular JavaScript framework for building Single Page Applications (SPAs).
AngularJS provides the following features which makes developing web apps easy:
1. Two way data binding
2. Dependency Injection
3. Custom HTML Directives
4. Easy integration with REST webservices using $http, $resource, Restangular etc
5. Support for Testing
and many more&amp;hellip;&lt;/p&gt;

&lt;p&gt;Though there are lot more features than the above mentioned list, these are the very commonly used features.&lt;/p&gt;

&lt;p&gt;I am not going to explain what 2-way data binding is, how $scope works here because there are tons of material already on web.&lt;/p&gt;

&lt;p&gt;As a Java developer, I will be using SpringBoot based RESTful back-end services. If you want you can use JavaEE/JAX-RS to build REST back-end services. Also you might like using NetBeans as it has wonderful AngularJS auto-completion support out of the box.&lt;/p&gt;

&lt;p&gt;So lets get start coding AngularJS HelloWorld application.&lt;/p&gt;

&lt;p&gt;Create &lt;strong&gt;index.html&lt;/strong&gt; with the following content and start your server and point your browser to &lt;a href=&#34;http://localhost:8080/hello-angularjs/index.html&#34;&gt;http://localhost:8080/hello-angularjs/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/760a1d0e7fdb2b0c8967&#34;&gt;https://gist.github.com/sivaprasadreddy/760a1d0e7fdb2b0c8967&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now start typing in input text and your Hello &lt;em&gt;{{myname}}&lt;/em&gt; would immediately reflect the value you are entering in input text field.&lt;/p&gt;

&lt;p&gt;Ok, we are done with &amp;ldquo;HelloWorld&amp;rdquo; ceremony and warm up :-).&lt;/p&gt;

&lt;p&gt;We have used AngularJS CDN URL for loading AngularJS library. We can download AngularJS from &lt;a href=&#34;https://angularjs.org/&#34;&gt;https://angularjs.org/&lt;/a&gt; add the &lt;em&gt;angular.min.js&lt;/em&gt; script.&lt;/p&gt;

&lt;p&gt;But we will be using WebJars (&lt;a href=&#34;http://www.webjars.org/&#34;&gt;http://www.webjars.org/&lt;/a&gt;) which provides the popular javascript libraries as maven jar modules along with transitive dependencies. If we want to use Twitter Bootstrap we should include jQuery also. But using WebJars I need to configure only bootstrap jar dependency and it will pull jquery dependency for me.&lt;/p&gt;

&lt;p&gt;Let us create a SpringBoot project by selecting File -&amp;gt; New -&amp;gt; Spring Starter Project, select &amp;ldquo;Web&amp;rdquo; and &amp;ldquo;Data JPA&amp;rdquo; modules and Finish.&lt;/p&gt;

&lt;p&gt;If you are not using STS then you can create this starter template from &lt;a href=&#34;http://start.spring.io/&#34;&gt;http://start.spring.io/&lt;/a&gt; and download it as zip.&lt;/p&gt;

&lt;p&gt;We will be using Bootstrap and font-awesome javascript libraries to build our Web UI.
Lets configure H2 database, AngularJS, Bootstrap and font-awesome libraries as WebJar maven dependencies in pom.xml.&lt;/p&gt;

&lt;p&gt;As it is a SpringBoot jar type application we will put all our html pages in src/main/resources/public folder and all our javascripts, css, images in src/main/resources/static folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now modify the AngularJS CDN reference to &lt;strong&gt;&lt;script src=&#34;webjars/angularjs/1.2.19/angular.js&#34;&gt;&lt;/script&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lets include the bootstrap and font-awesome css/js in our index.html. Also we will be using angular-route module for page navigation and hence we need to include &lt;em&gt;angular-route.js&lt;/em&gt; as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lets create &lt;em&gt;app.js&lt;/em&gt; file which contains our main angularjs module configuration in &lt;strong&gt;src/main/resources/static/js&lt;/strong&gt; folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Also create &lt;em&gt;controllers.js, services.js, filters.js, directives.js&lt;/em&gt; in the same folder and include them in &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SpringBoot will serve the static content from &lt;strong&gt;&lt;em&gt;src/main/resources/static&lt;/em&gt;&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/2a6fa7bcac62402fd6f9&#34;&gt;https://gist.github.com/sivaprasadreddy/2a6fa7bcac62402fd6f9&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;In Application.java file add the following RequestMapping to map context root to &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/3580575e8887b57f3cf5&#34;&gt;https://gist.github.com/sivaprasadreddy/3580575e8887b57f3cf5&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now run this Application.java as stand-alone class and go to &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;. It should work same as earlier.&lt;/p&gt;

&lt;p&gt;Now we have basic setup ready. Lets build a very simple Todo application.&lt;/p&gt;

&lt;p&gt;Create a JPA entity Todo.java, its Spring Data JPA repository interface and TodoController to perform Read/Create/Delete operations.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/26d2e24ab9b1bde8e51d&#34;&gt;https://gist.github.com/sivaprasadreddy/26d2e24ab9b1bde8e51d&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Create DatabasePopulator to setup some initial data.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/d4e16e38b4b1fa7e62c3&#34;&gt;https://gist.github.com/sivaprasadreddy/d4e16e38b4b1fa7e62c3&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now our back-end RESTful web services ready at the following URLs.
&lt;strong&gt;GET&lt;/strong&gt; - &lt;a href=&#34;http://localhost:8080/todos&#34;&gt;http://localhost:8080/todos&lt;/a&gt; for getting list of Todos
**POST **- &lt;a href=&#34;http://localhost:8080/todos&#34;&gt;http://localhost:8080/todos&lt;/a&gt; for creating new Todo
**DELETE **- &lt;a href=&#34;http://localhost:8080/todos/1&#34;&gt;http://localhost:8080/todos/1&lt;/a&gt; to delete Todo(id:1)&lt;/p&gt;

&lt;p&gt;Lets create our main angularjs module &amp;lsquo;&lt;strong&gt;myApp&lt;/strong&gt;&amp;rsquo; and configure our application routes in &lt;em&gt;app.js&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/fffc4b9fbb42b1bd6400&#34;&gt;https://gist.github.com/sivaprasadreddy/fffc4b9fbb42b1bd6400&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now update &lt;em&gt;index.html&lt;/em&gt; to hookup &lt;strong&gt;myApp&lt;/strong&gt; module at the root of page using &lt;strong&gt;__&lt;/strong&gt; and use&lt;/p&gt;

&lt;p&gt;to load the current route template.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/01f09813c22126f781ea&#34;&gt;https://gist.github.com/sivaprasadreddy/01f09813c22126f781ea&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Create &lt;em&gt;home.html&lt;/em&gt; template in &lt;strong&gt;src/main/resources/public/templates&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/310fac5c905bde276511&#34;&gt;https://gist.github.com/sivaprasadreddy/310fac5c905bde276511&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;It is a very simple html page with some bootstrap styles and we are using some angularjs features.
We are using &lt;strong&gt;ng-repeat&lt;/strong&gt; directive to iterate through array of Todo JSON objects, &lt;strong&gt;ng-click&lt;/strong&gt; directive to bind a callback function to button click.&lt;/p&gt;

&lt;p&gt;To invoke REST services we will use angularjs built-in &lt;strong&gt;$http&lt;/strong&gt; service. $http service resides in &lt;strong&gt;angular-route.js&lt;/strong&gt;, don&amp;rsquo;t forget to include it in &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;$http.verb(&amp;lsquo;URI&amp;rsquo;)&lt;/strong&gt;&lt;/em&gt;
_&lt;strong&gt;.success(success_callback_function(data, status, headers, config){&lt;/strong&gt;_
&lt;em&gt;** //use data**&lt;/em&gt;
&lt;em&gt;&lt;strong&gt; })&lt;/strong&gt;&lt;/em&gt;
_&lt;strong&gt;.error(error_callback_function(data, status, headers, config) {&lt;/strong&gt;_
&lt;em&gt;**  alert(&amp;lsquo;Error loading data&amp;rsquo;);**&lt;/em&gt;
&lt;em&gt;&lt;strong&gt;});&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example: to make **GET **&lt;em&gt;/todos&lt;/em&gt; REST call&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;$http.get(&amp;lsquo;todos&amp;rsquo;)&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;.success(function(data, status, headers, config) {&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;_ //use data_&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt; })&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;.error(function(data, status, headers, config) {&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;_  alert(&amp;lsquo;Error loading data&amp;rsquo;);_&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;});&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create TodoController in &lt;strong&gt;controllers.js&lt;/strong&gt; file. In TodoController we will create functions to load/create/delete Todos.&lt;/p&gt;

&lt;p&gt;[gist &lt;a href=&#34;https://gist.github.com/sivaprasadreddy/093de52472a2295ee408&#34;&gt;https://gist.github.com/sivaprasadreddy/093de52472a2295ee408&lt;/a&gt; /]&lt;/p&gt;

&lt;p&gt;Now point your browser to &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;. You should see list of Todos and New Todo Entry form and Delete option for each Todo item.&lt;/p&gt;

&lt;p&gt;By now we get some hands-on with AngularJS basic features.
In next post I will explain using multiple routes, multiple controllers and services. Stay tuned :-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>