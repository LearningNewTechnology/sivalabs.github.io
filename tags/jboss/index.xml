<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jboss on SivaLabs</title>
    <link>https://sivalabs.github.io/tags/jboss/</link>
    <description>Recent content in Jboss on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2013 11:40:00 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/tags/jboss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploying BroadleafCommerce 2.0 on JBoss AS 7</title>
      <link>https://sivalabs.github.io/2013/05/deploying-broadleafcommerce-20-on-jboss/</link>
      <pubDate>Mon, 27 May 2013 11:40:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2013/05/deploying-broadleafcommerce-20-on-jboss/</guid>
      <description>First 2 steps are not really related to Broadleaf specific, but mentioned to make it easy to follow(copy/paste) the steps.
**Step#1: Configure DataSources in JBoss AS. **
**
**
&amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafDS&#34; pool-name=&#34;BroadleafDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;true&#34; use-ccm=&#34;true&#34;&amp;gt; &amp;lt;connection-url&amp;gt;jdbc:mysql://localhost:3306/broadleaf&amp;lt;/connection-url&amp;gt; &amp;lt;driver&amp;gt;mysql&amp;lt;/driver&amp;gt; &amp;lt;security&amp;gt; &amp;lt;user-name&amp;gt;root&amp;lt;/user-name&amp;gt; &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;timeout&amp;gt; &amp;lt;idle-timeout-minutes&amp;gt;0&amp;lt;/idle-timeout-minutes&amp;gt; &amp;lt;query-timeout&amp;gt;600&amp;lt;/query-timeout&amp;gt; &amp;lt;/timeout&amp;gt; &amp;lt;/datasource&amp;gt; &amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafSecureDS&#34; pool-name=&#34;BroadleafSecureDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;true&#34; use-ccm=&#34;true&#34;&amp;gt; &amp;lt;connection-url&amp;gt;jdbc:mysql://localhost:3306/broadleaf&amp;lt;/connection-url&amp;gt; &amp;lt;driver&amp;gt;mysql&amp;lt;/driver&amp;gt; &amp;lt;security&amp;gt; &amp;lt;user-name&amp;gt;root&amp;lt;/user-name&amp;gt; &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;timeout&amp;gt; &amp;lt;idle-timeout-minutes&amp;gt;0&amp;lt;/idle-timeout-minutes&amp;gt; &amp;lt;query-timeout&amp;gt;600&amp;lt;/query-timeout&amp;gt; &amp;lt;/timeout&amp;gt; &amp;lt;/datasource&amp;gt; &amp;lt;datasource jta=&#34;true&#34; jndi-name=&#34;java:jboss/datasources/BroadleafCmsDS&#34; pool-name=&#34;BroadleafCmsDS_Pool&#34; enabled=&#34;true&#34; use-java-context=&#34;</description>
    </item>
    
    <item>
      <title>Spring3&#43;JPA2&#43;JavaEE6AppServer = Confusion Over Configuration</title>
      <link>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</link>
      <pubDate>Fri, 12 Oct 2012 05:38:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/spring3jpa2javaee6appserver-confusion-over-configuration/</guid>
      <description>Spring is great, JavaEE6 is great and latest JavaEE6 Application servers are also great. This post is not a rant on Spring Vs JavaEE6, but my experience of porting a Spring3+JPA2(Hibernate) application on JBoss AS-7.1 App Server.
My application requirement is very simple: Developing a couple of SOAP based webservices using Spring3.1 and JPA2(Hibernate) and host it on JBoss AS 7.1.
So I started creating a multi-module maven project with one jar module containing the service implementations using Spring &amp;amp; JPA and another war module which exposes those services as SOAP based webservices.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part 3 â€“ Exception Handling</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</link>
      <pubDate>Tue, 12 Jun 2012 05:24:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-3-exception-handling/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
Exception Handling is an obvious requirement while developing software application. If any error occured while processing user request we should show the user an error page with details like brief exception message, error code(optional), hints to correct the input and retry(optional) and actual root cause(optional). This is applicable to RESTful web services also.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-2: Spring Integration</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</link>
      <pubDate>Wed, 06 Jun 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-2-spring-integration/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy provides support for Spring integration which enables us to expose Spring beans as RESTful WebServices.
Step#1: Configure RESTEasy+Spring dependencies using Maven.
 Step#2: Configure RESTEasy+Spring in web.xml
&amp;lt;web-app xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34; xmlns:web=&#34;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34; xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&#34; id=&#34;WebApp_ID&#34; version=&#34;3.0&#34; &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&amp;lt;/listener-class &amp;lt;/listener &amp;lt;listener &amp;lt;listener-classorg.jboss.resteasy.plugins.spring.SpringContextLoaderListener&amp;lt;/listener-class &amp;lt;/listener &amp;lt;servlet &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;servlet-classorg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&amp;lt;/servlet-class &amp;lt;/servlet &amp;lt;servlet-mapping &amp;lt;servlet-nameResteasy&amp;lt;/servlet-name &amp;lt;url-pattern/rest/*&amp;lt;/url-pattern &amp;lt;/servlet-mapping &amp;lt;context-param contextConfigLocation&amp;lt;/param-name classpath:applicationContext.</description>
    </item>
    
    <item>
      <title>RESTEasy Tutorial Part-1: Basics</title>
      <link>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</link>
      <pubDate>Wed, 06 Jun 2012 10:07:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/06/resteasy-tutorial-part-1-basics/</guid>
      <description>&amp;nbsp;
RESTEasy Tutorial Series
RESTEasy Tutorial Part-1: Basics
RESTEasy Tutorial Part-2: Spring Integration
RESTEasy Tutorial Part 3 &amp;#8211; Exception Handling
RESTEasy is a JAX-RS implementation from JBoss/RedHat and is in-built in JBoss 6 onwards.
Here I am going to show you how to develop a Simple RESTful Web Services application using RESTEasy and JBossAS7.1.1.FINAL.
Step#1: Configure RESTEasy dependencies using Maven.
 Step#2: Configure RESTEasy in web.xml
 Step#3: Create User domain class, MockUserTable class to store User objects in-memory for testing purpose and UserResource class to expose CRUD operations on User as RESTful webservices.</description>
    </item>
    
    <item>
      <title>GeneratedValue not setting up auto increment in mysql and h2 dialects</title>
      <link>https://sivalabs.github.io/2012/04/generatedvalue-not-setting-up-auto-increment-in-mysql-and-h2-dialects/</link>
      <pubDate>Thu, 26 Apr 2012 07:57:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/04/generatedvalue-not-setting-up-auto-increment-in-mysql-and-h2-dialects/</guid>
      <description>Hi,
In earlier versions of Hibernate if we want to have an auto_increment primary key we can use the following:
@Id @GeneratedValue(strategy=GenerationType.AUTO)
@Column(name=&amp;#8221;user_id&amp;#8221;)
private Integer userId;
But in latest version of Hibernate(may be Hibernate4, whatever is used in JBoss AS7) this doesn&amp;#8217;t work as expected. The generated table primary key is not auto_increment column.
To resolve this configure&amp;nbsp; in persistence.xml.</description>
    </item>
    
    <item>
      <title>Solution for JDK6 &#43; JBoss-5.1.0GA &#43; JAX-WS integration error: java.lang.UnsupportedOperationException: setProperty must be overridden by all subclasses of SOAPMessage</title>
      <link>https://sivalabs.github.io/2011/12/solution-for-jdk6-jboss-510ga-jax-ws/</link>
      <pubDate>Sat, 03 Dec 2011 21:23:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/12/solution-for-jdk6-jboss-510ga-jax-ws/</guid>
      <description> &amp;nbsp; &amp;nbsp; Copy the following jars from JBOSS_HOME/client to JBOSS_HOME/lib/endorsed dir.
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a. &amp;nbsp; &amp;nbsp; jbossws-native-jaxrpc.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;b. &amp;nbsp; &amp;nbsp; jbossws-native-jaxws.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;c. &amp;nbsp; &amp;nbsp; jbossws-native-jaxws-ext.jar
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;d. &amp;nbsp; &amp;nbsp; jbossws-native-saaj.jar
 &amp;nbsp; &amp;nbsp; Delete saaj-impl.jar(if its already there) from JBOSS_HOME/lib/endorsed dir.
  </description>
    </item>
    
  </channel>
</rss>